{"id":"9ece896adcc4c581471f99f216864f76","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/SequencedAMM.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title SequencedAMM\n * @dev An Automated Market Maker (AMM) with front-running protection via a trusted sequencer\n *\n * System Overview:\n * This AMM prevents front-running and MEV attacks by removing user transactions from the public mempool.\n * Instead of submitting swaps directly to the blockchain, users send swap intents to a trusted sequencer.\n * The sequencer batches these intents off-chain and uses a commit-reveal pattern to execute them:\n *\n * 1. COMMIT PHASE: Sequencer submits a Merkle root of all swap intents (commitBatchIntents)\n * 2. WAITING PERIOD: A mandatory delay prevents last-minute reordering (commitRevealDelay)\n * 3. REVEAL & EXECUTE: Sequencer reveals and executes all swaps in the batch (batchSwap)\n * 4. FALLBACK: If the sequencer becomes unavailable, users can swap directly (fallbackSwap)\n *\n * The contract also manages liquidity pools using the constant product formula (x*y=k) and\n * handles user deposits, withdrawals, and balance tracking.\n */\ncontract SequencedAMM is Ownable, ReentrancyGuard {\n    address public sequencer;\n    bool public sequencerOnly = true;\n    uint256 public maxBatchDelay = 5 minutes;\n    uint256 public lastBatchTimestamp;\n    \n    // User balances\n    mapping(address => uint256) public ethBalances;\n    mapping(address => uint256) public tokenBalances;\n    \n    // AMM state variables\n    IERC20 public token;\n    uint256 public ethReserve;\n    uint256 public tokenReserve;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n    uint256 public feeRate = 3; // 0.3% fee\n    \n    // Events\n    event Deposit(address indexed user, uint256 amount, bool isEth, uint256 timestamp);\n    event Withdrawal(address indexed user, uint256 amount, bool isEth);\n    event BatchSwap(uint256 batchId, uint256 swapCount);\n    event FallbackSwap(address indexed user, uint256 amountIn, uint256 amountOut, bool ethToToken);\n    event SequencerChanged(address indexed oldSequencer, address indexed newSequencer);\n    event SequencerModeChanged(bool sequencerOnly);\n    event BatchCommitted(uint256 batchId, bytes32 intentRoot, uint256 batchSize);\n    event BatchSwapExecuted(uint256 batchId, uint256 swapCount, uint256 successCount);\n    event LiquidityAdded(address indexed provider, uint256 ethAmount, uint256 tokenAmount);\n    event LiquidityRemoved(address indexed provider, uint256 ethAmount, uint256 tokenAmount);\n    \n    /**\n     * @dev Structure representing a user's swap request\n     * @param user Address of the user requesting the swap\n     * @param ethToToken Direction of the swap (true = ETH to token, false = token to ETH)\n     * @param amountIn Amount of input asset the user wants to swap\n     * @param minAmountOut Minimum amount of output asset the user will accept (slippage protection)\n     * @param timestamp When the sequencer received this request (used for off-chain ordering)\n     */\n    struct SwapIntent {\n        address user;\n        bool ethToToken;\n        uint256 amountIn;\n        uint256 minAmountOut;\n        uint256 timestamp;\n    }\n\n    /**\n     * @dev Stores the cryptographic commitment for each batch and its submission time\n     * These mappings support the commit-reveal pattern that prevents front-running\n     */\n    mapping(uint256 => bytes32) public batchIntentRoots;  // Merkle roots of swap intents\n    mapping(uint256 => uint256) public batchSubmissionTimes;\n    uint256 public nextBatchId = 1;\n    uint256 public commitRevealDelay = 3 minutes;\n\n    /**\n     * @dev Tracks the execution results of each swap in a batch\n     * This allows users to verify their swap was processed correctly and understand\n     * why a swap might have failed\n     */\n    struct BatchResult {\n        uint256 successCount;\n        mapping(uint256 => bool) successfulSwaps;\n        mapping(uint256 => string) failureReasons;\n    }\n    mapping(uint256 => BatchResult) public batchResults;\n\n    /**\n     * @dev Tracks liquidity provider contributions to the pool\n     * Liquidity providers earn fees proportional to their share of the pool\n     */\n    mapping(address => uint256) public liquidityShares;\n    uint256 public totalLiquidityShares;\n    \n    /**\n     * @dev Sets up the AMM with an owner and token address\n     * @param initialOwner Address that will have admin control of the contract\n     * @param tokenAddress The ERC20 token to be paired with ETH in this AMM\n     */\n    constructor(address initialOwner, address tokenAddress) Ownable(initialOwner) {\n        token = IERC20(tokenAddress);\n    }\n    \n    /**\n     * @dev Restricts function access to only the designated sequencer\n     * This ensures only the trusted sequencer can batch and execute swaps\n     */\n    modifier onlySequencer() {\n        require(msg.sender == sequencer, \"Only sequencer can call\");\n        _;\n    }\n\n    /**\n     * @dev Ensures the pool has non-zero reserves after the operation\n     * This prevents divide-by-zero errors in the constant product formula\n     */\n    modifier ensureNonZeroReserves() {\n        _;\n        require(ethReserve > 0 && tokenReserve > 0, \"Reserves cannot be zero\");\n    }\n    \n    /**\n     * @dev Allows users to deposit ETH into their balance in the contract\n     * Users must deposit before they can swap or provide liquidity\n     */\n    function depositETH() external payable {\n        ethBalances[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value, true, block.timestamp);\n    }\n    \n    /**\n     * @dev Allows users to deposit tokens into their balance in the contract\n     * @param amount The amount of tokens to deposit\n     * Requires prior approval of the token contract\n     */\n    function depositToken(uint256 amount) external {\n        require(token.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\n        tokenBalances[msg.sender] += amount;\n        emit Deposit(msg.sender, amount, false, block.timestamp);\n    }\n    \n    /**\n     * @dev Allows users to withdraw ETH from their balance in the contract\n     * @param amount The amount of ETH to withdraw\n     * Protected against reentrancy attacks\n     */\n    function withdrawETH(uint256 amount) external nonReentrant {\n        require(ethBalances[msg.sender] >= amount, \"Insufficient ETH balance\");\n        ethBalances[msg.sender] -= amount;\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n        emit Withdrawal(msg.sender, amount, true);\n    }\n    \n    /**\n     * @dev Allows users to withdraw tokens from their balance in the contract\n     * @param amount The amount of tokens to withdraw\n     * Protected against reentrancy attacks\n     */\n    function withdrawToken(uint256 amount) external nonReentrant {\n        require(tokenBalances[msg.sender] >= amount, \"Insufficient token balance\");\n        tokenBalances[msg.sender] -= amount;\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\n        emit Withdrawal(msg.sender, amount, false);\n    }\n    \n    /**\n     * @dev Allows users to provide liquidity to the AMM pool\n     * @param ethAmount Amount of ETH to contribute\n     * @param tokenAmount Amount of tokens to contribute\n     * \n     * Users receive liquidity shares proportional to their contribution.\n     * After the first deposit, contributions must maintain the current price ratio.\n     * Protected against reentrancy attacks.\n     */\n    function addLiquidity(uint256 ethAmount, uint256 tokenAmount) external nonReentrant ensureNonZeroReserves {\n        require(ethBalances[msg.sender] >= ethAmount, \"Insufficient ETH balance\");\n        require(tokenBalances[msg.sender] >= tokenAmount, \"Insufficient token balance\");\n        \n        uint256 shares;\n        if (totalLiquidityShares == 0) {\n            shares = ethAmount; // Initial liquidity determines initial shares\n        } else {\n            // Ensure proportional deposits to maintain price\n            require(ethAmount * tokenReserve == tokenAmount * ethReserve, \"Unbalanced liquidity\");\n            shares = (ethAmount * totalLiquidityShares) / ethReserve;\n        }\n        \n        require(shares > 0, \"No shares minted\");\n        \n        ethBalances[msg.sender] -= ethAmount;\n        tokenBalances[msg.sender] -= tokenAmount;\n        \n        ethReserve += ethAmount;\n        tokenReserve += tokenAmount;\n        \n        liquidityShares[msg.sender] += shares;\n        totalLiquidityShares += shares;\n        \n        emit LiquidityAdded(msg.sender, ethAmount, tokenAmount);\n    }\n    \n    /**\n     * @dev Allows liquidity providers to withdraw their liquidity from the pool\n     * @param shareAmount The number of liquidity shares to burn\n     * \n     * Returns a proportional amount of ETH and tokens from the pool.\n     * Protected against reentrancy attacks.\n     */\n    function removeLiquidity(uint256 shareAmount) external nonReentrant {\n        require(liquidityShares[msg.sender] >= shareAmount, \"Insufficient shares\");\n        \n        uint256 ethAmount = (shareAmount * ethReserve) / totalLiquidityShares;\n        uint256 tokenAmount = (shareAmount * tokenReserve) / totalLiquidityShares;\n        \n        require(ethAmount > 0 && tokenAmount > 0, \"Amounts too small\");\n        \n        liquidityShares[msg.sender] -= shareAmount;\n        totalLiquidityShares -= shareAmount;\n        \n        ethReserve -= ethAmount;\n        tokenReserve -= tokenAmount;\n        \n        ethBalances[msg.sender] += ethAmount;\n        tokenBalances[msg.sender] += tokenAmount;\n        \n        emit LiquidityRemoved(msg.sender, ethAmount, tokenAmount);\n    }\n    \n    /**\n     * @dev First step of the commit-reveal pattern - sequencer commits to a batch of swap intents\n     * @param intentRoot The Merkle root hash of all swap intents in this batch\n     * @param batchSize The number of swaps included in this batch\n     * \n     * The sequencer constructs a Merkle tree of all user swap intents off-chain,\n     * then commits only the root hash on-chain. This creates a binding commitment\n     * to a specific set of transactions without revealing their details yet.\n     * This commitment prevents the sequencer from changing the transaction set\n     * after seeing new market conditions.\n     */\n    function commitBatchIntents(\n        bytes32 intentRoot,\n        uint256 batchSize\n    ) external onlySequencer {\n        batchIntentRoots[nextBatchId] = intentRoot;\n        batchSubmissionTimes[nextBatchId] = block.timestamp;\n        emit BatchCommitted(nextBatchId, intentRoot, batchSize);\n        nextBatchId++;\n    }\n\n    /**\n     * @dev Second step of the commit-reveal pattern - sequencer reveals and executes the batch\n     * @param batchId The ID of the batch to execute\n     * @param users Array of user addresses for each swap\n     * @param ethToTokenFlags Array of swap directions (true = ETH to token)\n     * @param amountsIn Array of input amounts for each swap\n     * @param minAmountsOut Array of minimum output amounts (slippage protection)\n     * @param proofs Array of Merkle proofs verifying each swap was in the committed batch\n     * \n     * This function:\n     * 1. Verifies the mandatory waiting period has passed\n     * 2. For each swap, verifies its inclusion in the original commitment using Merkle proofs\n     * 3. Executes valid swaps and tracks success/failure\n     * 4. Updates the last batch timestamp for the emergency timeout mechanism\n     * \n     * The commit-reveal delay prevents the sequencer from inserting advantageous trades\n     * after seeing market movements.\n     */\n    function batchSwap(\n        uint256 batchId,\n        address[] calldata users,\n        bool[] calldata ethToTokenFlags,\n        uint256[] calldata amountsIn,\n        uint256[] calldata minAmountsOut,\n        bytes32[][] calldata proofs\n    ) external onlySequencer nonReentrant {\n        require(block.timestamp >= batchSubmissionTimes[batchId] + commitRevealDelay, \n                \"Must wait after commit\");\n        require(batchIntentRoots[batchId] != bytes32(0), \"Batch not committed\");\n        require(users.length == ethToTokenFlags.length &&\n                users.length == amountsIn.length &&\n                users.length == minAmountsOut.length &&\n                users.length == proofs.length,\n                \"Array length mismatch\");\n        \n        // Verify merkle proofs and execute swaps\n        BatchResult storage result = batchResults[batchId];\n        \n        for (uint i = 0; i < users.length; i++) {\n            // Create swap intent hash\n            SwapIntent memory intent = SwapIntent({\n                user: users[i],\n                ethToToken: ethToTokenFlags[i],\n                amountIn: amountsIn[i],\n                minAmountOut: minAmountsOut[i],\n                timestamp: 0 // Not needed for hash verification\n            });\n            \n            bytes32 leaf = keccak256(abi.encode(intent));\n            \n            // Verify merkle proof\n            bool isValidProof = MerkleProof.verify(\n                proofs[i],\n                batchIntentRoots[batchId],\n                leaf\n            );\n            \n            if (!isValidProof) {\n                result.successfulSwaps[i] = false;\n                result.failureReasons[i] = \"Invalid proof\";\n                continue;\n            }\n            \n            try this.executeSwap(users[i], ethToTokenFlags[i], amountsIn[i], minAmountsOut[i]) returns (uint256) {\n                result.successfulSwaps[i] = true;\n                result.successCount++;\n            } catch Error(string memory reason) {\n                result.successfulSwaps[i] = false;\n                result.failureReasons[i] = reason;\n            }\n        }\n        \n        // Update last batch timestamp\n        lastBatchTimestamp = block.timestamp;\n        \n        emit BatchSwapExecuted(batchId, users.length, result.successCount);\n    }\n\n    /**\n     * @dev Internal function to execute a single swap (called by batchSwap)\n     * @param user Address of the user performing the swap\n     * @param ethToToken Direction of the swap (true = ETH to token, false = token to ETH)\n     * @param amountIn Amount of input asset to swap\n     * @param minAmountOut Minimum acceptable output amount (slippage protection)\n     * @return amountOut The amount of output asset received\n     * \n     * This function:\n     * 1. Checks the user has sufficient balance\n     * 2. Calculates the output amount using the constant product formula (x*y=k)\n     * 3. Applies the swap fee\n     * 4. Checks against the minimum output amount (slippage protection)\n     * 5. Updates user balances and pool reserves\n     * \n     * It can only be called by the contract itself as part of batch execution.\n     */\n    function executeSwap(\n        address user,\n        bool ethToToken,\n        uint256 amountIn, \n        uint256 minAmountOut\n    ) external returns (uint256 amountOut) {\n        require(msg.sender == address(this), \"Only callable internally\");\n        \n        if (ethToToken) {\n            require(ethBalances[user] >= amountIn, \"Insufficient ETH balance\");\n            \n            // Calculate amount out using constant product formula\n            uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - feeRate);\n            amountOut = (tokenReserve * amountInWithFee) / \n                        (ethReserve * FEE_DENOMINATOR + amountInWithFee);\n            \n            require(amountOut >= minAmountOut, \"Slippage too high\");\n            \n            // Update user balances\n            ethBalances[user] -= amountIn;\n            tokenBalances[user] += amountOut;\n            \n            // Update reserves\n            ethReserve += amountIn;\n            tokenReserve -= amountOut;\n        } else {\n            require(tokenBalances[user] >= amountIn, \"Insufficient token balance\");\n            \n            // Calculate amount out using constant product formula\n            uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - feeRate);\n            amountOut = (ethReserve * amountInWithFee) / \n                        (tokenReserve * FEE_DENOMINATOR + amountInWithFee);\n            \n            require(amountOut >= minAmountOut, \"Slippage too high\");\n            \n            // Update user balances\n            tokenBalances[user] -= amountIn;\n            ethBalances[user] += amountOut;\n            \n            // Update reserves\n            tokenReserve += amountIn;\n            ethReserve -= amountOut;\n        }\n        \n        return amountOut;\n    }\n\n    /**\n     * @dev Allows users to verify their swap was included in a particular batch\n     * @param batchId The batch ID to check\n     * @param user The user address of the swap\n     * @param ethToToken The direction of the swap\n     * @param amountIn The input amount\n     * @param minAmountOut The minimum output amount\n     * @param proof The Merkle proof to verify\n     * @return bool Whether the swap was included in the batch\n     * \n     * This function enables users to independently verify that their swap\n     * was correctly included in a batch by the sequencer.\n     */\n    function verifySwapInclusion(\n        uint256 batchId,\n        address user,\n        bool ethToToken,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        bytes32[] calldata proof\n    ) external view returns (bool) {\n        SwapIntent memory intent = SwapIntent({\n            user: user,\n            ethToToken: ethToToken,\n            amountIn: amountIn,\n            minAmountOut: minAmountOut,\n            timestamp: 0 // Not needed for hash verification\n        });\n        \n        bytes32 leaf = keccak256(abi.encode(intent));\n        \n        return MerkleProof.verify(\n            proof,\n            batchIntentRoots[batchId],\n            leaf\n        );\n    }\n    \n    /**\n     * @dev Retrieves the result of a specific swap in a batch\n     * @param batchId The batch ID to query\n     * @param swapIndex The index of the swap in the batch\n     * @return success Whether the swap was successful\n     * @return failureReason If unsuccessful, the reason for failure\n     * \n     * This function allows users to check if their swap was executed\n     * successfully and why it might have failed.\n     */\n    function getSwapResult(uint256 batchId, uint256 swapIndex) external view \n        returns (bool success, string memory failureReason) {\n        BatchResult storage result = batchResults[batchId];\n        return (result.successfulSwaps[swapIndex], result.failureReasons[swapIndex]);\n    }\n    \n    /**\n     * @dev Fallback swap mechanism for when sequencer mode is disabled\n     * @param ethToToken Direction of the swap\n     * @param amountIn Amount of input asset to swap\n     * @param minAmountOut Minimum acceptable output amount\n     * @return amountOut The amount of output asset received\n     * \n     * This function allows direct swaps when:\n     * 1. The sequencer is intentionally disabled by the owner\n     * 2. The emergency timeout has triggered due to sequencer inactivity\n     * \n     * It uses the same swap logic as batch swaps but can be called directly by users.\n     * Protected against reentrancy attacks.\n     */\n    function fallbackSwap(\n        bool ethToToken,\n        uint256 amountIn,\n        uint256 minAmountOut\n    ) external nonReentrant returns (uint256 amountOut) {\n        require(!sequencerOnly, \"Direct swaps not allowed\");\n        \n        if (ethToToken) {\n            require(ethBalances[msg.sender] >= amountIn, \"Insufficient ETH balance\");\n            \n            // Calculate amount out using constant product formula\n            uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - feeRate);\n            amountOut = (tokenReserve * amountInWithFee) / \n                        (ethReserve * FEE_DENOMINATOR + amountInWithFee);\n            \n            require(amountOut >= minAmountOut, \"Slippage too high\");\n            \n            // Update user balances\n            ethBalances[msg.sender] -= amountIn;\n            tokenBalances[msg.sender] += amountOut;\n            \n            // Update reserves\n            ethReserve += amountIn;\n            tokenReserve -= amountOut;\n        } else {\n            require(tokenBalances[msg.sender] >= amountIn, \"Insufficient token balance\");\n            \n            // Calculate amount out using constant product formula\n            uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - feeRate);\n            amountOut = (ethReserve * amountInWithFee) / \n                        (tokenReserve * FEE_DENOMINATOR + amountInWithFee);\n            \n            require(amountOut >= minAmountOut, \"Slippage too high\");\n            \n            // Update user balances\n            tokenBalances[msg.sender] -= amountIn;\n            ethBalances[msg.sender] += amountOut;\n            \n            // Update reserves\n            tokenReserve += amountIn;\n            ethReserve -= amountOut;\n        }\n        \n        emit FallbackSwap(msg.sender, amountIn, amountOut, ethToToken);\n        return amountOut;\n    }\n    \n    /**\n     * @dev Calculates the expected output amount for a given input\n     * @param ethToToken Direction of the swap\n     * @param amountIn Amount of input asset\n     * @return The expected output amount (before slippage)\n     * \n     * This view function allows users to get a price quote without executing a swap.\n     * It uses the same constant product formula and fee structure as actual swaps.\n     */\n    function getAmountOut(bool ethToToken, uint256 amountIn) external view returns (uint256) {\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - feeRate);\n        \n        if (ethToToken) {\n            return (tokenReserve * amountInWithFee) / \n                   (ethReserve * FEE_DENOMINATOR + amountInWithFee);\n        } else {\n            return (ethReserve * amountInWithFee) / \n                   (tokenReserve * FEE_DENOMINATOR + amountInWithFee);\n        }\n    }\n    \n    /**\n     * @dev Sets the sequencer address\n     * @param newSequencer Address of the new sequencer\n     * \n     * Only callable by the contract owner.\n     */\n    function setSequencer(address newSequencer) external onlyOwner {\n        emit SequencerChanged(sequencer, newSequencer);\n        sequencer = newSequencer;\n    }\n    \n    /**\n     * @dev Enables or disables sequencer-only mode\n     * @param _sequencerOnly Whether to allow only the sequencer to execute swaps\n     * \n     * When true, only batch swaps through the sequencer are allowed.\n     * When false, direct swaps through fallbackSwap are also permitted.\n     * Only callable by the contract owner.\n     */\n    function setSequencerOnly(bool _sequencerOnly) external onlyOwner {\n        sequencerOnly = _sequencerOnly;\n        emit SequencerModeChanged(_sequencerOnly);\n    }\n    \n    /**\n     * @dev Sets the fee rate for swaps\n     * @param _feeRate New fee rate (in parts per 1000)\n     * \n     * For example, a value of 3 equals a 0.3% fee.\n     * Only callable by the contract owner.\n     */\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\n        require(_feeRate <= 50, \"Fee too high\"); // Max 5%\n        feeRate = _feeRate;\n    }\n    \n    /**\n     * @dev Sets the delay between commit and reveal phases\n     * @param _delay New delay in seconds\n     * \n     * Only callable by the contract owner.\n     */\n    function setCommitRevealDelay(uint256 _delay) external onlyOwner {\n        require(_delay <= 1 hours, \"Delay too long\");\n        commitRevealDelay = _delay;\n    }\n    \n    /**\n     * @dev Emergency function to disable sequencer-only mode if the sequencer is inactive\n     * \n     * This can be called by anyone if the sequencer hasn't submitted a batch\n     * for longer than maxBatchDelay. It automatically enables fallback mode,\n     * allowing users to execute swaps directly.\n     * \n     * This prevents funds from being trapped if the sequencer becomes unavailable.\n     */\n    function emergencyDisableSequencer() external {\n        require(\n            block.timestamp > lastBatchTimestamp + maxBatchDelay,\n            \"Sequencer not considered inactive yet\"\n        );\n        sequencerOnly = false;\n        emit SequencerModeChanged(false);\n    }\n}"},"contracts/YourAMM.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\ncontract YourAMM {\n  // deposit function\n  function depositETH() external payable {}\n\n  // withdraw function\n  function withdrawETH(uint256 amount) external {\n    require(address(this).balance >= amount, \"Insufficient balance\");\n    payable(msg.sender).transfer(amount);\n  }\n}\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[255],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":256,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":255,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,255],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[225]},"id":226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"132:71:1","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":225,"linearizedBaseContracts":[225],"name":"IERC20","nameLocation":"214:6:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"227:158:1","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":159,"name":"Transfer","nameLocation":"396:8:1","nodeType":"EventDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:1","nodeType":"VariableDeclaration","scope":159,"src":"405:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:1","nodeType":"VariableDeclaration","scope":159,"src":"427:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":157,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:1","nodeType":"VariableDeclaration","scope":159,"src":"447:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:1"},"src":"390:72:1"},{"anonymous":false,"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"468:148:1","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":168,"name":"Approval","nameLocation":"627:8:1","nodeType":"EventDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:1","nodeType":"VariableDeclaration","scope":168,"src":"636:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":164,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:1","nodeType":"VariableDeclaration","scope":168,"src":"659:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:1","nodeType":"VariableDeclaration","scope":168,"src":"684:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:1"},"src":"621:78:1"},{"documentation":{"id":169,"nodeType":"StructuredDocumentation","src":"705:65:1","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":174,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:1","nodeType":"FunctionDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"795:2:1"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":174,"src":"821:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:1"},"scope":225,"src":"775:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"836:71:1","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":182,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:1","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"account","nameLocation":"939:7:1","nodeType":"VariableDeclaration","scope":182,"src":"931:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":182,"src":"971:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:1"},"scope":225,"src":"912:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"986:213:1","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":192,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:1","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"to","nameLocation":"1230:2:1","nodeType":"VariableDeclaration","scope":192,"src":"1222:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"value","nameLocation":"1242:5:1","nodeType":"VariableDeclaration","scope":192,"src":"1234:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:1"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":192,"src":"1267:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":189,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:1"},"scope":225,"src":"1204:69:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"1279:264:1","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":202,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:1","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"owner","nameLocation":"1575:5:1","nodeType":"VariableDeclaration","scope":202,"src":"1567:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"spender","nameLocation":"1590:7:1","nodeType":"VariableDeclaration","scope":202,"src":"1582:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:1"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":202,"src":"1622:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:1"},"scope":225,"src":"1548:83:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"1637:667:1","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":212,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:1","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"spender","nameLocation":"2334:7:1","nodeType":"VariableDeclaration","scope":212,"src":"2326:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"value","nameLocation":"2351:5:1","nodeType":"VariableDeclaration","scope":212,"src":"2343:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:1"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":212,"src":"2376:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:1"},"scope":225,"src":"2309:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"2388:297:1","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"from","nameLocation":"2720:4:1","nodeType":"VariableDeclaration","scope":224,"src":"2712:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"to","nameLocation":"2734:2:1","nodeType":"VariableDeclaration","scope":224,"src":"2726:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"value","nameLocation":"2746:5:1","nodeType":"VariableDeclaration","scope":224,"src":"2738:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"2771:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":221,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:1"},"scope":225,"src":"2690:87:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":226,"src":"204:2575:1","usedErrors":[],"usedEvents":[159,168]}],"src":"106:2674:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[255]},"id":256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":227,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"127:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":255,"linearizedBaseContracts":[255],"name":"Context","nameLocation":"642:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":236,"nodeType":"Block","src":"718:34:2","statements":[{"expression":{"expression":{"id":233,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:2","memberName":"sender","nodeType":"MemberAccess","src":"735:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":232,"id":235,"nodeType":"Return","src":"728:17:2"}]},"id":237,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:2","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"675:2:2"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":237,"src":"709:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:2"},"scope":255,"src":"656:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":245,"nodeType":"Block","src":"825:32:2","statements":[{"expression":{"expression":{"id":242,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:2","memberName":"data","nodeType":"MemberAccess","src":"842:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":241,"id":244,"nodeType":"Return","src":"835:15:2"}]},"id":246,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:2","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[],"src":"775:2:2"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"809:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:2"},"scope":255,"src":"758:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":253,"nodeType":"Block","src":"935:25:2","statements":[{"expression":{"hexValue":"30","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":250,"id":252,"nodeType":"Return","src":"945:8:2"}]},"id":254,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:2","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"892:2:2"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":254,"src":"926:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:2"},"scope":255,"src":"863:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":256,"src":"624:338:2","usedErrors":[],"usedEvents":[]}],"src":"101:862:2"},"id":2},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[324]},"id":325,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":257,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:3"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":258,"nodeType":"StructuredDocumentation","src":"135:894:3","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":324,"linearizedBaseContracts":[324],"name":"ReentrancyGuard","nameLocation":"1048:15:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":261,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:3","nodeType":"VariableDeclaration","scope":324,"src":"1818:40:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":264,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:3","nodeType":"VariableDeclaration","scope":324,"src":"1864:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":266,"mutability":"mutable","name":"_status","nameLocation":"1923:7:3","nodeType":"VariableDeclaration","scope":324,"src":"1907:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"1937:52:3","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":269,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:3","nodeType":"ErrorDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[],"src":"2028:2:3"},"src":"1994:37:3"},{"body":{"id":276,"nodeType":"Block","src":"2051:38:3","statements":[{"expression":{"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":272,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"2061:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":273,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"2071:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":275,"nodeType":"ExpressionStatement","src":"2061:21:3"}]},"id":277,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2048:2:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[],"src":"2051:0:3"},"scope":324,"src":"2037:52:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":287,"nodeType":"Block","src":"2490:79:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":280,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"2500:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":282,"nodeType":"ExpressionStatement","src":"2500:21:3"},{"id":283,"nodeType":"PlaceholderStatement","src":"2531:1:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":284,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2542:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":286,"nodeType":"ExpressionStatement","src":"2542:20:3"}]},"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"2095:366:3","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":288,"name":"nonReentrant","nameLocation":"2475:12:3","nodeType":"ModifierDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"2487:2:3"},"src":"2466:103:3","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"2614:268:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":291,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"2702:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":292,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"2713:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":298,"nodeType":"IfStatement","src":"2698:86:3","trueBody":{"id":297,"nodeType":"Block","src":"2722:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":294,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"2743:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":296,"nodeType":"RevertStatement","src":"2736:37:3"}]}},{"expression":{"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":299,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"2858:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":300,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"2868:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":302,"nodeType":"ExpressionStatement","src":"2858:17:3"}]},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:3","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[],"src":"2603:2:3"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"2614:0:3"},"scope":324,"src":"2575:307:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":311,"nodeType":"Block","src":"2926:170:3","statements":[{"expression":{"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":307,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3068:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":308,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"3078:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":310,"nodeType":"ExpressionStatement","src":"3068:21:3"}]},"id":312,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:3","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"2915:2:3"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[],"src":"2926:0:3"},"scope":324,"src":"2888:208:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":322,"nodeType":"Block","src":"3339:42:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3356:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":319,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3367:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":317,"id":321,"nodeType":"Return","src":"3349:25:3"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"3102:168:3","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":323,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:3","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"3307:2:3"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"3333:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":315,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:3"},"scope":324,"src":"3275:106:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":325,"src":"1030:2353:3","usedErrors":[269],"usedEvents":[]}],"src":"109:3275:3"},"id":3},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[364]},"id":365,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":326,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"139:81:4","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":364,"linearizedBaseContracts":[364],"name":"Hashes","nameLocation":"229:6:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":350,"nodeType":"Block","src":"588:83:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"605:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":338,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"609:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":345,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"659:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":346,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"662:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":344,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"640:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:59:4","trueExpression":{"arguments":[{"id":341,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"632:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":342,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"635:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":340,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"613:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":336,"id":349,"nodeType":"Return","src":"598:66:4"}]},"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"242:257:4","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:4","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"a","nameLocation":"542:1:4","nodeType":"VariableDeclaration","scope":351,"src":"534:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":332,"mutability":"mutable","name":"b","nameLocation":"553:1:4","nodeType":"VariableDeclaration","scope":351,"src":"545:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:4"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":351,"src":"579:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:4"},"scope":364,"src":"504:167:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":362,"nodeType":"Block","src":"879:151:4","statements":[{"AST":{"nativeSrc":"914:110:4","nodeType":"YulBlock","src":"914:110:4","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"935:4:4","nodeType":"YulLiteral","src":"935:4:4","type":"","value":"0x00"},{"name":"a","nativeSrc":"941:1:4","nodeType":"YulIdentifier","src":"941:1:4"}],"functionName":{"name":"mstore","nativeSrc":"928:6:4","nodeType":"YulIdentifier","src":"928:6:4"},"nativeSrc":"928:15:4","nodeType":"YulFunctionCall","src":"928:15:4"},"nativeSrc":"928:15:4","nodeType":"YulExpressionStatement","src":"928:15:4"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"963:4:4","nodeType":"YulLiteral","src":"963:4:4","type":"","value":"0x20"},{"name":"b","nativeSrc":"969:1:4","nodeType":"YulIdentifier","src":"969:1:4"}],"functionName":{"name":"mstore","nativeSrc":"956:6:4","nodeType":"YulIdentifier","src":"956:6:4"},"nativeSrc":"956:15:4","nodeType":"YulFunctionCall","src":"956:15:4"},"nativeSrc":"956:15:4","nodeType":"YulExpressionStatement","src":"956:15:4"},{"nativeSrc":"984:30:4","nodeType":"YulAssignment","src":"984:30:4","value":{"arguments":[{"kind":"number","nativeSrc":"1003:4:4","nodeType":"YulLiteral","src":"1003:4:4","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1009:4:4","nodeType":"YulLiteral","src":"1009:4:4","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"993:9:4","nodeType":"YulIdentifier","src":"993:9:4"},"nativeSrc":"993:21:4","nodeType":"YulFunctionCall","src":"993:21:4"},"variableNames":[{"name":"value","nativeSrc":"984:5:4","nodeType":"YulIdentifier","src":"984:5:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":354,"isOffset":false,"isSlot":false,"src":"941:1:4","valueSize":1},{"declaration":356,"isOffset":false,"isSlot":false,"src":"969:1:4","valueSize":1},{"declaration":359,"isOffset":false,"isSlot":false,"src":"984:5:4","valueSize":1}],"flags":["memory-safe"],"id":361,"nodeType":"InlineAssembly","src":"889:135:4"}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"677:109:4","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":363,"implemented":true,"kind":"function","modifiers":[],"name":"efficientKeccak256","nameLocation":"800:18:4","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"a","nameLocation":"827:1:4","nodeType":"VariableDeclaration","scope":363,"src":"819:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"b","nameLocation":"838:1:4","nodeType":"VariableDeclaration","scope":363,"src":"830:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:22:4"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"value","nameLocation":"872:5:4","nodeType":"VariableDeclaration","scope":363,"src":"864:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"863:15:4"},"scope":364,"src":"791:239:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":365,"src":"221:811:4","usedErrors":[],"usedEvents":[]}],"src":"113:920:4"},"id":4},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[364],"MerkleProof":[1437]},"id":1438,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":366,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1438,"sourceUnit":365,"src":"232:36:5","symbolAliases":[{"foreign":{"id":367,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"240:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"270:1082:5","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1437,"linearizedBaseContracts":[1437],"name":"MerkleProof","nameLocation":"1361:11:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"1379:60:5","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":372,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:5","nodeType":"ErrorDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[],"src":"1478:2:5"},"src":"1444:37:5"},{"body":{"id":392,"nodeType":"Block","src":"1999:57:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":386,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2029:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":387,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"2036:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":385,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[434,516],"referencedDeclaration":434,"src":"2016:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":389,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2045:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":384,"id":391,"nodeType":"Return","src":"2009:40:5"}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"1487:410:5","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":393,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:5","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"proof","nameLocation":"1935:5:5","nodeType":"VariableDeclaration","scope":393,"src":"1918:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":375,"nodeType":"ArrayTypeName","src":"1918:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"root","nameLocation":"1950:4:5","nodeType":"VariableDeclaration","scope":393,"src":"1942:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:5","nodeType":"VariableDeclaration","scope":393,"src":"1956:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:5"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":393,"src":"1993:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":382,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:5"},"scope":1437,"src":"1902:154:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":433,"nodeType":"Block","src":"2549:216:5","statements":[{"assignments":[405],"declarations":[{"constant":false,"id":405,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:5","nodeType":"VariableDeclaration","scope":433,"src":"2559:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":407,"initialValue":{"id":406,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"2582:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:5"},{"body":{"id":429,"nodeType":"Block","src":"2639:91:5","statements":[{"expression":{"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":419,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2653:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":422,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2696:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":423,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2710:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":425,"indexExpression":{"id":424,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"2716:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":420,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"2668:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$364_$","typeString":"type(library Hashes)"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:5","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":351,"src":"2668:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":428,"nodeType":"ExpressionStatement","src":"2653:66:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"2616:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":413,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2620:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:5","memberName":"length","nodeType":"MemberAccess","src":"2620:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":430,"initializationExpression":{"assignments":[409],"declarations":[{"constant":false,"id":409,"mutability":"mutable","name":"i","nameLocation":"2609:1:5","nodeType":"VariableDeclaration","scope":430,"src":"2601:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":411,"initialValue":{"hexValue":"30","id":410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:5","subExpression":{"id":416,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"2634:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":418,"nodeType":"ExpressionStatement","src":"2634:3:5"},"nodeType":"ForStatement","src":"2596:134:5"},{"expression":{"id":431,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2746:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":403,"id":432,"nodeType":"Return","src":"2739:19:5"}]},"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"2062:390:5","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":434,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:5","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"proof","nameLocation":"2496:5:5","nodeType":"VariableDeclaration","scope":434,"src":"2479:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":396,"nodeType":"ArrayTypeName","src":"2479:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":399,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:5","nodeType":"VariableDeclaration","scope":434,"src":"2503:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:5"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"2540:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:5"},"scope":1437,"src":"2457:308:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":465,"nodeType":"Block","src":"3376:65:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":458,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"3406:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":459,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"3413:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":460,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"3419:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":457,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[434,516],"referencedDeclaration":516,"src":"3393:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":462,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"3430:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":456,"id":464,"nodeType":"Return","src":"3386:48:5"}]},"documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"2771:407:5","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":466,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:5","nodeType":"FunctionDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"proof","nameLocation":"3225:5:5","nodeType":"VariableDeclaration","scope":466,"src":"3208:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":437,"nodeType":"ArrayTypeName","src":"3208:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"root","nameLocation":"3248:4:5","nodeType":"VariableDeclaration","scope":466,"src":"3240:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":442,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:5","nodeType":"VariableDeclaration","scope":466,"src":"3262:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":452,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:5","nodeType":"VariableDeclaration","scope":466,"src":"3284:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":451,"nodeType":"FunctionTypeName","parameterTypes":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"3293:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"3302:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:5"},"returnParameterTypes":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"3325:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:5"},"src":"3284:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:5"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":466,"src":"3370:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":454,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:5"},"scope":1437,"src":"3183:258:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"4019:195:5","statements":[{"assignments":[488],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:5","nodeType":"VariableDeclaration","scope":515,"src":"4029:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":490,"initialValue":{"id":489,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"4052:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:5"},{"body":{"id":511,"nodeType":"Block","src":"4109:70:5","statements":[{"expression":{"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":502,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"4123:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":504,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"4145:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":505,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"4159:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":507,"indexExpression":{"id":506,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4165:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":503,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4138:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":510,"nodeType":"ExpressionStatement","src":"4123:45:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":495,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4086:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":496,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"4090:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:5","memberName":"length","nodeType":"MemberAccess","src":"4090:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"initializationExpression":{"assignments":[492],"declarations":[{"constant":false,"id":492,"mutability":"mutable","name":"i","nameLocation":"4079:1:5","nodeType":"VariableDeclaration","scope":512,"src":"4071:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":494,"initialValue":{"hexValue":"30","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:5","subExpression":{"id":499,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4104:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":501,"nodeType":"ExpressionStatement","src":"4104:3:5"},"nodeType":"ForStatement","src":"4066:113:5"},{"expression":{"id":513,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"4195:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":486,"id":514,"nodeType":"Return","src":"4188:19:5"}]},"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"3447:387:5","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:5","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"proof","nameLocation":"3887:5:5","nodeType":"VariableDeclaration","scope":516,"src":"3870:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":469,"nodeType":"ArrayTypeName","src":"3870:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":472,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:5","nodeType":"VariableDeclaration","scope":516,"src":"3902:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:5","nodeType":"VariableDeclaration","scope":516,"src":"3924:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":481,"nodeType":"FunctionTypeName","parameterTypes":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"3933:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"3942:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:5"},"returnParameterTypes":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"3965:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:5"},"src":"3924:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:5"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":516,"src":"4010:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:5"},"scope":1437,"src":"3839:375:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":536,"nodeType":"Block","src":"4744:65:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":530,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"4782:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":531,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"4789:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":529,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[578,660],"referencedDeclaration":578,"src":"4761:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":533,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"4798:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":528,"id":535,"nodeType":"Return","src":"4754:48:5"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"4220:412:5","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":537,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:5","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"proof","nameLocation":"4680:5:5","nodeType":"VariableDeclaration","scope":537,"src":"4661:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":519,"nodeType":"ArrayTypeName","src":"4661:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"root","nameLocation":"4695:4:5","nodeType":"VariableDeclaration","scope":537,"src":"4687:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:5","nodeType":"VariableDeclaration","scope":537,"src":"4701:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:5"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":537,"src":"4738:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":526,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:5"},"scope":1437,"src":"4637:172:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":577,"nodeType":"Block","src":"5314:216:5","statements":[{"assignments":[549],"declarations":[{"constant":false,"id":549,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:5","nodeType":"VariableDeclaration","scope":577,"src":"5324:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":551,"initialValue":{"id":550,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"5347:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:5"},{"body":{"id":573,"nodeType":"Block","src":"5404:91:5","statements":[{"expression":{"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":563,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"5418:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":566,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"5461:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":567,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"5475:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":569,"indexExpression":{"id":568,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"5481:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":564,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5433:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$364_$","typeString":"type(library Hashes)"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:5","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":351,"src":"5433:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":572,"nodeType":"ExpressionStatement","src":"5418:66:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":556,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"5381:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":557,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"5385:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:5","memberName":"length","nodeType":"MemberAccess","src":"5385:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":574,"initializationExpression":{"assignments":[553],"declarations":[{"constant":false,"id":553,"mutability":"mutable","name":"i","nameLocation":"5374:1:5","nodeType":"VariableDeclaration","scope":574,"src":"5366:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":552,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":555,"initialValue":{"hexValue":"30","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:5","subExpression":{"id":560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"5399:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":562,"nodeType":"ExpressionStatement","src":"5399:3:5"},"nodeType":"ForStatement","src":"5361:134:5"},{"expression":{"id":575,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"5511:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":547,"id":576,"nodeType":"Return","src":"5504:19:5"}]},"documentation":{"id":538,"nodeType":"StructuredDocumentation","src":"4815:392:5","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":578,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:5","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"proof","nameLocation":"5261:5:5","nodeType":"VariableDeclaration","scope":578,"src":"5242:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":540,"nodeType":"ArrayTypeName","src":"5242:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:5","nodeType":"VariableDeclaration","scope":578,"src":"5268:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:5"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":578,"src":"5305:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:5"},"scope":1437,"src":"5212:318:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":609,"nodeType":"Block","src":"6153:73:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":602,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"6191:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":603,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6198:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":604,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"6204:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":601,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[578,660],"referencedDeclaration":660,"src":"6170:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":606,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6215:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":600,"id":608,"nodeType":"Return","src":"6163:56:5"}]},"documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"5536:409:5","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":610,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:5","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"mutability":"mutable","name":"proof","nameLocation":"6002:5:5","nodeType":"VariableDeclaration","scope":610,"src":"5983:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":581,"nodeType":"ArrayTypeName","src":"5983:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"root","nameLocation":"6025:4:5","nodeType":"VariableDeclaration","scope":610,"src":"6017:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:5","nodeType":"VariableDeclaration","scope":610,"src":"6039:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:5","nodeType":"VariableDeclaration","scope":610,"src":"6061:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":595,"nodeType":"FunctionTypeName","parameterTypes":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"6070:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"6079:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:5"},"returnParameterTypes":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"6102:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:5"},"src":"6061:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:5"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":610,"src":"6147:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":598,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:5"},"scope":1437,"src":"5950:276:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":659,"nodeType":"Block","src":"6816:195:5","statements":[{"assignments":[632],"declarations":[{"constant":false,"id":632,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:5","nodeType":"VariableDeclaration","scope":659,"src":"6826:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":634,"initialValue":{"id":633,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"6849:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:5"},{"body":{"id":655,"nodeType":"Block","src":"6906:70:5","statements":[{"expression":{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":646,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6920:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":648,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6942:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":649,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"6956:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":651,"indexExpression":{"id":650,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6962:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":647,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"6935:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":654,"nodeType":"ExpressionStatement","src":"6920:45:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":639,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6883:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":640,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"6887:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:5","memberName":"length","nodeType":"MemberAccess","src":"6887:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":656,"initializationExpression":{"assignments":[636],"declarations":[{"constant":false,"id":636,"mutability":"mutable","name":"i","nameLocation":"6876:1:5","nodeType":"VariableDeclaration","scope":656,"src":"6868:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":638,"initialValue":{"hexValue":"30","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:5","subExpression":{"id":643,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6901:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":645,"nodeType":"ExpressionStatement","src":"6901:3:5"},"nodeType":"ForStatement","src":"6863:113:5"},{"expression":{"id":657,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6992:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":630,"id":658,"nodeType":"Return","src":"6985:19:5"}]},"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"6232:389:5","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":660,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:5","nodeType":"FunctionDefinition","parameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"proof","nameLocation":"6684:5:5","nodeType":"VariableDeclaration","scope":660,"src":"6665:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":612,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":613,"nodeType":"ArrayTypeName","src":"6665:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":616,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:5","nodeType":"VariableDeclaration","scope":660,"src":"6699:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":626,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:5","nodeType":"VariableDeclaration","scope":660,"src":"6721:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":625,"nodeType":"FunctionTypeName","parameterTypes":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"6730:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"6739:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:5"},"returnParameterTypes":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"6762:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:5"},"src":"6721:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:5"},"returnParameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":660,"src":"6807:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:5"},"scope":1437,"src":"6626:385:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":685,"nodeType":"Block","src":"7797:76:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":678,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"7832:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":679,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"7839:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":680,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"7851:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":677,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[844,1048],"referencedDeclaration":844,"src":"7814:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":682,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"7862:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":676,"id":684,"nodeType":"Return","src":"7807:59:5"}]},"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"7017:593:5","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":686,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:5","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"proof","nameLocation":"7667:5:5","nodeType":"VariableDeclaration","scope":686,"src":"7650:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":663,"nodeType":"ArrayTypeName","src":"7650:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:5","nodeType":"VariableDeclaration","scope":686,"src":"7682:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":665,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":666,"nodeType":"ArrayTypeName","src":"7682:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"root","nameLocation":"7724:4:5","nodeType":"VariableDeclaration","scope":686,"src":"7716:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":672,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:5","nodeType":"VariableDeclaration","scope":686,"src":"7738:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":671,"nodeType":"ArrayTypeName","src":"7738:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:5"},"returnParameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":686,"src":"7791:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":674,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:5"},"scope":1437,"src":"7615:258:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":843,"nodeType":"Block","src":"9159:2104:5","statements":[{"assignments":[702],"declarations":[{"constant":false,"id":702,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:5","nodeType":"VariableDeclaration","scope":843,"src":"9543:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":705,"initialValue":{"expression":{"id":703,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"9563:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:5","memberName":"length","nodeType":"MemberAccess","src":"9563:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:5"},{"assignments":[707],"declarations":[{"constant":false,"id":707,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:5","nodeType":"VariableDeclaration","scope":843,"src":"9586:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":710,"initialValue":{"expression":{"id":708,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9610:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:5","memberName":"length","nodeType":"MemberAccess","src":"9610:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":711,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"9675:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":712,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"9687:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:5","memberName":"length","nodeType":"MemberAccess","src":"9687:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":715,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"9703:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":723,"nodeType":"IfStatement","src":"9671:113:5","trueBody":{"id":722,"nodeType":"Block","src":"9722:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":719,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"9743:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":721,"nodeType":"RevertStatement","src":"9736:37:5"}]}},{"assignments":[728],"declarations":[{"constant":false,"id":728,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:5","nodeType":"VariableDeclaration","scope":843,"src":"10028:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":727,"nodeType":"ArrayTypeName","src":"10028:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":734,"initialValue":{"arguments":[{"id":732,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"10068:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":730,"nodeType":"ArrayTypeName","src":"10058:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:5"},{"assignments":[736],"declarations":[{"constant":false,"id":736,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:5","nodeType":"VariableDeclaration","scope":843,"src":"10092:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":735,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":738,"initialValue":{"hexValue":"30","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:5"},{"assignments":[740],"declarations":[{"constant":false,"id":740,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:5","nodeType":"VariableDeclaration","scope":843,"src":"10121:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":742,"initialValue":{"hexValue":"30","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:5"},{"assignments":[744],"declarations":[{"constant":false,"id":744,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:5","nodeType":"VariableDeclaration","scope":843,"src":"10150:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":743,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":746,"initialValue":{"hexValue":"30","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:5"},{"body":{"id":806,"nodeType":"Block","src":"10590:310:5","statements":[{"assignments":[758],"declarations":[{"constant":false,"id":758,"mutability":"mutable","name":"a","nameLocation":"10612:1:5","nodeType":"VariableDeclaration","scope":806,"src":"10604:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":771,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":759,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"10616:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":760,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"10626:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":766,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"10658:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":769,"indexExpression":{"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:5","subExpression":{"id":767,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"10665:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:5","trueExpression":{"baseExpression":{"id":762,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"10638:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":765,"indexExpression":{"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:5","subExpression":{"id":763,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"10645:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:5"},{"assignments":[773],"declarations":[{"constant":false,"id":773,"mutability":"mutable","name":"b","nameLocation":"10697:1:5","nodeType":"VariableDeclaration","scope":806,"src":"10689:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":795,"initialValue":{"condition":{"baseExpression":{"id":774,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"10701:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":776,"indexExpression":{"id":775,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"10712:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":790,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"10813:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":793,"indexExpression":{"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:5","subExpression":{"id":791,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"10819:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:5","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":777,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"10734:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":778,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"10744:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":784,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"10776:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":787,"indexExpression":{"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:5","subExpression":{"id":785,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"10783:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:5","trueExpression":{"baseExpression":{"id":780,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"10756:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":783,"indexExpression":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:5","subExpression":{"id":781,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"10763:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:5"},{"expression":{"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":796,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"10844:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":798,"indexExpression":{"id":797,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"10851:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"10884:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"10887:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":799,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"10856:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$364_$","typeString":"type(library Hashes)"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:5","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":351,"src":"10856:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":805,"nodeType":"ExpressionStatement","src":"10844:45:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"10566:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":752,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"10570:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":807,"initializationExpression":{"assignments":[748],"declarations":[{"constant":false,"id":748,"mutability":"mutable","name":"i","nameLocation":"10559:1:5","nodeType":"VariableDeclaration","scope":807,"src":"10551:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":750,"initialValue":{"hexValue":"30","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:5","subExpression":{"id":754,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"10585:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":756,"nodeType":"ExpressionStatement","src":"10585:3:5"},"nodeType":"ForStatement","src":"10546:354:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":808,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"10914:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":828,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"11155:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":840,"nodeType":"Block","src":"11217:40:5","statements":[{"expression":{"baseExpression":{"id":836,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"11238:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":838,"indexExpression":{"hexValue":"30","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":700,"id":839,"nodeType":"Return","src":"11231:15:5"}]},"id":841,"nodeType":"IfStatement","src":"11151:106:5","trueBody":{"id":835,"nodeType":"Block","src":"11170:41:5","statements":[{"expression":{"baseExpression":{"id":831,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"11191:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":833,"indexExpression":{"hexValue":"30","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":700,"id":834,"nodeType":"Return","src":"11184:16:5"}]}},"id":842,"nodeType":"IfStatement","src":"10910:347:5","trueBody":{"id":827,"nodeType":"Block","src":"10933:212:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":811,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"10951:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":812,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"10963:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:5","memberName":"length","nodeType":"MemberAccess","src":"10963:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":819,"nodeType":"IfStatement","src":"10947:100:5","trueBody":{"id":818,"nodeType":"Block","src":"10977:70:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":815,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"11002:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":817,"nodeType":"RevertStatement","src":"10995:37:5"}]}},{"id":826,"nodeType":"UncheckedBlock","src":"11060:75:5","statements":[{"expression":{"baseExpression":{"id":820,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11095:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":824,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":821,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"11102:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":700,"id":825,"nodeType":"Return","src":"11088:32:5"}]}]}}]},"documentation":{"id":687,"nodeType":"StructuredDocumentation","src":"7879:1100:5","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":844,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:5","nodeType":"FunctionDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"proof","nameLocation":"9037:5:5","nodeType":"VariableDeclaration","scope":844,"src":"9020:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":689,"nodeType":"ArrayTypeName","src":"9020:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":693,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:5","nodeType":"VariableDeclaration","scope":844,"src":"9052:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":691,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":692,"nodeType":"ArrayTypeName","src":"9052:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":696,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:5","nodeType":"VariableDeclaration","scope":844,"src":"9086:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":695,"nodeType":"ArrayTypeName","src":"9086:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:5"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:5","nodeType":"VariableDeclaration","scope":844,"src":"9139:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:5"},"scope":1437,"src":"8984:2279:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":880,"nodeType":"Block","src":"12112:84:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":872,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"12147:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":873,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"12154:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":874,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"12166:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":875,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"12174:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":871,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[844,1048],"referencedDeclaration":1048,"src":"12129:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":877,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"12185:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":870,"id":879,"nodeType":"Return","src":"12122:67:5"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"11269:590:5","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":881,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:5","nodeType":"FunctionDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"proof","nameLocation":"11916:5:5","nodeType":"VariableDeclaration","scope":881,"src":"11899:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":847,"nodeType":"ArrayTypeName","src":"11899:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":851,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:5","nodeType":"VariableDeclaration","scope":881,"src":"11931:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":849,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":850,"nodeType":"ArrayTypeName","src":"11931:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"root","nameLocation":"11973:4:5","nodeType":"VariableDeclaration","scope":881,"src":"11965:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:5","nodeType":"VariableDeclaration","scope":881,"src":"11987:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":854,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":855,"nodeType":"ArrayTypeName","src":"11987:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:5","nodeType":"VariableDeclaration","scope":881,"src":"12020:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":865,"nodeType":"FunctionTypeName","parameterTypes":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":865,"src":"12029:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":865,"src":"12038:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:5"},"returnParameterTypes":{"id":864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":865,"src":"12061:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:5"},"src":"12020:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:5"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":881,"src":"12106:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":868,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:5"},"scope":1437,"src":"11864:332:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1047,"nodeType":"Block","src":"13545:2083:5","statements":[{"assignments":[907],"declarations":[{"constant":false,"id":907,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:5","nodeType":"VariableDeclaration","scope":1047,"src":"13929:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":910,"initialValue":{"expression":{"id":908,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"13949:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:5","memberName":"length","nodeType":"MemberAccess","src":"13949:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:5"},{"assignments":[912],"declarations":[{"constant":false,"id":912,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:5","nodeType":"VariableDeclaration","scope":1047,"src":"13972:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":911,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":915,"initialValue":{"expression":{"id":913,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"13996:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:5","memberName":"length","nodeType":"MemberAccess","src":"13996:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":916,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"14061:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":917,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"14073:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:5","memberName":"length","nodeType":"MemberAccess","src":"14073:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":920,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"14089:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":928,"nodeType":"IfStatement","src":"14057:113:5","trueBody":{"id":927,"nodeType":"Block","src":"14108:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":924,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"14129:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":926,"nodeType":"RevertStatement","src":"14122:37:5"}]}},{"assignments":[933],"declarations":[{"constant":false,"id":933,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:5","nodeType":"VariableDeclaration","scope":1047,"src":"14414:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":932,"nodeType":"ArrayTypeName","src":"14414:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":939,"initialValue":{"arguments":[{"id":937,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"14454:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":934,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":935,"nodeType":"ArrayTypeName","src":"14444:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:5"},{"assignments":[941],"declarations":[{"constant":false,"id":941,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:5","nodeType":"VariableDeclaration","scope":1047,"src":"14478:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":940,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":943,"initialValue":{"hexValue":"30","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:5"},{"assignments":[945],"declarations":[{"constant":false,"id":945,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:5","nodeType":"VariableDeclaration","scope":1047,"src":"14507:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":944,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":947,"initialValue":{"hexValue":"30","id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:5"},{"assignments":[949],"declarations":[{"constant":false,"id":949,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:5","nodeType":"VariableDeclaration","scope":1047,"src":"14536:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":951,"initialValue":{"hexValue":"30","id":950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:5"},{"body":{"id":1010,"nodeType":"Block","src":"14976:289:5","statements":[{"assignments":[963],"declarations":[{"constant":false,"id":963,"mutability":"mutable","name":"a","nameLocation":"14998:1:5","nodeType":"VariableDeclaration","scope":1010,"src":"14990:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":962,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":976,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"15002:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":965,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"15012:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":971,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"15044:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":974,"indexExpression":{"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:5","subExpression":{"id":972,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"15051:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:5","trueExpression":{"baseExpression":{"id":967,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"15024:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":970,"indexExpression":{"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:5","subExpression":{"id":968,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"15031:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:5"},{"assignments":[978],"declarations":[{"constant":false,"id":978,"mutability":"mutable","name":"b","nameLocation":"15083:1:5","nodeType":"VariableDeclaration","scope":1010,"src":"15075:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":977,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1000,"initialValue":{"condition":{"baseExpression":{"id":979,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"15087:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":981,"indexExpression":{"id":980,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"15098:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":995,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"15199:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":998,"indexExpression":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:5","subExpression":{"id":996,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"15205:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:5","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":982,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"15120:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":983,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"15130:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":989,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"15162:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":992,"indexExpression":{"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:5","subExpression":{"id":990,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"15169:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:5","trueExpression":{"baseExpression":{"id":985,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"15142:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":988,"indexExpression":{"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:5","subExpression":{"id":986,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"15149:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:5"},{"expression":{"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1001,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"15230:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1003,"indexExpression":{"id":1002,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"15237:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1005,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"15249:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1006,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"15252:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1004,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"15242:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1009,"nodeType":"ExpressionStatement","src":"15230:24:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"14952:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":957,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"14956:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1011,"initializationExpression":{"assignments":[953],"declarations":[{"constant":false,"id":953,"mutability":"mutable","name":"i","nameLocation":"14945:1:5","nodeType":"VariableDeclaration","scope":1011,"src":"14937:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":952,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":955,"initialValue":{"hexValue":"30","id":954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:5","subExpression":{"id":959,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"14971:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":961,"nodeType":"ExpressionStatement","src":"14971:3:5"},"nodeType":"ForStatement","src":"14932:333:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"15279:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1032,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"15520:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1044,"nodeType":"Block","src":"15582:40:5","statements":[{"expression":{"baseExpression":{"id":1040,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"15603:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1042,"indexExpression":{"hexValue":"30","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":905,"id":1043,"nodeType":"Return","src":"15596:15:5"}]},"id":1045,"nodeType":"IfStatement","src":"15516:106:5","trueBody":{"id":1039,"nodeType":"Block","src":"15535:41:5","statements":[{"expression":{"baseExpression":{"id":1035,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"15556:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1037,"indexExpression":{"hexValue":"30","id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":905,"id":1038,"nodeType":"Return","src":"15549:16:5"}]}},"id":1046,"nodeType":"IfStatement","src":"15275:347:5","trueBody":{"id":1031,"nodeType":"Block","src":"15298:212:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1015,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"15316:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1016,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"15328:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:5","memberName":"length","nodeType":"MemberAccess","src":"15328:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1023,"nodeType":"IfStatement","src":"15312:100:5","trueBody":{"id":1022,"nodeType":"Block","src":"15342:70:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1019,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"15367:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1021,"nodeType":"RevertStatement","src":"15360:37:5"}]}},{"id":1030,"nodeType":"UncheckedBlock","src":"15425:75:5","statements":[{"expression":{"baseExpression":{"id":1024,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"15460:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1028,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1025,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"15467:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":905,"id":1029,"nodeType":"Return","src":"15453:32:5"}]}]}}]},"documentation":{"id":882,"nodeType":"StructuredDocumentation","src":"12202:1097:5","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1048,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:5","nodeType":"FunctionDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"proof","nameLocation":"13357:5:5","nodeType":"VariableDeclaration","scope":1048,"src":"13340:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":883,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":884,"nodeType":"ArrayTypeName","src":"13340:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:5","nodeType":"VariableDeclaration","scope":1048,"src":"13372:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":887,"nodeType":"ArrayTypeName","src":"13372:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:5","nodeType":"VariableDeclaration","scope":1048,"src":"13406:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":890,"nodeType":"ArrayTypeName","src":"13406:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:5","nodeType":"VariableDeclaration","scope":1048,"src":"13439:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":900,"nodeType":"FunctionTypeName","parameterTypes":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"13448:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"13457:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:5"},"returnParameterTypes":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"13480:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:5"},"src":"13439:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:5"},"returnParameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:5","nodeType":"VariableDeclaration","scope":1048,"src":"13525:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":903,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:5"},"scope":1437,"src":"13304:2324:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1073,"nodeType":"Block","src":"16436:84:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1066,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"16479:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1067,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"16486:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1068,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"16498:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1065,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1232,1436],"referencedDeclaration":1232,"src":"16453:25:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1070,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"16509:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1064,"id":1072,"nodeType":"Return","src":"16446:67:5"}]},"documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"15634:603:5","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1074,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:5","nodeType":"FunctionDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"mutability":"mutable","name":"proof","nameLocation":"16304:5:5","nodeType":"VariableDeclaration","scope":1074,"src":"16285:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1051,"nodeType":"ArrayTypeName","src":"16285:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:5","nodeType":"VariableDeclaration","scope":1074,"src":"16319:26:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1053,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1054,"nodeType":"ArrayTypeName","src":"16319:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"root","nameLocation":"16363:4:5","nodeType":"VariableDeclaration","scope":1074,"src":"16355:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:5","nodeType":"VariableDeclaration","scope":1074,"src":"16377:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1058,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1059,"nodeType":"ArrayTypeName","src":"16377:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:5"},"returnParameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1074,"src":"16430:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1062,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:5"},"scope":1437,"src":"16242:278:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"17820:2104:5","statements":[{"assignments":[1090],"declarations":[{"constant":false,"id":1090,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:5","nodeType":"VariableDeclaration","scope":1231,"src":"18204:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1093,"initialValue":{"expression":{"id":1091,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"18224:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:5","memberName":"length","nodeType":"MemberAccess","src":"18224:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:5"},{"assignments":[1095],"declarations":[{"constant":false,"id":1095,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:5","nodeType":"VariableDeclaration","scope":1231,"src":"18247:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1094,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1098,"initialValue":{"expression":{"id":1096,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"18271:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:5","memberName":"length","nodeType":"MemberAccess","src":"18271:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"18336:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1100,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"18348:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:5","memberName":"length","nodeType":"MemberAccess","src":"18348:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1103,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"18364:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1111,"nodeType":"IfStatement","src":"18332:113:5","trueBody":{"id":1110,"nodeType":"Block","src":"18383:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1107,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"18404:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1109,"nodeType":"RevertStatement","src":"18397:37:5"}]}},{"assignments":[1116],"declarations":[{"constant":false,"id":1116,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:5","nodeType":"VariableDeclaration","scope":1231,"src":"18689:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1115,"nodeType":"ArrayTypeName","src":"18689:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1122,"initialValue":{"arguments":[{"id":1120,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"18729:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1118,"nodeType":"ArrayTypeName","src":"18719:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:5"},{"assignments":[1124],"declarations":[{"constant":false,"id":1124,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:5","nodeType":"VariableDeclaration","scope":1231,"src":"18753:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1126,"initialValue":{"hexValue":"30","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:5"},{"assignments":[1128],"declarations":[{"constant":false,"id":1128,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:5","nodeType":"VariableDeclaration","scope":1231,"src":"18782:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1127,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1130,"initialValue":{"hexValue":"30","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:5"},{"assignments":[1132],"declarations":[{"constant":false,"id":1132,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:5","nodeType":"VariableDeclaration","scope":1231,"src":"18811:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1134,"initialValue":{"hexValue":"30","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:5"},{"body":{"id":1194,"nodeType":"Block","src":"19251:310:5","statements":[{"assignments":[1146],"declarations":[{"constant":false,"id":1146,"mutability":"mutable","name":"a","nameLocation":"19273:1:5","nodeType":"VariableDeclaration","scope":1194,"src":"19265:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1159,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1147,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"19277:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1148,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"19287:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1154,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"19319:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1157,"indexExpression":{"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:5","subExpression":{"id":1155,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"19326:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:5","trueExpression":{"baseExpression":{"id":1150,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"19299:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1153,"indexExpression":{"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:5","subExpression":{"id":1151,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"19306:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:5"},{"assignments":[1161],"declarations":[{"constant":false,"id":1161,"mutability":"mutable","name":"b","nameLocation":"19358:1:5","nodeType":"VariableDeclaration","scope":1194,"src":"19350:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1183,"initialValue":{"condition":{"baseExpression":{"id":1162,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"19362:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1164,"indexExpression":{"id":1163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"19373:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1178,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"19474:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1181,"indexExpression":{"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:5","subExpression":{"id":1179,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"19480:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:5","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"19395:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1166,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"19405:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1172,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"19437:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1175,"indexExpression":{"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:5","subExpression":{"id":1173,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"19444:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:5","trueExpression":{"baseExpression":{"id":1168,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"19417:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1171,"indexExpression":{"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:5","subExpression":{"id":1169,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"19424:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:5"},{"expression":{"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1184,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"19505:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1186,"indexExpression":{"id":1185,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"19512:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1189,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"19545:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"19548:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1187,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"19517:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$364_$","typeString":"type(library Hashes)"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:5","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":351,"src":"19517:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1193,"nodeType":"ExpressionStatement","src":"19505:45:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1139,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"19227:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1140,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"19231:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"initializationExpression":{"assignments":[1136],"declarations":[{"constant":false,"id":1136,"mutability":"mutable","name":"i","nameLocation":"19220:1:5","nodeType":"VariableDeclaration","scope":1195,"src":"19212:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1138,"initialValue":{"hexValue":"30","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:5","subExpression":{"id":1142,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"19246:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1144,"nodeType":"ExpressionStatement","src":"19246:3:5"},"nodeType":"ForStatement","src":"19207:354:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1196,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"19575:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1216,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"19816:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1228,"nodeType":"Block","src":"19878:40:5","statements":[{"expression":{"baseExpression":{"id":1224,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"19899:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1226,"indexExpression":{"hexValue":"30","id":1225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1088,"id":1227,"nodeType":"Return","src":"19892:15:5"}]},"id":1229,"nodeType":"IfStatement","src":"19812:106:5","trueBody":{"id":1223,"nodeType":"Block","src":"19831:41:5","statements":[{"expression":{"baseExpression":{"id":1219,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"19852:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1221,"indexExpression":{"hexValue":"30","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1088,"id":1222,"nodeType":"Return","src":"19845:16:5"}]}},"id":1230,"nodeType":"IfStatement","src":"19571:347:5","trueBody":{"id":1215,"nodeType":"Block","src":"19594:212:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1199,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"19612:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1200,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"19624:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:5","memberName":"length","nodeType":"MemberAccess","src":"19624:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1207,"nodeType":"IfStatement","src":"19608:100:5","trueBody":{"id":1206,"nodeType":"Block","src":"19638:70:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1203,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"19663:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1205,"nodeType":"RevertStatement","src":"19656:37:5"}]}},{"id":1214,"nodeType":"UncheckedBlock","src":"19721:75:5","statements":[{"expression":{"baseExpression":{"id":1208,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"19756:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1212,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1209,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"19763:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1088,"id":1213,"nodeType":"Return","src":"19749:32:5"}]}]}}]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"16526:1102:5","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:5","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"proof","nameLocation":"17696:5:5","nodeType":"VariableDeclaration","scope":1232,"src":"17677:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1076,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1077,"nodeType":"ArrayTypeName","src":"17677:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1081,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:5","nodeType":"VariableDeclaration","scope":1232,"src":"17711:26:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1079,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1080,"nodeType":"ArrayTypeName","src":"17711:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:5","nodeType":"VariableDeclaration","scope":1232,"src":"17747:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1082,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1083,"nodeType":"ArrayTypeName","src":"17747:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:5"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:5","nodeType":"VariableDeclaration","scope":1232,"src":"17800:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:5"},"scope":1437,"src":"17633:2291:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1268,"nodeType":"Block","src":"20795:92:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1260,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"20838:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1261,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"20845:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1262,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"20857:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1263,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"20865:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1259,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1232,1436],"referencedDeclaration":1436,"src":"20812:25:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1265,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"20876:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1258,"id":1267,"nodeType":"Return","src":"20805:75:5"}]},"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"19930:600:5","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1269,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:5","nodeType":"FunctionDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"proof","nameLocation":"20597:5:5","nodeType":"VariableDeclaration","scope":1269,"src":"20578:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1235,"nodeType":"ArrayTypeName","src":"20578:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:5","nodeType":"VariableDeclaration","scope":1269,"src":"20612:26:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1237,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1238,"nodeType":"ArrayTypeName","src":"20612:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"root","nameLocation":"20656:4:5","nodeType":"VariableDeclaration","scope":1269,"src":"20648:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:5","nodeType":"VariableDeclaration","scope":1269,"src":"20670:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1243,"nodeType":"ArrayTypeName","src":"20670:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:5","nodeType":"VariableDeclaration","scope":1269,"src":"20703:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1253,"nodeType":"FunctionTypeName","parameterTypes":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1253,"src":"20712:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1253,"src":"20721:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:5"},"returnParameterTypes":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1253,"src":"20744:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:5"},"src":"20703:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:5"},"returnParameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1269,"src":"20789:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1256,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:5"},"scope":1437,"src":"20535:352:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1435,"nodeType":"Block","src":"22250:2083:5","statements":[{"assignments":[1295],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:5","nodeType":"VariableDeclaration","scope":1435,"src":"22634:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1298,"initialValue":{"expression":{"id":1296,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"22654:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:5","memberName":"length","nodeType":"MemberAccess","src":"22654:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:5"},{"assignments":[1300],"declarations":[{"constant":false,"id":1300,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:5","nodeType":"VariableDeclaration","scope":1435,"src":"22677:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1303,"initialValue":{"expression":{"id":1301,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"22701:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:5","memberName":"length","nodeType":"MemberAccess","src":"22701:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1304,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"22766:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1305,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"22778:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:5","memberName":"length","nodeType":"MemberAccess","src":"22778:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"22794:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1316,"nodeType":"IfStatement","src":"22762:113:5","trueBody":{"id":1315,"nodeType":"Block","src":"22813:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1312,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"22834:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1314,"nodeType":"RevertStatement","src":"22827:37:5"}]}},{"assignments":[1321],"declarations":[{"constant":false,"id":1321,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:5","nodeType":"VariableDeclaration","scope":1435,"src":"23119:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1320,"nodeType":"ArrayTypeName","src":"23119:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1327,"initialValue":{"arguments":[{"id":1325,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"23159:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1323,"nodeType":"ArrayTypeName","src":"23149:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:5"},{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:5","nodeType":"VariableDeclaration","scope":1435,"src":"23183:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1331,"initialValue":{"hexValue":"30","id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:5"},{"assignments":[1333],"declarations":[{"constant":false,"id":1333,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:5","nodeType":"VariableDeclaration","scope":1435,"src":"23212:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1335,"initialValue":{"hexValue":"30","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:5"},{"assignments":[1337],"declarations":[{"constant":false,"id":1337,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:5","nodeType":"VariableDeclaration","scope":1435,"src":"23241:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1336,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1339,"initialValue":{"hexValue":"30","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:5"},{"body":{"id":1398,"nodeType":"Block","src":"23681:289:5","statements":[{"assignments":[1351],"declarations":[{"constant":false,"id":1351,"mutability":"mutable","name":"a","nameLocation":"23703:1:5","nodeType":"VariableDeclaration","scope":1398,"src":"23695:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1364,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1352,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"23707:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1353,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"23717:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1359,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"23749:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1362,"indexExpression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:5","subExpression":{"id":1360,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"23756:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:5","trueExpression":{"baseExpression":{"id":1355,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"23729:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1358,"indexExpression":{"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:5","subExpression":{"id":1356,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"23736:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:5"},{"assignments":[1366],"declarations":[{"constant":false,"id":1366,"mutability":"mutable","name":"b","nameLocation":"23788:1:5","nodeType":"VariableDeclaration","scope":1398,"src":"23780:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1388,"initialValue":{"condition":{"baseExpression":{"id":1367,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"23792:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1369,"indexExpression":{"id":1368,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"23803:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1383,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"23904:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1386,"indexExpression":{"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:5","subExpression":{"id":1384,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"23910:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:5","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1370,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"23825:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1371,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"23835:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1377,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"23867:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1380,"indexExpression":{"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:5","subExpression":{"id":1378,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"23874:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:5","trueExpression":{"baseExpression":{"id":1373,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"23847:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1376,"indexExpression":{"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:5","subExpression":{"id":1374,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"23854:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1382,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:5"},{"expression":{"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1389,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"23935:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1391,"indexExpression":{"id":1390,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"23942:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1393,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"23954:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1394,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"23957:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1392,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"23947:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1397,"nodeType":"ExpressionStatement","src":"23935:24:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"23657:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1345,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"23661:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1399,"initializationExpression":{"assignments":[1341],"declarations":[{"constant":false,"id":1341,"mutability":"mutable","name":"i","nameLocation":"23650:1:5","nodeType":"VariableDeclaration","scope":1399,"src":"23642:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1343,"initialValue":{"hexValue":"30","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:5"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:5","subExpression":{"id":1347,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"23676:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1349,"nodeType":"ExpressionStatement","src":"23676:3:5"},"nodeType":"ForStatement","src":"23637:333:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1400,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"23984:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1420,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"24225:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1432,"nodeType":"Block","src":"24287:40:5","statements":[{"expression":{"baseExpression":{"id":1428,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"24308:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1430,"indexExpression":{"hexValue":"30","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1293,"id":1431,"nodeType":"Return","src":"24301:15:5"}]},"id":1433,"nodeType":"IfStatement","src":"24221:106:5","trueBody":{"id":1427,"nodeType":"Block","src":"24240:41:5","statements":[{"expression":{"baseExpression":{"id":1423,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"24261:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1425,"indexExpression":{"hexValue":"30","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1293,"id":1426,"nodeType":"Return","src":"24254:16:5"}]}},"id":1434,"nodeType":"IfStatement","src":"23980:347:5","trueBody":{"id":1419,"nodeType":"Block","src":"24003:212:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1403,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"24021:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1404,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"24033:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:5","memberName":"length","nodeType":"MemberAccess","src":"24033:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1411,"nodeType":"IfStatement","src":"24017:100:5","trueBody":{"id":1410,"nodeType":"Block","src":"24047:70:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1407,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"24072:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1409,"nodeType":"RevertStatement","src":"24065:37:5"}]}},{"id":1418,"nodeType":"UncheckedBlock","src":"24130:75:5","statements":[{"expression":{"baseExpression":{"id":1412,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"24165:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1416,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"24172:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1293,"id":1417,"nodeType":"Return","src":"24158:32:5"}]}]}}]},"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"20893:1099:5","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1436,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:5","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"proof","nameLocation":"22060:5:5","nodeType":"VariableDeclaration","scope":1436,"src":"22041:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1272,"nodeType":"ArrayTypeName","src":"22041:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:5","nodeType":"VariableDeclaration","scope":1436,"src":"22075:26:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1274,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1275,"nodeType":"ArrayTypeName","src":"22075:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:5","nodeType":"VariableDeclaration","scope":1436,"src":"22111:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1278,"nodeType":"ArrayTypeName","src":"22111:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:5","nodeType":"VariableDeclaration","scope":1436,"src":"22144:56:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1288,"nodeType":"FunctionTypeName","parameterTypes":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1288,"src":"22153:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1288,"src":"22162:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:5"},"returnParameterTypes":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1288,"src":"22185:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:5"},"src":"22144:56:5","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:5"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:5","nodeType":"VariableDeclaration","scope":1436,"src":"22230:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:5"},"scope":1437,"src":"21997:2336:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1438,"src":"1353:22982:5","usedErrors":[372],"usedEvents":[]}],"src":"206:24130:5"},"id":5},"contracts/SequencedAMM.sol":{"ast":{"absolutePath":"contracts/SequencedAMM.sol","exportedSymbols":{"Context":[255],"Hashes":[364],"IERC20":[225],"MerkleProof":[1437],"Ownable":[147],"ReentrancyGuard":[324],"SequencedAMM":[2804]},"id":2805,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1439,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1440,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2805,"sourceUnit":148,"src":"58:52:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1441,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2805,"sourceUnit":226,"src":"111:56:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2805,"sourceUnit":325,"src":"168:59:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2805,"sourceUnit":1438,"src":"228:68:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1445,"name":"Ownable","nameLocations":["1310:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1310:7:6"},"id":1446,"nodeType":"InheritanceSpecifier","src":"1310:7:6"},{"baseName":{"id":1447,"name":"ReentrancyGuard","nameLocations":["1319:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"1319:15:6"},"id":1448,"nodeType":"InheritanceSpecifier","src":"1319:15:6"}],"canonicalName":"SequencedAMM","contractDependencies":[],"contractKind":"contract","documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"298:986:6","text":" @title SequencedAMM\n @dev An Automated Market Maker (AMM) with front-running protection via a trusted sequencer\n System Overview:\n This AMM prevents front-running and MEV attacks by removing user transactions from the public mempool.\n Instead of submitting swaps directly to the blockchain, users send swap intents to a trusted sequencer.\n The sequencer batches these intents off-chain and uses a commit-reveal pattern to execute them:\n 1. COMMIT PHASE: Sequencer submits a Merkle root of all swap intents (commitBatchIntents)\n 2. WAITING PERIOD: A mandatory delay prevents last-minute reordering (commitRevealDelay)\n 3. REVEAL & EXECUTE: Sequencer reveals and executes all swaps in the batch (batchSwap)\n 4. FALLBACK: If the sequencer becomes unavailable, users can swap directly (fallbackSwap)\n The contract also manages liquidity pools using the constant product formula (x*y=k) and\n handles user deposits, withdrawals, and balance tracking."},"fullyImplemented":true,"id":2804,"linearizedBaseContracts":[2804,324,147,255],"name":"SequencedAMM","nameLocation":"1294:12:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"5c1bba38","id":1450,"mutability":"mutable","name":"sequencer","nameLocation":"1356:9:6","nodeType":"VariableDeclaration","scope":2804,"src":"1341:24:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1449,"name":"address","nodeType":"ElementaryTypeName","src":"1341:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"17d6263f","id":1453,"mutability":"mutable","name":"sequencerOnly","nameLocation":"1383:13:6","nodeType":"VariableDeclaration","scope":2804,"src":"1371:32:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"1371:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1399:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"constant":false,"functionSelector":"9729cc05","id":1456,"mutability":"mutable","name":"maxBatchDelay","nameLocation":"1424:13:6","nodeType":"VariableDeclaration","scope":2804,"src":"1409:40:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1409:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1440:9:6","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"5"},"visibility":"public"},{"constant":false,"functionSelector":"b7afe9be","id":1458,"mutability":"mutable","name":"lastBatchTimestamp","nameLocation":"1470:18:6","nodeType":"VariableDeclaration","scope":2804,"src":"1455:33:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"3cfba0e3","id":1462,"mutability":"mutable","name":"ethBalances","nameLocation":"1555:11:6","nodeType":"VariableDeclaration","scope":2804,"src":"1520:46:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1461,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"1528:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1520:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"523fba7f","id":1466,"mutability":"mutable","name":"tokenBalances","nameLocation":"1607:13:6","nodeType":"VariableDeclaration","scope":2804,"src":"1572:48:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1465,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1572:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"1591:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"fc0c546a","id":1469,"mutability":"mutable","name":"token","nameLocation":"1672:5:6","nodeType":"VariableDeclaration","scope":2804,"src":"1658:19:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"},"typeName":{"id":1468,"nodeType":"UserDefinedTypeName","pathNode":{"id":1467,"name":"IERC20","nameLocations":["1658:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"1658:6:6"},"referencedDeclaration":225,"src":"1658:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"d62ccb3f","id":1471,"mutability":"mutable","name":"ethReserve","nameLocation":"1698:10:6","nodeType":"VariableDeclaration","scope":2804,"src":"1683:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cbcb3171","id":1473,"mutability":"mutable","name":"tokenReserve","nameLocation":"1729:12:6","nodeType":"VariableDeclaration","scope":2804,"src":"1714:27:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"functionSelector":"d73792a9","id":1476,"mutability":"constant","name":"FEE_DENOMINATOR","nameLocation":"1771:15:6","nodeType":"VariableDeclaration","scope":2804,"src":"1747:46:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1474,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1789:4:6","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"public"},{"constant":false,"functionSelector":"978bbdb9","id":1479,"mutability":"mutable","name":"feeRate","nameLocation":"1814:7:6","nodeType":"VariableDeclaration","scope":2804,"src":"1799:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1824:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"anonymous":false,"eventSelector":"fa430e490a18c9d02a4c0bf501c1b5821a600e09249e983f8491c6575dd5e420","id":1489,"name":"Deposit","nameLocation":"1868:7:6","nodeType":"EventDefinition","parameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1892:4:6","nodeType":"VariableDeclaration","scope":1489,"src":"1876:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"1876:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1483,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1906:6:6","nodeType":"VariableDeclaration","scope":1489,"src":"1898:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1898:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1485,"indexed":false,"mutability":"mutable","name":"isEth","nameLocation":"1919:5:6","nodeType":"VariableDeclaration","scope":1489,"src":"1914:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1484,"name":"bool","nodeType":"ElementaryTypeName","src":"1914:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1487,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1934:9:6","nodeType":"VariableDeclaration","scope":1489,"src":"1926:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1486,"name":"uint256","nodeType":"ElementaryTypeName","src":"1926:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1875:69:6"},"src":"1862:83:6"},{"anonymous":false,"eventSelector":"06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a","id":1497,"name":"Withdrawal","nameLocation":"1956:10:6","nodeType":"EventDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1983:4:6","nodeType":"VariableDeclaration","scope":1497,"src":"1967:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1490,"name":"address","nodeType":"ElementaryTypeName","src":"1967:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1493,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1997:6:6","nodeType":"VariableDeclaration","scope":1497,"src":"1989:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1492,"name":"uint256","nodeType":"ElementaryTypeName","src":"1989:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1495,"indexed":false,"mutability":"mutable","name":"isEth","nameLocation":"2010:5:6","nodeType":"VariableDeclaration","scope":1497,"src":"2005:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1494,"name":"bool","nodeType":"ElementaryTypeName","src":"2005:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1966:50:6"},"src":"1950:67:6"},{"anonymous":false,"eventSelector":"1286e857b63fd858c9d7f18f3ba10736cc5130cec538c582711b13e4e3b68731","id":1503,"name":"BatchSwap","nameLocation":"2028:9:6","nodeType":"EventDefinition","parameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1499,"indexed":false,"mutability":"mutable","name":"batchId","nameLocation":"2046:7:6","nodeType":"VariableDeclaration","scope":1503,"src":"2038:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1498,"name":"uint256","nodeType":"ElementaryTypeName","src":"2038:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1501,"indexed":false,"mutability":"mutable","name":"swapCount","nameLocation":"2063:9:6","nodeType":"VariableDeclaration","scope":1503,"src":"2055:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2055:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2037:36:6"},"src":"2022:52:6"},{"anonymous":false,"eventSelector":"aafe03bb75a5a17474aa34c7aa7923939142dcc00fad86ba2217a698e5890531","id":1513,"name":"FallbackSwap","nameLocation":"2085:12:6","nodeType":"EventDefinition","parameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"2114:4:6","nodeType":"VariableDeclaration","scope":1513,"src":"2098:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1504,"name":"address","nodeType":"ElementaryTypeName","src":"2098:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1507,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"2128:8:6","nodeType":"VariableDeclaration","scope":1513,"src":"2120:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"2120:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1509,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2146:9:6","nodeType":"VariableDeclaration","scope":1513,"src":"2138:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1511,"indexed":false,"mutability":"mutable","name":"ethToToken","nameLocation":"2162:10:6","nodeType":"VariableDeclaration","scope":1513,"src":"2157:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1510,"name":"bool","nodeType":"ElementaryTypeName","src":"2157:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2097:76:6"},"src":"2079:95:6"},{"anonymous":false,"eventSelector":"6ec88bae255aa7e73521c3beb17e9bc7940169e669440c5531733c0d2e91110d","id":1519,"name":"SequencerChanged","nameLocation":"2185:16:6","nodeType":"EventDefinition","parameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1515,"indexed":true,"mutability":"mutable","name":"oldSequencer","nameLocation":"2218:12:6","nodeType":"VariableDeclaration","scope":1519,"src":"2202:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1514,"name":"address","nodeType":"ElementaryTypeName","src":"2202:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1517,"indexed":true,"mutability":"mutable","name":"newSequencer","nameLocation":"2248:12:6","nodeType":"VariableDeclaration","scope":1519,"src":"2232:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"2232:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2201:60:6"},"src":"2179:83:6"},{"anonymous":false,"eventSelector":"33d081570f4871cfc13364650930f27efe5e1be344da69c94d4e75c06fa02f04","id":1523,"name":"SequencerModeChanged","nameLocation":"2273:20:6","nodeType":"EventDefinition","parameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"indexed":false,"mutability":"mutable","name":"sequencerOnly","nameLocation":"2299:13:6","nodeType":"VariableDeclaration","scope":1523,"src":"2294:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1520,"name":"bool","nodeType":"ElementaryTypeName","src":"2294:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2293:20:6"},"src":"2267:47:6"},{"anonymous":false,"eventSelector":"d94095e772153bc53343941705b59e466d4e8aca1062afe01193089d27ff3a7f","id":1531,"name":"BatchCommitted","nameLocation":"2325:14:6","nodeType":"EventDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1525,"indexed":false,"mutability":"mutable","name":"batchId","nameLocation":"2348:7:6","nodeType":"VariableDeclaration","scope":1531,"src":"2340:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2340:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1527,"indexed":false,"mutability":"mutable","name":"intentRoot","nameLocation":"2365:10:6","nodeType":"VariableDeclaration","scope":1531,"src":"2357:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2357:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1529,"indexed":false,"mutability":"mutable","name":"batchSize","nameLocation":"2385:9:6","nodeType":"VariableDeclaration","scope":1531,"src":"2377:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1528,"name":"uint256","nodeType":"ElementaryTypeName","src":"2377:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2339:56:6"},"src":"2319:77:6"},{"anonymous":false,"eventSelector":"d4c22493e0aaec761df8f89beac249a28e68282a4c072c247156d6ce537618c9","id":1539,"name":"BatchSwapExecuted","nameLocation":"2407:17:6","nodeType":"EventDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1533,"indexed":false,"mutability":"mutable","name":"batchId","nameLocation":"2433:7:6","nodeType":"VariableDeclaration","scope":1539,"src":"2425:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1532,"name":"uint256","nodeType":"ElementaryTypeName","src":"2425:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1535,"indexed":false,"mutability":"mutable","name":"swapCount","nameLocation":"2450:9:6","nodeType":"VariableDeclaration","scope":1539,"src":"2442:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"2442:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1537,"indexed":false,"mutability":"mutable","name":"successCount","nameLocation":"2469:12:6","nodeType":"VariableDeclaration","scope":1539,"src":"2461:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"2461:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2424:58:6"},"src":"2401:82:6"},{"anonymous":false,"eventSelector":"ac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee45","id":1547,"name":"LiquidityAdded","nameLocation":"2494:14:6","nodeType":"EventDefinition","parameters":{"id":1546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"indexed":true,"mutability":"mutable","name":"provider","nameLocation":"2525:8:6","nodeType":"VariableDeclaration","scope":1547,"src":"2509:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1540,"name":"address","nodeType":"ElementaryTypeName","src":"2509:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1543,"indexed":false,"mutability":"mutable","name":"ethAmount","nameLocation":"2543:9:6","nodeType":"VariableDeclaration","scope":1547,"src":"2535:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"2535:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1545,"indexed":false,"mutability":"mutable","name":"tokenAmount","nameLocation":"2562:11:6","nodeType":"VariableDeclaration","scope":1547,"src":"2554:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1544,"name":"uint256","nodeType":"ElementaryTypeName","src":"2554:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2508:66:6"},"src":"2488:87:6"},{"anonymous":false,"eventSelector":"96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd059","id":1555,"name":"LiquidityRemoved","nameLocation":"2586:16:6","nodeType":"EventDefinition","parameters":{"id":1554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"indexed":true,"mutability":"mutable","name":"provider","nameLocation":"2619:8:6","nodeType":"VariableDeclaration","scope":1555,"src":"2603:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1548,"name":"address","nodeType":"ElementaryTypeName","src":"2603:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1551,"indexed":false,"mutability":"mutable","name":"ethAmount","nameLocation":"2637:9:6","nodeType":"VariableDeclaration","scope":1555,"src":"2629:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1553,"indexed":false,"mutability":"mutable","name":"tokenAmount","nameLocation":"2656:11:6","nodeType":"VariableDeclaration","scope":1555,"src":"2648:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"2648:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2602:66:6"},"src":"2580:89:6"},{"canonicalName":"SequencedAMM.SwapIntent","documentation":{"id":1556,"nodeType":"StructuredDocumentation","src":"2679:482:6","text":" @dev Structure representing a user's swap request\n @param user Address of the user requesting the swap\n @param ethToToken Direction of the swap (true = ETH to token, false = token to ETH)\n @param amountIn Amount of input asset the user wants to swap\n @param minAmountOut Minimum amount of output asset the user will accept (slippage protection)\n @param timestamp When the sequencer received this request (used for off-chain ordering)"},"id":1567,"members":[{"constant":false,"id":1558,"mutability":"mutable","name":"user","nameLocation":"3202:4:6","nodeType":"VariableDeclaration","scope":1567,"src":"3194:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1557,"name":"address","nodeType":"ElementaryTypeName","src":"3194:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1560,"mutability":"mutable","name":"ethToToken","nameLocation":"3221:10:6","nodeType":"VariableDeclaration","scope":1567,"src":"3216:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1559,"name":"bool","nodeType":"ElementaryTypeName","src":"3216:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"amountIn","nameLocation":"3249:8:6","nodeType":"VariableDeclaration","scope":1567,"src":"3241:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1561,"name":"uint256","nodeType":"ElementaryTypeName","src":"3241:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"minAmountOut","nameLocation":"3275:12:6","nodeType":"VariableDeclaration","scope":1567,"src":"3267:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"3267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"timestamp","nameLocation":"3305:9:6","nodeType":"VariableDeclaration","scope":1567,"src":"3297:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SwapIntent","nameLocation":"3173:10:6","nodeType":"StructDefinition","scope":2804,"src":"3166:155:6","visibility":"public"},{"constant":false,"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"3327:182:6","text":" @dev Stores the cryptographic commitment for each batch and its submission time\n These mappings support the commit-reveal pattern that prevents front-running"},"functionSelector":"c13c0ea5","id":1572,"mutability":"mutable","name":"batchIntentRoots","nameLocation":"3549:16:6","nodeType":"VariableDeclaration","scope":2804,"src":"3514:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"},"typeName":{"id":1571,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1569,"name":"uint256","nodeType":"ElementaryTypeName","src":"3522:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3514:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3533:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"constant":false,"functionSelector":"54cc3c74","id":1576,"mutability":"mutable","name":"batchSubmissionTimes","nameLocation":"3639:20:6","nodeType":"VariableDeclaration","scope":2804,"src":"3604:55:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1575,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3604:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1574,"name":"uint256","nodeType":"ElementaryTypeName","src":"3623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8462a7f8","id":1579,"mutability":"mutable","name":"nextBatchId","nameLocation":"3680:11:6","nodeType":"VariableDeclaration","scope":2804,"src":"3665:30:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1577,"name":"uint256","nodeType":"ElementaryTypeName","src":"3665:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3694:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"e71bfdc0","id":1582,"mutability":"mutable","name":"commitRevealDelay","nameLocation":"3716:17:6","nodeType":"VariableDeclaration","scope":2804,"src":"3701:44:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1580,"name":"uint256","nodeType":"ElementaryTypeName","src":"3701:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3736:9:6","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_180_by_1","typeString":"int_const 180"},"value":"3"},"visibility":"public"},{"canonicalName":"SequencedAMM.BatchResult","documentation":{"id":1583,"nodeType":"StructuredDocumentation","src":"3752:197:6","text":" @dev Tracks the execution results of each swap in a batch\n This allows users to verify their swap was processed correctly and understand\n why a swap might have failed"},"id":1594,"members":[{"constant":false,"id":1585,"mutability":"mutable","name":"successCount","nameLocation":"3991:12:6","nodeType":"VariableDeclaration","scope":1594,"src":"3983:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"3983:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"successfulSwaps","nameLocation":"4038:15:6","nodeType":"VariableDeclaration","scope":1594,"src":"4013:40:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":1588,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"4021:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4013:24:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1587,"name":"bool","nodeType":"ElementaryTypeName","src":"4032:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":1593,"mutability":"mutable","name":"failureReasons","nameLocation":"4090:14:6","nodeType":"VariableDeclaration","scope":1594,"src":"4063:41:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1592,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4063:26:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1591,"name":"string","nodeType":"ElementaryTypeName","src":"4082:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"internal"}],"name":"BatchResult","nameLocation":"3961:11:6","nodeType":"StructDefinition","scope":2804,"src":"3954:157:6","visibility":"public"},{"constant":false,"functionSelector":"88da2b2d","id":1599,"mutability":"mutable","name":"batchResults","nameLocation":"4155:12:6","nodeType":"VariableDeclaration","scope":2804,"src":"4116:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_BatchResult_$1594_storage_$","typeString":"mapping(uint256 => struct SequencedAMM.BatchResult)"},"typeName":{"id":1598,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"4124:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4116:31:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_BatchResult_$1594_storage_$","typeString":"mapping(uint256 => struct SequencedAMM.BatchResult)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1597,"nodeType":"UserDefinedTypeName","pathNode":{"id":1596,"name":"BatchResult","nameLocations":["4135:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"4135:11:6"},"referencedDeclaration":1594,"src":"4135:11:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"4174:152:6","text":" @dev Tracks liquidity provider contributions to the pool\n Liquidity providers earn fees proportional to their share of the pool"},"functionSelector":"9db4aa04","id":1604,"mutability":"mutable","name":"liquidityShares","nameLocation":"4366:15:6","nodeType":"VariableDeclaration","scope":2804,"src":"4331:50:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1603,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1601,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4331:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1602,"name":"uint256","nodeType":"ElementaryTypeName","src":"4350:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"87cd5b20","id":1606,"mutability":"mutable","name":"totalLiquidityShares","nameLocation":"4402:20:6","nodeType":"VariableDeclaration","scope":2804,"src":"4387:35:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"4387:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":1623,"nodeType":"Block","src":"4744:45:6","statements":[{"expression":{"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1617,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"4754:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1619,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"4769:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1618,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4762:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$225_$","typeString":"type(contract IERC20)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4762:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"src":"4754:28:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":1622,"nodeType":"ExpressionStatement","src":"4754:28:6"}]},"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"4433:228:6","text":" @dev Sets up the AMM with an owner and token address\n @param initialOwner Address that will have admin control of the contract\n @param tokenAddress The ERC20 token to be paired with ETH in this AMM"},"id":1624,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1614,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"4730:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1615,"kind":"baseConstructorSpecifier","modifierName":{"id":1613,"name":"Ownable","nameLocations":["4722:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"4722:7:6"},"nodeType":"ModifierInvocation","src":"4722:21:6"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"initialOwner","nameLocation":"4686:12:6","nodeType":"VariableDeclaration","scope":1624,"src":"4678:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"4678:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"tokenAddress","nameLocation":"4708:12:6","nodeType":"VariableDeclaration","scope":1624,"src":"4700:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"4700:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4677:44:6"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[],"src":"4744:0:6"},"scope":2804,"src":"4666:123:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1636,"nodeType":"Block","src":"4986:87:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1628,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5004:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5008:6:6","memberName":"sender","nodeType":"MemberAccess","src":"5004:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1630,"name":"sequencer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"5018:9:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5004:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792073657175656e6365722063616e2063616c6c","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5029:25:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5293dae32fd36b30aa8d04fdc7b7bdc507190b6419b10b8c94c27251f6718f68","typeString":"literal_string \"Only sequencer can call\""},"value":"Only sequencer can call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5293dae32fd36b30aa8d04fdc7b7bdc507190b6419b10b8c94c27251f6718f68","typeString":"literal_string \"Only sequencer can call\""}],"id":1627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4996:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1634,"nodeType":"ExpressionStatement","src":"4996:59:6"},{"id":1635,"nodeType":"PlaceholderStatement","src":"5065:1:6"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"4799:157:6","text":" @dev Restricts function access to only the designated sequencer\n This ensures only the trusted sequencer can batch and execute swaps"},"id":1637,"name":"onlySequencer","nameLocation":"4970:13:6","nodeType":"ModifierDefinition","parameters":{"id":1626,"nodeType":"ParameterList","parameters":[],"src":"4983:2:6"},"src":"4961:112:6","virtual":false,"visibility":"internal"},{"body":{"id":1652,"nodeType":"Block","src":"5274:98:6","statements":[{"id":1640,"nodeType":"PlaceholderStatement","src":"5284:1:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1642,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"5303:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5316:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5303:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1645,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"5321:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5336:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5321:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5303:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52657365727665732063616e6e6f74206265207a65726f","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5339:25:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e3f62a7c074f070c27b431151d8400c305bd8b59b5ff252c90ac0467faf2a19c","typeString":"literal_string \"Reserves cannot be zero\""},"value":"Reserves cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e3f62a7c074f070c27b431151d8400c305bd8b59b5ff252c90ac0467faf2a19c","typeString":"literal_string \"Reserves cannot be zero\""}],"id":1641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5295:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5295:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1651,"nodeType":"ExpressionStatement","src":"5295:70:6"}]},"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"5079:157:6","text":" @dev Ensures the pool has non-zero reserves after the operation\n This prevents divide-by-zero errors in the constant product formula"},"id":1653,"name":"ensureNonZeroReserves","nameLocation":"5250:21:6","nodeType":"ModifierDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[],"src":"5271:2:6"},"src":"5241:131:6","virtual":false,"visibility":"internal"},{"body":{"id":1675,"nodeType":"Block","src":"5580:121:6","statements":[{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1657,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"5590:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1660,"indexExpression":{"expression":{"id":1658,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5602:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5606:6:6","memberName":"sender","nodeType":"MemberAccess","src":"5602:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5590:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1661,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5617:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5621:5:6","memberName":"value","nodeType":"MemberAccess","src":"5617:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5590:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1664,"nodeType":"ExpressionStatement","src":"5590:36:6"},{"eventCall":{"arguments":[{"expression":{"id":1666,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5649:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5653:6:6","memberName":"sender","nodeType":"MemberAccess","src":"5649:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1668,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5661:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5665:5:6","memberName":"value","nodeType":"MemberAccess","src":"5661:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5672:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"id":1671,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5678:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5684:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"5678:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1665,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"5641:7:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bool,uint256)"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1674,"nodeType":"EmitStatement","src":"5636:58:6"}]},"documentation":{"id":1654,"nodeType":"StructuredDocumentation","src":"5382:154:6","text":" @dev Allows users to deposit ETH into their balance in the contract\n Users must deposit before they can swap or provide liquidity"},"functionSelector":"f6326fb3","id":1676,"implemented":true,"kind":"function","modifiers":[],"name":"depositETH","nameLocation":"5550:10:6","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[],"src":"5560:2:6"},"returnParameters":{"id":1656,"nodeType":"ParameterList","parameters":[],"src":"5580:0:6"},"scope":2804,"src":"5541:160:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1712,"nodeType":"Block","src":"5958:215:6","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1685,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5995:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5999:6:6","memberName":"sender","nodeType":"MemberAccess","src":"5995:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1689,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6015:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SequencedAMM_$2804","typeString":"contract SequencedAMM"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SequencedAMM_$2804","typeString":"contract SequencedAMM"}],"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6007:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"6007:7:6","typeDescriptions":{}}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6007:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1691,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"6022:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1683,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"5976:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5982:12:6","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":224,"src":"5976:18:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6031:23:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":1682,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5968:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5968:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1695,"nodeType":"ExpressionStatement","src":"5968:87:6"},{"expression":{"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1696,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"6065:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1699,"indexExpression":{"expression":{"id":1697,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6079:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6083:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6079:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6065:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1700,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"6094:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6065:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1702,"nodeType":"ExpressionStatement","src":"6065:35:6"},{"eventCall":{"arguments":[{"expression":{"id":1704,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6123:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6127:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6123:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1706,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"6135:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6143:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"expression":{"id":1708,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6150:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6156:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"6150:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1703,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"6115:7:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bool,uint256)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6115:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1711,"nodeType":"EmitStatement","src":"6110:56:6"}]},"documentation":{"id":1677,"nodeType":"StructuredDocumentation","src":"5711:195:6","text":" @dev Allows users to deposit tokens into their balance in the contract\n @param amount The amount of tokens to deposit\n Requires prior approval of the token contract"},"functionSelector":"6215be77","id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"depositToken","nameLocation":"5920:12:6","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"amount","nameLocation":"5941:6:6","nodeType":"VariableDeclaration","scope":1713,"src":"5933:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1678,"name":"uint256","nodeType":"ElementaryTypeName","src":"5933:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5932:16:6"},"returnParameters":{"id":1681,"nodeType":"ParameterList","parameters":[],"src":"5958:0:6"},"scope":2804,"src":"5911:262:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1763,"nodeType":"Block","src":"6429:302:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1722,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6447:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1725,"indexExpression":{"expression":{"id":1723,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6459:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6463:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6459:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6447:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1726,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6474:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6447:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74204554482062616c616e6365","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6482:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""},"value":"Insufficient ETH balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""}],"id":1721,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6439:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6439:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1730,"nodeType":"ExpressionStatement","src":"6439:70:6"},{"expression":{"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1731,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6519:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1734,"indexExpression":{"expression":{"id":1732,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6531:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6535:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6531:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6519:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1735,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6546:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6519:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1737,"nodeType":"ExpressionStatement","src":"6519:33:6"},{"assignments":[1739,null],"declarations":[{"constant":false,"id":1739,"mutability":"mutable","name":"success","nameLocation":"6568:7:6","nodeType":"VariableDeclaration","scope":1763,"src":"6563:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1738,"name":"bool","nodeType":"ElementaryTypeName","src":"6563:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1750,"initialValue":{"arguments":[{"hexValue":"","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6621:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":1742,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6589:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6593:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6589:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6581:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":1740,"name":"address","nodeType":"ElementaryTypeName","src":"6581:8:6","stateMutability":"payable","typeDescriptions":{}}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6581:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6601:4:6","memberName":"call","nodeType":"MemberAccess","src":"6581:24:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1746,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6613:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6581:39:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6581:43:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6562:62:6"},{"expression":{"arguments":[{"id":1752,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"6642:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455448207472616e73666572206661696c6564","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6651:21:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c7c2be2f1b63a3793f6e2d447ce95ba2239687186a7fd6b5268a969dcdb42dcd","typeString":"literal_string \"ETH transfer failed\""},"value":"ETH transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c7c2be2f1b63a3793f6e2d447ce95ba2239687186a7fd6b5268a969dcdb42dcd","typeString":"literal_string \"ETH transfer failed\""}],"id":1751,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6634:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6634:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1755,"nodeType":"ExpressionStatement","src":"6634:39:6"},{"eventCall":{"arguments":[{"expression":{"id":1757,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6699:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6703:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6699:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1759,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6711:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6719:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1756,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"6688:10:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6688:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1762,"nodeType":"EmitStatement","src":"6683:41:6"}]},"documentation":{"id":1714,"nodeType":"StructuredDocumentation","src":"6183:182:6","text":" @dev Allows users to withdraw ETH from their balance in the contract\n @param amount The amount of ETH to withdraw\n Protected against reentrancy attacks"},"functionSelector":"f14210a6","id":1764,"implemented":true,"kind":"function","modifiers":[{"id":1719,"kind":"modifierInvocation","modifierName":{"id":1718,"name":"nonReentrant","nameLocations":["6416:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"6416:12:6"},"nodeType":"ModifierInvocation","src":"6416:12:6"}],"name":"withdrawETH","nameLocation":"6379:11:6","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"amount","nameLocation":"6399:6:6","nodeType":"VariableDeclaration","scope":1764,"src":"6391:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"6391:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6390:16:6"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[],"src":"6429:0:6"},"scope":2804,"src":"6370:361:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1806,"nodeType":"Block","src":"6995:266:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1773,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"7013:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1776,"indexExpression":{"expression":{"id":1774,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7027:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7031:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7027:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7013:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1777,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"7042:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7013:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7050:28:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""},"value":"Insufficient token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""}],"id":1772,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7005:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7005:74:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1781,"nodeType":"ExpressionStatement","src":"7005:74:6"},{"expression":{"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1782,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"7089:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1785,"indexExpression":{"expression":{"id":1783,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7103:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7107:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7103:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7089:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1786,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"7118:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7089:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1788,"nodeType":"ExpressionStatement","src":"7089:35:6"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1792,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7157:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7161:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7157:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1794,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"7169:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1790,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"7142:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7148:8:6","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":192,"src":"7142:14:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7142:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7178:23:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":1789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7134:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7134:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1798,"nodeType":"ExpressionStatement","src":"7134:68:6"},{"eventCall":{"arguments":[{"expression":{"id":1800,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7228:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7232:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7228:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1802,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"7240:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7248:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1799,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"7217:10:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7217:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1805,"nodeType":"EmitStatement","src":"7212:42:6"}]},"documentation":{"id":1765,"nodeType":"StructuredDocumentation","src":"6741:188:6","text":" @dev Allows users to withdraw tokens from their balance in the contract\n @param amount The amount of tokens to withdraw\n Protected against reentrancy attacks"},"functionSelector":"50baa622","id":1807,"implemented":true,"kind":"function","modifiers":[{"id":1770,"kind":"modifierInvocation","modifierName":{"id":1769,"name":"nonReentrant","nameLocations":["6982:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"6982:12:6"},"nodeType":"ModifierInvocation","src":"6982:12:6"}],"name":"withdrawToken","nameLocation":"6943:13:6","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"amount","nameLocation":"6965:6:6","nodeType":"VariableDeclaration","scope":1807,"src":"6957:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"6957:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6956:16:6"},"returnParameters":{"id":1771,"nodeType":"ParameterList","parameters":[],"src":"6995:0:6"},"scope":2804,"src":"6934:327:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1919,"nodeType":"Block","src":"7776:1002:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1820,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"7794:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1823,"indexExpression":{"expression":{"id":1821,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7806:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7810:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7806:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7794:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1824,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"7821:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7794:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74204554482062616c616e6365","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7832:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""},"value":"Insufficient ETH balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""}],"id":1819,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7786:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7786:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1828,"nodeType":"ExpressionStatement","src":"7786:73:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1830,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"7877:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1833,"indexExpression":{"expression":{"id":1831,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7891:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7895:6:6","memberName":"sender","nodeType":"MemberAccess","src":"7891:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7877:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1834,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"7906:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7877:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7919:28:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""},"value":"Insufficient token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""}],"id":1829,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7869:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7869:79:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1838,"nodeType":"ExpressionStatement","src":"7869:79:6"},{"assignments":[1840],"declarations":[{"constant":false,"id":1840,"mutability":"mutable","name":"shares","nameLocation":"7975:6:6","nodeType":"VariableDeclaration","scope":1919,"src":"7967:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"7967:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1841,"nodeType":"VariableDeclarationStatement","src":"7967:14:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"7995:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8019:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7995:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1870,"nodeType":"Block","src":"8118:242:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1851,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8202:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1852,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"8214:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8202:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1854,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8230:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1855,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8244:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8230:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8202:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e62616c616e636564206c6971756964697479","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8256:22:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_bedc916c781804ec0ee2d7414163a00db271075a4f41c176fc5b43f8051fe671","typeString":"literal_string \"Unbalanced liquidity\""},"value":"Unbalanced liquidity"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bedc916c781804ec0ee2d7414163a00db271075a4f41c176fc5b43f8051fe671","typeString":"literal_string \"Unbalanced liquidity\""}],"id":1850,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8194:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8194:85:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1860,"nodeType":"ExpressionStatement","src":"8194:85:6"},{"expression":{"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1861,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8293:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1862,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8303:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1863,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"8315:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8303:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1865,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8302:34:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1866,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8339:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8302:47:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8293:56:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"nodeType":"ExpressionStatement","src":"8293:56:6"}]},"id":1871,"nodeType":"IfStatement","src":"7991:369:6","trueBody":{"id":1849,"nodeType":"Block","src":"8022:90:6","statements":[{"expression":{"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1845,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8036:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1846,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8045:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8036:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1848,"nodeType":"ExpressionStatement","src":"8036:18:6"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8386:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8395:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8386:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20736861726573206d696e746564","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8398:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d1aeafd5a4336a1fbdee69453c0838d41551331ce0a07ed01d492f1d09d2b61","typeString":"literal_string \"No shares minted\""},"value":"No shares minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d1aeafd5a4336a1fbdee69453c0838d41551331ce0a07ed01d492f1d09d2b61","typeString":"literal_string \"No shares minted\""}],"id":1872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8378:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8378:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1878,"nodeType":"ExpressionStatement","src":"8378:39:6"},{"expression":{"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1879,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8436:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1882,"indexExpression":{"expression":{"id":1880,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8448:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8452:6:6","memberName":"sender","nodeType":"MemberAccess","src":"8448:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8436:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1883,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8463:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8436:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1885,"nodeType":"ExpressionStatement","src":"8436:36:6"},{"expression":{"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1886,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8482:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1889,"indexExpression":{"expression":{"id":1887,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8496:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8500:6:6","memberName":"sender","nodeType":"MemberAccess","src":"8496:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8482:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1890,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8511:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8482:40:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1892,"nodeType":"ExpressionStatement","src":"8482:40:6"},{"expression":{"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1893,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8541:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1894,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8555:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8541:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1896,"nodeType":"ExpressionStatement","src":"8541:23:6"},{"expression":{"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1897,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"8574:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1898,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8590:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8574:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"nodeType":"ExpressionStatement","src":"8574:27:6"},{"expression":{"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1901,"name":"liquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"8620:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1904,"indexExpression":{"expression":{"id":1902,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8636:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8640:6:6","memberName":"sender","nodeType":"MemberAccess","src":"8636:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8620:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1905,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8651:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8620:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1907,"nodeType":"ExpressionStatement","src":"8620:37:6"},{"expression":{"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1908,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"8667:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1909,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8691:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8667:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1911,"nodeType":"ExpressionStatement","src":"8667:30:6"},{"eventCall":{"arguments":[{"expression":{"id":1913,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8736:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8740:6:6","memberName":"sender","nodeType":"MemberAccess","src":"8736:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1915,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"8748:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1916,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8759:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1912,"name":"LiquidityAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8721:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8721:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1918,"nodeType":"EmitStatement","src":"8716:55:6"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"7271:394:6","text":" @dev Allows users to provide liquidity to the AMM pool\n @param ethAmount Amount of ETH to contribute\n @param tokenAmount Amount of tokens to contribute\n \n Users receive liquidity shares proportional to their contribution.\n After the first deposit, contributions must maintain the current price ratio.\n Protected against reentrancy attacks."},"functionSelector":"9cd441da","id":1920,"implemented":true,"kind":"function","modifiers":[{"id":1815,"kind":"modifierInvocation","modifierName":{"id":1814,"name":"nonReentrant","nameLocations":["7741:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"7741:12:6"},"nodeType":"ModifierInvocation","src":"7741:12:6"},{"id":1817,"kind":"modifierInvocation","modifierName":{"id":1816,"name":"ensureNonZeroReserves","nameLocations":["7754:21:6"],"nodeType":"IdentifierPath","referencedDeclaration":1653,"src":"7754:21:6"},"nodeType":"ModifierInvocation","src":"7754:21:6"}],"name":"addLiquidity","nameLocation":"7679:12:6","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"ethAmount","nameLocation":"7700:9:6","nodeType":"VariableDeclaration","scope":1920,"src":"7692:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1809,"name":"uint256","nodeType":"ElementaryTypeName","src":"7692:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"tokenAmount","nameLocation":"7719:11:6","nodeType":"VariableDeclaration","scope":1920,"src":"7711:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"7711:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7691:40:6"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[],"src":"7776:0:6"},"scope":2804,"src":"7670:1108:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2007,"nodeType":"Block","src":"9141:709:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1929,"name":"liquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"9159:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1932,"indexExpression":{"expression":{"id":1930,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9175:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9179:6:6","memberName":"sender","nodeType":"MemberAccess","src":"9175:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9159:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1933,"name":"shareAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"9190:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9159:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420736861726573","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9203:21:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_043f4b20be62bb0d39adad142dcc6d5a35d567a4072048f22c528cf051db2665","typeString":"literal_string \"Insufficient shares\""},"value":"Insufficient shares"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_043f4b20be62bb0d39adad142dcc6d5a35d567a4072048f22c528cf051db2665","typeString":"literal_string \"Insufficient shares\""}],"id":1928,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9151:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9151:74:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1937,"nodeType":"ExpressionStatement","src":"9151:74:6"},{"assignments":[1939],"declarations":[{"constant":false,"id":1939,"mutability":"mutable","name":"ethAmount","nameLocation":"9252:9:6","nodeType":"VariableDeclaration","scope":2007,"src":"9244:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"9244:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1946,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1940,"name":"shareAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"9265:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1941,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"9279:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9265:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9264:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1944,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9293:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9264:49:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9244:69:6"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"tokenAmount","nameLocation":"9331:11:6","nodeType":"VariableDeclaration","scope":2007,"src":"9323:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"9323:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1955,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"shareAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"9346:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1950,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"9360:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9346:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9345:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1953,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9376:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9345:51:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9323:73:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1957,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"9423:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9423:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"9440:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9454:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9440:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9423:32:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e747320746f6f20736d616c6c","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9457:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2724f7dd92ed87e20d568fab3b736fae72dba964f8b72dedb7a1ef70261c6fb1","typeString":"literal_string \"Amounts too small\""},"value":"Amounts too small"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2724f7dd92ed87e20d568fab3b736fae72dba964f8b72dedb7a1ef70261c6fb1","typeString":"literal_string \"Amounts too small\""}],"id":1956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9415:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9415:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1966,"nodeType":"ExpressionStatement","src":"9415:62:6"},{"expression":{"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1967,"name":"liquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"9496:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1970,"indexExpression":{"expression":{"id":1968,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9512:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9516:6:6","memberName":"sender","nodeType":"MemberAccess","src":"9512:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9496:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1971,"name":"shareAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"9527:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9496:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1973,"nodeType":"ExpressionStatement","src":"9496:42:6"},{"expression":{"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1974,"name":"totalLiquidityShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9548:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1975,"name":"shareAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"9572:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9548:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1977,"nodeType":"ExpressionStatement","src":"9548:35:6"},{"expression":{"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1978,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"9602:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1979,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"9616:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9602:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1981,"nodeType":"ExpressionStatement","src":"9602:23:6"},{"expression":{"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"9635:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1983,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"9651:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9635:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1985,"nodeType":"ExpressionStatement","src":"9635:27:6"},{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1986,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"9681:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1989,"indexExpression":{"expression":{"id":1987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9693:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9697:6:6","memberName":"sender","nodeType":"MemberAccess","src":"9693:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9681:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1990,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"9708:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9681:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"nodeType":"ExpressionStatement","src":"9681:36:6"},{"expression":{"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1993,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"9727:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1996,"indexExpression":{"expression":{"id":1994,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9741:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9745:6:6","memberName":"sender","nodeType":"MemberAccess","src":"9741:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9727:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1997,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"9756:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9727:40:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1999,"nodeType":"ExpressionStatement","src":"9727:40:6"},{"eventCall":{"arguments":[{"expression":{"id":2001,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9808:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9812:6:6","memberName":"sender","nodeType":"MemberAccess","src":"9808:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2003,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"9820:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2004,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"9831:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2000,"name":"LiquidityRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"9791:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2006,"nodeType":"EmitStatement","src":"9786:57:6"}]},"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"8788:280:6","text":" @dev Allows liquidity providers to withdraw their liquidity from the pool\n @param shareAmount The number of liquidity shares to burn\n \n Returns a proportional amount of ETH and tokens from the pool.\n Protected against reentrancy attacks."},"functionSelector":"9c8f9f23","id":2008,"implemented":true,"kind":"function","modifiers":[{"id":1926,"kind":"modifierInvocation","modifierName":{"id":1925,"name":"nonReentrant","nameLocations":["9128:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"9128:12:6"},"nodeType":"ModifierInvocation","src":"9128:12:6"}],"name":"removeLiquidity","nameLocation":"9082:15:6","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"shareAmount","nameLocation":"9106:11:6","nodeType":"VariableDeclaration","scope":2008,"src":"9098:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"9098:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9097:21:6"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[],"src":"9141:0:6"},"scope":2804,"src":"9073:777:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2040,"nodeType":"Block","src":"10608:208:6","statements":[{"expression":{"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2018,"name":"batchIntentRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"10618:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":2020,"indexExpression":{"id":2019,"name":"nextBatchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"10635:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10618:29:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2021,"name":"intentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"10650:10:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10618:42:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2023,"nodeType":"ExpressionStatement","src":"10618:42:6"},{"expression":{"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2024,"name":"batchSubmissionTimes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"10670:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2026,"indexExpression":{"id":2025,"name":"nextBatchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"10691:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10670:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2027,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10706:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10712:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"10706:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10670:51:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2030,"nodeType":"ExpressionStatement","src":"10670:51:6"},{"eventCall":{"arguments":[{"id":2032,"name":"nextBatchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"10751:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2033,"name":"intentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"10764:10:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2034,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"10776:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2031,"name":"BatchCommitted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"10736:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (uint256,bytes32,uint256)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10736:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2036,"nodeType":"EmitStatement","src":"10731:55:6"},{"expression":{"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10796:13:6","subExpression":{"id":2037,"name":"nextBatchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"10796:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2039,"nodeType":"ExpressionStatement","src":"10796:13:6"}]},"documentation":{"id":2009,"nodeType":"StructuredDocumentation","src":"9860:631:6","text":" @dev First step of the commit-reveal pattern - sequencer commits to a batch of swap intents\n @param intentRoot The Merkle root hash of all swap intents in this batch\n @param batchSize The number of swaps included in this batch\n \n The sequencer constructs a Merkle tree of all user swap intents off-chain,\n then commits only the root hash on-chain. This creates a binding commitment\n to a specific set of transactions without revealing their details yet.\n This commitment prevents the sequencer from changing the transaction set\n after seeing new market conditions."},"functionSelector":"80a4f6df","id":2041,"implemented":true,"kind":"function","modifiers":[{"id":2016,"kind":"modifierInvocation","modifierName":{"id":2015,"name":"onlySequencer","nameLocations":["10594:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":1637,"src":"10594:13:6"},"nodeType":"ModifierInvocation","src":"10594:13:6"}],"name":"commitBatchIntents","nameLocation":"10505:18:6","nodeType":"FunctionDefinition","parameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"intentRoot","nameLocation":"10541:10:6","nodeType":"VariableDeclaration","scope":2041,"src":"10533:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10533:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"batchSize","nameLocation":"10569:9:6","nodeType":"VariableDeclaration","scope":2041,"src":"10561:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"10561:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10523:61:6"},"returnParameters":{"id":2017,"nodeType":"ParameterList","parameters":[],"src":"10608:0:6"},"scope":2804,"src":"10496:320:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2268,"nodeType":"Block","src":"12090:2037:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2068,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12108:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12114:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"12108:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2070,"name":"batchSubmissionTimes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"12127:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2072,"indexExpression":{"id":2071,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"12148:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12127:29:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2073,"name":"commitRevealDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"12159:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12127:49:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12108:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d757374207761697420616674657220636f6d6d6974","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12195:24:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0a539a6ca63c02220715b761ecfe813148379bf5b8ebbb6a2a9c5d070904b0bb","typeString":"literal_string \"Must wait after commit\""},"value":"Must wait after commit"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0a539a6ca63c02220715b761ecfe813148379bf5b8ebbb6a2a9c5d070904b0bb","typeString":"literal_string \"Must wait after commit\""}],"id":2067,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12100:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12100:120:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2078,"nodeType":"ExpressionStatement","src":"12100:120:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2080,"name":"batchIntentRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"12238:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":2082,"indexExpression":{"id":2081,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"12255:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12238:25:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12275:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12267:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12267:7:6","typeDescriptions":{}}},"id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12267:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12238:39:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4261746368206e6f7420636f6d6d6974746564","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12279:21:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8908d6292750005be4c40c08d829e9b8876f26630ab009e497bd496b1b972899","typeString":"literal_string \"Batch not committed\""},"value":"Batch not committed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8908d6292750005be4c40c08d829e9b8876f26630ab009e497bd496b1b972899","typeString":"literal_string \"Batch not committed\""}],"id":2079,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12230:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12230:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2090,"nodeType":"ExpressionStatement","src":"12230:71:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2092,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12319:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12325:6:6","memberName":"length","nodeType":"MemberAccess","src":"12319:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2094,"name":"ethToTokenFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"12335:15:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12351:6:6","memberName":"length","nodeType":"MemberAccess","src":"12335:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12319:38:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2097,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12377:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12383:6:6","memberName":"length","nodeType":"MemberAccess","src":"12377:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2099,"name":"amountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"12393:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12403:6:6","memberName":"length","nodeType":"MemberAccess","src":"12393:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12377:32:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12319:90:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2103,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12429:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12435:6:6","memberName":"length","nodeType":"MemberAccess","src":"12429:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2105,"name":"minAmountsOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"12445:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12459:6:6","memberName":"length","nodeType":"MemberAccess","src":"12445:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12429:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12319:146:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2109,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12485:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12491:6:6","memberName":"length","nodeType":"MemberAccess","src":"12485:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2111,"name":"proofs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"12501:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes32[] calldata[] calldata"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12508:6:6","memberName":"length","nodeType":"MemberAccess","src":"12501:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12485:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12319:195:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4172726179206c656e677468206d69736d61746368","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12532:23:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea","typeString":"literal_string \"Array length mismatch\""},"value":"Array length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea","typeString":"literal_string \"Array length mismatch\""}],"id":2091,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12311:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12311:245:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2117,"nodeType":"ExpressionStatement","src":"12311:245:6"},{"assignments":[2120],"declarations":[{"constant":false,"id":2120,"mutability":"mutable","name":"result","nameLocation":"12645:6:6","nodeType":"VariableDeclaration","scope":2268,"src":"12625:26:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult"},"typeName":{"id":2119,"nodeType":"UserDefinedTypeName","pathNode":{"id":2118,"name":"BatchResult","nameLocations":["12625:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"12625:11:6"},"referencedDeclaration":1594,"src":"12625:11:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult"}},"visibility":"internal"}],"id":2124,"initialValue":{"baseExpression":{"id":2121,"name":"batchResults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"12654:12:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_BatchResult_$1594_storage_$","typeString":"mapping(uint256 => struct SequencedAMM.BatchResult storage ref)"}},"id":2123,"indexExpression":{"id":2122,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"12667:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12654:21:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage","typeString":"struct SequencedAMM.BatchResult storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12625:50:6"},{"body":{"id":2253,"nodeType":"Block","src":"12734:1208:6","statements":[{"assignments":[2138],"declarations":[{"constant":false,"id":2138,"mutability":"mutable","name":"intent","nameLocation":"12805:6:6","nodeType":"VariableDeclaration","scope":2253,"src":"12787:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent"},"typeName":{"id":2137,"nodeType":"UserDefinedTypeName","pathNode":{"id":2136,"name":"SwapIntent","nameLocations":["12787:10:6"],"nodeType":"IdentifierPath","referencedDeclaration":1567,"src":"12787:10:6"},"referencedDeclaration":1567,"src":"12787:10:6","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_storage_ptr","typeString":"struct SequencedAMM.SwapIntent"}},"visibility":"internal"}],"id":2154,"initialValue":{"arguments":[{"baseExpression":{"id":2140,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12849:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2142,"indexExpression":{"id":2141,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12855:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12849:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2143,"name":"ethToTokenFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"12887:15:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2145,"indexExpression":{"id":2144,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12903:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12887:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"baseExpression":{"id":2146,"name":"amountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"12933:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2148,"indexExpression":{"id":2147,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12943:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12933:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2149,"name":"minAmountsOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"12977:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2151,"indexExpression":{"id":2150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12991:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12977:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13022:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2139,"name":"SwapIntent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"12814:10:6","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_SwapIntent_$1567_storage_ptr_$","typeString":"type(struct SequencedAMM.SwapIntent storage pointer)"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["12843:4:6","12875:10:6","12923:8:6","12963:12:6","13011:9:6"],"names":["user","ethToToken","amountIn","minAmountOut","timestamp"],"nodeType":"FunctionCall","src":"12814:260:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}},"nodeType":"VariableDeclarationStatement","src":"12787:287:6"},{"assignments":[2156],"declarations":[{"constant":false,"id":2156,"mutability":"mutable","name":"leaf","nameLocation":"13109:4:6","nodeType":"VariableDeclaration","scope":2253,"src":"13101:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13101:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2163,"initialValue":{"arguments":[{"arguments":[{"id":2160,"name":"intent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"13137:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}],"expression":{"id":2158,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13126:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13130:6:6","memberName":"encode","nodeType":"MemberAccess","src":"13126:10:6","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13126:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2157,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"13116:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13116:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"13101:44:6"},{"assignments":[2165],"declarations":[{"constant":false,"id":2165,"mutability":"mutable","name":"isValidProof","nameLocation":"13212:12:6","nodeType":"VariableDeclaration","scope":2253,"src":"13207:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2164,"name":"bool","nodeType":"ElementaryTypeName","src":"13207:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2176,"initialValue":{"arguments":[{"baseExpression":{"id":2168,"name":"proofs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"13263:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes32[] calldata[] calldata"}},"id":2170,"indexExpression":{"id":2169,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13270:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13263:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"baseExpression":{"id":2171,"name":"batchIntentRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"13290:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":2173,"indexExpression":{"id":2172,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"13307:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13290:25:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2174,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"13333:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2166,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"13227:11:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1437_$","typeString":"type(library MerkleProof)"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13239:6:6","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":393,"src":"13227:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13227:124:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"13207:144:6"},{"condition":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13382:13:6","subExpression":{"id":2177,"name":"isValidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"13383:12:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2197,"nodeType":"IfStatement","src":"13378:171:6","trueBody":{"id":2196,"nodeType":"Block","src":"13397:152:6","statements":[{"expression":{"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13415:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13422:15:6","memberName":"successfulSwaps","nodeType":"MemberAccess","referencedDeclaration":1589,"src":"13415:22:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2183,"indexExpression":{"id":2181,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13438:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13415:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13443:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13415:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2186,"nodeType":"ExpressionStatement","src":"13415:33:6"},{"expression":{"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2187,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13466:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2190,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13473:14:6","memberName":"failureReasons","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"13466:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2191,"indexExpression":{"id":2189,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13488:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13466:24:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"496e76616c69642070726f6f66","id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13493:15:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639","typeString":"literal_string \"Invalid proof\""},"value":"Invalid proof"},"src":"13466:42:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2194,"nodeType":"ExpressionStatement","src":"13466:42:6"},{"id":2195,"nodeType":"Continue","src":"13526:8:6"}]}},{"clauses":[{"block":{"id":2229,"nodeType":"Block","src":"13676:104:6","statements":[{"expression":{"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13694:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13701:15:6","memberName":"successfulSwaps","nodeType":"MemberAccess","referencedDeclaration":1589,"src":"13694:22:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2220,"indexExpression":{"id":2218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13717:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13694:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13722:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13694:32:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"ExpressionStatement","src":"13694:32:6"},{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13744:21:6","subExpression":{"expression":{"id":2224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13744:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13751:12:6","memberName":"successCount","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"13744:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2228,"nodeType":"ExpressionStatement","src":"13744:21:6"}]},"errorName":"","id":2230,"nodeType":"TryCatchClause","parameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2230,"src":"13667:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"13667:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13666:9:6"},"src":"13658:122:6"},{"block":{"id":2250,"nodeType":"Block","src":"13815:117:6","statements":[{"expression":{"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13833:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13840:15:6","memberName":"successfulSwaps","nodeType":"MemberAccess","referencedDeclaration":1589,"src":"13833:22:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2238,"indexExpression":{"id":2236,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13856:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13833:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13861:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13833:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2241,"nodeType":"ExpressionStatement","src":"13833:33:6"},{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"13884:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13891:14:6","memberName":"failureReasons","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"13884:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2246,"indexExpression":{"id":2244,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13906:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13884:24:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2247,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"13911:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"13884:33:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2249,"nodeType":"ExpressionStatement","src":"13884:33:6"}]},"errorName":"Error","id":2251,"nodeType":"TryCatchClause","parameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"reason","nameLocation":"13807:6:6","nodeType":"VariableDeclaration","scope":2251,"src":"13793:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2231,"name":"string","nodeType":"ElementaryTypeName","src":"13793:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13792:22:6"},"src":"13781:151:6"}],"externalCall":{"arguments":[{"baseExpression":{"id":2200,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"13596:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2202,"indexExpression":{"id":2201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13602:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13596:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2203,"name":"ethToTokenFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"13606:15:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2205,"indexExpression":{"id":2204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13622:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13606:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"baseExpression":{"id":2206,"name":"amountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"13626:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2208,"indexExpression":{"id":2207,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13636:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13626:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2209,"name":"minAmountsOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"13640:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2211,"indexExpression":{"id":2210,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"13654:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13640:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2198,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13579:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SequencedAMM_$2804","typeString":"contract SequencedAMM"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13584:11:6","memberName":"executeSwap","nodeType":"MemberAccess","referencedDeclaration":2419,"src":"13579:16:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,bool,uint256,uint256) external returns (uint256)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13579:78:6","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2252,"nodeType":"TryStatement","src":"13575:357:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2129,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12711:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2130,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12715:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12721:6:6","memberName":"length","nodeType":"MemberAccess","src":"12715:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12711:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2254,"initializationExpression":{"assignments":[2126],"declarations":[{"constant":false,"id":2126,"mutability":"mutable","name":"i","nameLocation":"12704:1:6","nodeType":"VariableDeclaration","scope":2254,"src":"12699:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2125,"name":"uint","nodeType":"ElementaryTypeName","src":"12699:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2128,"initialValue":{"hexValue":"30","id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12708:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12699:10:6"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12729:3:6","subExpression":{"id":2133,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"12729:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"12729:3:6"},"nodeType":"ForStatement","src":"12694:1248:6"},{"expression":{"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"lastBatchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"13999:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2256,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14020:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14026:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"14020:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13999:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2259,"nodeType":"ExpressionStatement","src":"13999:36:6"},{"eventCall":{"arguments":[{"id":2261,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"14077:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2262,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"14086:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14092:6:6","memberName":"length","nodeType":"MemberAccess","src":"14086:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"14100:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2265,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14107:12:6","memberName":"successCount","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"14100:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2260,"name":"BatchSwapExecuted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"14059:17:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14059:61:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2267,"nodeType":"EmitStatement","src":"14054:66:6"}]},"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"10822:985:6","text":" @dev Second step of the commit-reveal pattern - sequencer reveals and executes the batch\n @param batchId The ID of the batch to execute\n @param users Array of user addresses for each swap\n @param ethToTokenFlags Array of swap directions (true = ETH to token)\n @param amountsIn Array of input amounts for each swap\n @param minAmountsOut Array of minimum output amounts (slippage protection)\n @param proofs Array of Merkle proofs verifying each swap was in the committed batch\n \n This function:\n 1. Verifies the mandatory waiting period has passed\n 2. For each swap, verifies its inclusion in the original commitment using Merkle proofs\n 3. Executes valid swaps and tracks success/failure\n 4. Updates the last batch timestamp for the emergency timeout mechanism\n \n The commit-reveal delay prevents the sequencer from inserting advantageous trades\n after seeing market movements."},"functionSelector":"6868bab5","id":2269,"implemented":true,"kind":"function","modifiers":[{"id":2063,"kind":"modifierInvocation","modifierName":{"id":2062,"name":"onlySequencer","nameLocations":["12063:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":1637,"src":"12063:13:6"},"nodeType":"ModifierInvocation","src":"12063:13:6"},{"id":2065,"kind":"modifierInvocation","modifierName":{"id":2064,"name":"nonReentrant","nameLocations":["12077:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"12077:12:6"},"nodeType":"ModifierInvocation","src":"12077:12:6"}],"name":"batchSwap","nameLocation":"11821:9:6","nodeType":"FunctionDefinition","parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"batchId","nameLocation":"11848:7:6","nodeType":"VariableDeclaration","scope":2269,"src":"11840:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"11840:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"users","nameLocation":"11884:5:6","nodeType":"VariableDeclaration","scope":2269,"src":"11865:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"11865:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2046,"nodeType":"ArrayTypeName","src":"11865:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2050,"mutability":"mutable","name":"ethToTokenFlags","nameLocation":"11915:15:6","nodeType":"VariableDeclaration","scope":2269,"src":"11899:31:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2048,"name":"bool","nodeType":"ElementaryTypeName","src":"11899:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2049,"nodeType":"ArrayTypeName","src":"11899:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"amountsIn","nameLocation":"11959:9:6","nodeType":"VariableDeclaration","scope":2269,"src":"11940:28:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"11940:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2052,"nodeType":"ArrayTypeName","src":"11940:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"minAmountsOut","nameLocation":"11997:13:6","nodeType":"VariableDeclaration","scope":2269,"src":"11978:32:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"11978:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2055,"nodeType":"ArrayTypeName","src":"11978:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"proofs","nameLocation":"12041:6:6","nodeType":"VariableDeclaration","scope":2269,"src":"12020:27:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes32[][]"},"typeName":{"baseType":{"baseType":{"id":2057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12020:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2058,"nodeType":"ArrayTypeName","src":"12020:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"id":2059,"nodeType":"ArrayTypeName","src":"12020:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr","typeString":"bytes32[][]"}},"visibility":"internal"}],"src":"11830:223:6"},"returnParameters":{"id":2066,"nodeType":"ParameterList","parameters":[],"src":"12090:0:6"},"scope":2804,"src":"11812:2315:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2418,"nodeType":"Block","src":"15143:1604:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2284,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15161:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15165:6:6","memberName":"sender","nodeType":"MemberAccess","src":"15161:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2288,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15183:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SequencedAMM_$2804","typeString":"contract SequencedAMM"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SequencedAMM_$2804","typeString":"contract SequencedAMM"}],"id":2287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15175:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2286,"name":"address","nodeType":"ElementaryTypeName","src":"15175:7:6","typeDescriptions":{}}},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15175:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15161:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c6520696e7465726e616c6c79","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15190:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9910df40a0b8994c6b04ed2bcc997c359cbb5de2dce9ef3726c2a55fa68ba22","typeString":"literal_string \"Only callable internally\""},"value":"Only callable internally"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c9910df40a0b8994c6b04ed2bcc997c359cbb5de2dce9ef3726c2a55fa68ba22","typeString":"literal_string \"Only callable internally\""}],"id":2283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15153:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15153:64:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"15153:64:6"},{"condition":{"id":2294,"name":"ethToToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"15240:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2414,"nodeType":"Block","src":"15980:726:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2356,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"16002:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2358,"indexExpression":{"id":2357,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"16016:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16002:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2359,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"16025:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16002:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16035:28:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""},"value":"Insufficient token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""}],"id":2355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15994:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15994:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2363,"nodeType":"ExpressionStatement","src":"15994:70:6"},{"assignments":[2365],"declarations":[{"constant":false,"id":2365,"mutability":"mutable","name":"amountInWithFee","nameLocation":"16166:15:6","nodeType":"VariableDeclaration","scope":2414,"src":"16158:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"16158:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2372,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"16184:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"16196:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2368,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"16214:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16196:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2370,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16195:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16184:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16158:64:6"},{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2373,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"16236:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"16249:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2375,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"16262:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16249:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2377,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16248:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"16307:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2379,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"16322:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16307:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2381,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"16340:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16307:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2383,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16306:50:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16248:108:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16236:120:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"16236:120:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"16391:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2389,"name":"minAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"16404:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16391:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c69707061676520746f6f2068696768","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16418:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""},"value":"Slippage too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""}],"id":2387,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"16383:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16383:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2393,"nodeType":"ExpressionStatement","src":"16383:55:6"},{"expression":{"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2394,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"16501:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2396,"indexExpression":{"id":2395,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"16515:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16501:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2397,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"16524:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16501:31:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2399,"nodeType":"ExpressionStatement","src":"16501:31:6"},{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2400,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"16546:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2402,"indexExpression":{"id":2401,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"16558:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16546:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2403,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"16567:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16546:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2405,"nodeType":"ExpressionStatement","src":"16546:30:6"},{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2406,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"16634:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2407,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"16650:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16634:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"16634:24:6"},{"expression":{"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2410,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"16672:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2411,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"16686:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16672:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2413,"nodeType":"ExpressionStatement","src":"16672:23:6"}]},"id":2415,"nodeType":"IfStatement","src":"15236:1470:6","trueBody":{"id":2354,"nodeType":"Block","src":"15252:722:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2296,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"15274:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2298,"indexExpression":{"id":2297,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"15286:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15274:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2299,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"15295:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15274:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74204554482062616c616e6365","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15305:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""},"value":"Insufficient ETH balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""}],"id":2295,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15266:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15266:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2303,"nodeType":"ExpressionStatement","src":"15266:66:6"},{"assignments":[2305],"declarations":[{"constant":false,"id":2305,"mutability":"mutable","name":"amountInWithFee","nameLocation":"15434:15:6","nodeType":"VariableDeclaration","scope":2354,"src":"15426:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"15426:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2312,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2306,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"15452:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2307,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"15464:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2308,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"15482:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15464:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2310,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15463:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15452:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15426:64:6"},{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"15504:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"15517:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2315,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"15532:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15517:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15516:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2318,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"15577:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2319,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"15590:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15577:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2321,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"15608:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15577:46:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15576:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15516:108:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15504:120:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"15504:120:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2328,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"15659:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2329,"name":"minAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"15672:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15659:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c69707061676520746f6f2068696768","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15686:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""},"value":"Slippage too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""}],"id":2327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15651:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15651:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2333,"nodeType":"ExpressionStatement","src":"15651:55:6"},{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2334,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"15769:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2336,"indexExpression":{"id":2335,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"15781:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15769:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2337,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"15790:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15769:29:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ExpressionStatement","src":"15769:29:6"},{"expression":{"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2340,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"15812:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2342,"indexExpression":{"id":2341,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"15826:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15812:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2343,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"15835:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15812:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2345,"nodeType":"ExpressionStatement","src":"15812:32:6"},{"expression":{"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2346,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"15902:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2347,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"15916:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15902:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2349,"nodeType":"ExpressionStatement","src":"15902:22:6"},{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2350,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"15938:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2351,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"15954:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15938:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"15938:25:6"}]}},{"expression":{"id":2416,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"16731:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2282,"id":2417,"nodeType":"Return","src":"16724:16:6"}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"14133:837:6","text":" @dev Internal function to execute a single swap (called by batchSwap)\n @param user Address of the user performing the swap\n @param ethToToken Direction of the swap (true = ETH to token, false = token to ETH)\n @param amountIn Amount of input asset to swap\n @param minAmountOut Minimum acceptable output amount (slippage protection)\n @return amountOut The amount of output asset received\n \n This function:\n 1. Checks the user has sufficient balance\n 2. Calculates the output amount using the constant product formula (x*y=k)\n 3. Applies the swap fee\n 4. Checks against the minimum output amount (slippage protection)\n 5. Updates user balances and pool reserves\n \n It can only be called by the contract itself as part of batch execution."},"functionSelector":"4db484e2","id":2419,"implemented":true,"kind":"function","modifiers":[],"name":"executeSwap","nameLocation":"14984:11:6","nodeType":"FunctionDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"user","nameLocation":"15013:4:6","nodeType":"VariableDeclaration","scope":2419,"src":"15005:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"15005:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"ethToToken","nameLocation":"15032:10:6","nodeType":"VariableDeclaration","scope":2419,"src":"15027:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2273,"name":"bool","nodeType":"ElementaryTypeName","src":"15027:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2276,"mutability":"mutable","name":"amountIn","nameLocation":"15060:8:6","nodeType":"VariableDeclaration","scope":2419,"src":"15052:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2275,"name":"uint256","nodeType":"ElementaryTypeName","src":"15052:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"minAmountOut","nameLocation":"15087:12:6","nodeType":"VariableDeclaration","scope":2419,"src":"15079:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"15079:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14995:110:6"},"returnParameters":{"id":2282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"amountOut","nameLocation":"15132:9:6","nodeType":"VariableDeclaration","scope":2419,"src":"15124:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"15124:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15123:19:6"},"scope":2804,"src":"14975:1772:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2467,"nodeType":"Block","src":"17564:453:6","statements":[{"assignments":[2440],"declarations":[{"constant":false,"id":2440,"mutability":"mutable","name":"intent","nameLocation":"17592:6:6","nodeType":"VariableDeclaration","scope":2467,"src":"17574:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent"},"typeName":{"id":2439,"nodeType":"UserDefinedTypeName","pathNode":{"id":2438,"name":"SwapIntent","nameLocations":["17574:10:6"],"nodeType":"IdentifierPath","referencedDeclaration":1567,"src":"17574:10:6"},"referencedDeclaration":1567,"src":"17574:10:6","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_storage_ptr","typeString":"struct SequencedAMM.SwapIntent"}},"visibility":"internal"}],"id":2448,"initialValue":{"arguments":[{"id":2442,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"17632:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2443,"name":"ethToToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"17662:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2444,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"17696:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2445,"name":"minAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"17732:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17769:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2441,"name":"SwapIntent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"17601:10:6","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_SwapIntent_$1567_storage_ptr_$","typeString":"type(struct SequencedAMM.SwapIntent storage pointer)"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["17626:4:6","17650:10:6","17686:8:6","17718:12:6","17758:9:6"],"names":["user","ethToToken","amountIn","minAmountOut","timestamp"],"nodeType":"FunctionCall","src":"17601:216:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}},"nodeType":"VariableDeclarationStatement","src":"17574:243:6"},{"assignments":[2450],"declarations":[{"constant":false,"id":2450,"mutability":"mutable","name":"leaf","nameLocation":"17844:4:6","nodeType":"VariableDeclaration","scope":2467,"src":"17836:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17836:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2457,"initialValue":{"arguments":[{"arguments":[{"id":2454,"name":"intent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"17872:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SwapIntent_$1567_memory_ptr","typeString":"struct SequencedAMM.SwapIntent memory"}],"expression":{"id":2452,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"17861:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17865:6:6","memberName":"encode","nodeType":"MemberAccess","src":"17861:10:6","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17861:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2451,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"17851:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17851:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"17836:44:6"},{"expression":{"arguments":[{"id":2460,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"17938:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"baseExpression":{"id":2461,"name":"batchIntentRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"17957:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":2463,"indexExpression":{"id":2462,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"17974:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17957:25:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2464,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"17996:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2458,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"17906:11:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1437_$","typeString":"type(library MerkleProof)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17918:6:6","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":393,"src":"17906:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17906:104:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2437,"id":2466,"nodeType":"Return","src":"17899:111:6"}]},"documentation":{"id":2420,"nodeType":"StructuredDocumentation","src":"16753:580:6","text":" @dev Allows users to verify their swap was included in a particular batch\n @param batchId The batch ID to check\n @param user The user address of the swap\n @param ethToToken The direction of the swap\n @param amountIn The input amount\n @param minAmountOut The minimum output amount\n @param proof The Merkle proof to verify\n @return bool Whether the swap was included in the batch\n \n This function enables users to independently verify that their swap\n was correctly included in a batch by the sequencer."},"functionSelector":"cb29fdc7","id":2468,"implemented":true,"kind":"function","modifiers":[],"name":"verifySwapInclusion","nameLocation":"17347:19:6","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"batchId","nameLocation":"17384:7:6","nodeType":"VariableDeclaration","scope":2468,"src":"17376:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2421,"name":"uint256","nodeType":"ElementaryTypeName","src":"17376:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2424,"mutability":"mutable","name":"user","nameLocation":"17409:4:6","nodeType":"VariableDeclaration","scope":2468,"src":"17401:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2423,"name":"address","nodeType":"ElementaryTypeName","src":"17401:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2426,"mutability":"mutable","name":"ethToToken","nameLocation":"17428:10:6","nodeType":"VariableDeclaration","scope":2468,"src":"17423:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2425,"name":"bool","nodeType":"ElementaryTypeName","src":"17423:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"amountIn","nameLocation":"17456:8:6","nodeType":"VariableDeclaration","scope":2468,"src":"17448:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"17448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2430,"mutability":"mutable","name":"minAmountOut","nameLocation":"17482:12:6","nodeType":"VariableDeclaration","scope":2468,"src":"17474:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2429,"name":"uint256","nodeType":"ElementaryTypeName","src":"17474:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2433,"mutability":"mutable","name":"proof","nameLocation":"17523:5:6","nodeType":"VariableDeclaration","scope":2468,"src":"17504:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17504:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2432,"nodeType":"ArrayTypeName","src":"17504:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17366:168:6"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2468,"src":"17558:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2435,"name":"bool","nodeType":"ElementaryTypeName","src":"17558:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17557:6:6"},"scope":2804,"src":"17338:679:6","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2497,"nodeType":"Block","src":"18595:153:6","statements":[{"assignments":[2482],"declarations":[{"constant":false,"id":2482,"mutability":"mutable","name":"result","nameLocation":"18625:6:6","nodeType":"VariableDeclaration","scope":2497,"src":"18605:26:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult"},"typeName":{"id":2481,"nodeType":"UserDefinedTypeName","pathNode":{"id":2480,"name":"BatchResult","nameLocations":["18605:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"18605:11:6"},"referencedDeclaration":1594,"src":"18605:11:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult"}},"visibility":"internal"}],"id":2486,"initialValue":{"baseExpression":{"id":2483,"name":"batchResults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"18634:12:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_BatchResult_$1594_storage_$","typeString":"mapping(uint256 => struct SequencedAMM.BatchResult storage ref)"}},"id":2485,"indexExpression":{"id":2484,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"18647:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18634:21:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage","typeString":"struct SequencedAMM.BatchResult storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18605:50:6"},{"expression":{"components":[{"baseExpression":{"expression":{"id":2487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"18673:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18680:15:6","memberName":"successfulSwaps","nodeType":"MemberAccess","referencedDeclaration":1589,"src":"18673:22:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2490,"indexExpression":{"id":2489,"name":"swapIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"18696:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18673:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"baseExpression":{"expression":{"id":2491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"18708:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_BatchResult_$1594_storage_ptr","typeString":"struct SequencedAMM.BatchResult storage pointer"}},"id":2492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18715:14:6","memberName":"failureReasons","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"18708:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2494,"indexExpression":{"id":2493,"name":"swapIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"18730:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18708:32:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"id":2495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18672:69:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_string_storage_$","typeString":"tuple(bool,string storage ref)"}},"functionReturnParameters":2479,"id":2496,"nodeType":"Return","src":"18665:76:6"}]},"documentation":{"id":2469,"nodeType":"StructuredDocumentation","src":"18027:429:6","text":" @dev Retrieves the result of a specific swap in a batch\n @param batchId The batch ID to query\n @param swapIndex The index of the swap in the batch\n @return success Whether the swap was successful\n @return failureReason If unsuccessful, the reason for failure\n \n This function allows users to check if their swap was executed\n successfully and why it might have failed."},"functionSelector":"b0b9b66a","id":2498,"implemented":true,"kind":"function","modifiers":[],"name":"getSwapResult","nameLocation":"18470:13:6","nodeType":"FunctionDefinition","parameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2471,"mutability":"mutable","name":"batchId","nameLocation":"18492:7:6","nodeType":"VariableDeclaration","scope":2498,"src":"18484:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2470,"name":"uint256","nodeType":"ElementaryTypeName","src":"18484:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2473,"mutability":"mutable","name":"swapIndex","nameLocation":"18509:9:6","nodeType":"VariableDeclaration","scope":2498,"src":"18501:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"18501:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18483:36:6"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"success","nameLocation":"18557:7:6","nodeType":"VariableDeclaration","scope":2498,"src":"18552:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2475,"name":"bool","nodeType":"ElementaryTypeName","src":"18552:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"failureReason","nameLocation":"18580:13:6","nodeType":"VariableDeclaration","scope":2498,"src":"18566:27:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2477,"name":"string","nodeType":"ElementaryTypeName","src":"18566:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"18551:43:6"},"scope":2804,"src":"18461:287:6","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2656,"nodeType":"Block","src":"19558:1699:6","statements":[{"expression":{"arguments":[{"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"19576:14:6","subExpression":{"id":2513,"name":"sequencerOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"19577:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"446972656374207377617073206e6f7420616c6c6f776564","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19592:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_1036a8f437921e47ad5e0ff82e6dc7458ab13b56d8682e8d68b01f448586265a","typeString":"literal_string \"Direct swaps not allowed\""},"value":"Direct swaps not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1036a8f437921e47ad5e0ff82e6dc7458ab13b56d8682e8d68b01f448586265a","typeString":"literal_string \"Direct swaps not allowed\""}],"id":2512,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"19568:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19568:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2517,"nodeType":"ExpressionStatement","src":"19568:51:6"},{"condition":{"id":2518,"name":"ethToToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"19642:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2644,"nodeType":"Block","src":"20400:744:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2583,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"20422:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2586,"indexExpression":{"expression":{"id":2584,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20436:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20440:6:6","memberName":"sender","nodeType":"MemberAccess","src":"20436:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20422:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2587,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"20451:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20422:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20461:28:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""},"value":"Insufficient token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""}],"id":2582,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"20414:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20414:76:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2591,"nodeType":"ExpressionStatement","src":"20414:76:6"},{"assignments":[2593],"declarations":[{"constant":false,"id":2593,"mutability":"mutable","name":"amountInWithFee","nameLocation":"20592:15:6","nodeType":"VariableDeclaration","scope":2644,"src":"20584:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"20584:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"20610:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2595,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"20622:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2596,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"20640:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20622:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2598,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20621:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20610:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20584:64:6"},{"expression":{"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2601,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"20662:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2602,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"20675:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2603,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"20688:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20675:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2605,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20674:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"20733:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2607,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"20748:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20733:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2609,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"20766:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20733:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2611,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20732:50:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20674:108:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20662:120:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2614,"nodeType":"ExpressionStatement","src":"20662:120:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2616,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"20817:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2617,"name":"minAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"20830:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20817:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c69707061676520746f6f2068696768","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20844:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""},"value":"Slippage too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""}],"id":2615,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"20809:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20809:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2621,"nodeType":"ExpressionStatement","src":"20809:55:6"},{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2622,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"20927:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2625,"indexExpression":{"expression":{"id":2623,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20941:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20945:6:6","memberName":"sender","nodeType":"MemberAccess","src":"20941:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20927:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2626,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"20956:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20927:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2628,"nodeType":"ExpressionStatement","src":"20927:37:6"},{"expression":{"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2629,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"20978:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2632,"indexExpression":{"expression":{"id":2630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20990:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20994:6:6","memberName":"sender","nodeType":"MemberAccess","src":"20990:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20978:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2633,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"21005:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20978:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2635,"nodeType":"ExpressionStatement","src":"20978:36:6"},{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2636,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"21072:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2637,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"21088:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21072:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"21072:24:6"},{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2640,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"21110:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2641,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"21124:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21110:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"21110:23:6"}]},"id":2645,"nodeType":"IfStatement","src":"19638:1506:6","trueBody":{"id":2581,"nodeType":"Block","src":"19654:740:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2520,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"19676:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2523,"indexExpression":{"expression":{"id":2521,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19688:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19692:6:6","memberName":"sender","nodeType":"MemberAccess","src":"19688:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19676:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2524,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"19703:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19676:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74204554482062616c616e6365","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19713:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""},"value":"Insufficient ETH balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70ee5ddf30f34aa4e2eb2bd0652d4a9466378abefb991f116e502fdb578d384e","typeString":"literal_string \"Insufficient ETH balance\""}],"id":2519,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"19668:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19668:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2528,"nodeType":"ExpressionStatement","src":"19668:72:6"},{"assignments":[2530],"declarations":[{"constant":false,"id":2530,"mutability":"mutable","name":"amountInWithFee","nameLocation":"19842:15:6","nodeType":"VariableDeclaration","scope":2581,"src":"19834:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"19834:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2537,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"19860:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2532,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"19872:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2533,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"19890:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19872:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2535,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19871:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19860:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19834:64:6"},{"expression":{"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2538,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"19912:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2539,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"19925:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2540,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"19940:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19925:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19924:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"19985:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2544,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"19998:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19985:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2546,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"20016:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19985:46:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19984:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19924:108:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19912:120:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2551,"nodeType":"ExpressionStatement","src":"19912:120:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"20067:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2554,"name":"minAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"20080:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20067:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c69707061676520746f6f2068696768","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20094:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""},"value":"Slippage too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a86e69a466710f7cd7b4fb45698efeb7621db06508eb8ce01e2139f051412eb","typeString":"literal_string \"Slippage too high\""}],"id":2552,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"20059:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20059:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2558,"nodeType":"ExpressionStatement","src":"20059:55:6"},{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2559,"name":"ethBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"20177:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2562,"indexExpression":{"expression":{"id":2560,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20189:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20193:6:6","memberName":"sender","nodeType":"MemberAccess","src":"20189:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20177:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2563,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"20204:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20177:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"20177:35:6"},{"expression":{"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2566,"name":"tokenBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"20226:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2569,"indexExpression":{"expression":{"id":2567,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20240:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20244:6:6","memberName":"sender","nodeType":"MemberAccess","src":"20240:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20226:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2570,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"20255:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20226:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2572,"nodeType":"ExpressionStatement","src":"20226:38:6"},{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"20322:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2574,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"20336:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20322:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"20322:22:6"},{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"20358:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2578,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"20374:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20358:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"20358:25:6"}]}},{"eventCall":{"arguments":[{"expression":{"id":2647,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"21180:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21184:6:6","memberName":"sender","nodeType":"MemberAccess","src":"21180:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2649,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"21192:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2650,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"21202:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2651,"name":"ethToToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"21213:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2646,"name":"FallbackSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"21167:12:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,uint256,bool)"}},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21167:57:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2653,"nodeType":"EmitStatement","src":"21162:62:6"},{"expression":{"id":2654,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"21241:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2511,"id":2655,"nodeType":"Return","src":"21234:16:6"}]},"documentation":{"id":2499,"nodeType":"StructuredDocumentation","src":"18758:636:6","text":" @dev Fallback swap mechanism for when sequencer mode is disabled\n @param ethToToken Direction of the swap\n @param amountIn Amount of input asset to swap\n @param minAmountOut Minimum acceptable output amount\n @return amountOut The amount of output asset received\n \n This function allows direct swaps when:\n 1. The sequencer is intentionally disabled by the owner\n 2. The emergency timeout has triggered due to sequencer inactivity\n \n It uses the same swap logic as batch swaps but can be called directly by users.\n Protected against reentrancy attacks."},"functionSelector":"d5e10708","id":2657,"implemented":true,"kind":"function","modifiers":[{"id":2508,"kind":"modifierInvocation","modifierName":{"id":2507,"name":"nonReentrant","nameLocations":["19517:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":288,"src":"19517:12:6"},"nodeType":"ModifierInvocation","src":"19517:12:6"}],"name":"fallbackSwap","nameLocation":"19408:12:6","nodeType":"FunctionDefinition","parameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"ethToToken","nameLocation":"19435:10:6","nodeType":"VariableDeclaration","scope":2657,"src":"19430:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2500,"name":"bool","nodeType":"ElementaryTypeName","src":"19430:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"amountIn","nameLocation":"19463:8:6","nodeType":"VariableDeclaration","scope":2657,"src":"19455:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"19455:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2505,"mutability":"mutable","name":"minAmountOut","nameLocation":"19489:12:6","nodeType":"VariableDeclaration","scope":2657,"src":"19481:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2504,"name":"uint256","nodeType":"ElementaryTypeName","src":"19481:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19420:87:6"},"returnParameters":{"id":2511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2510,"mutability":"mutable","name":"amountOut","nameLocation":"19547:9:6","nodeType":"VariableDeclaration","scope":2657,"src":"19539:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2509,"name":"uint256","nodeType":"ElementaryTypeName","src":"19539:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19538:19:6"},"scope":2804,"src":"19399:1858:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2704,"nodeType":"Block","src":"21770:391:6","statements":[{"assignments":[2668],"declarations":[{"constant":false,"id":2668,"mutability":"mutable","name":"amountInWithFee","nameLocation":"21788:15:6","nodeType":"VariableDeclaration","scope":2704,"src":"21780:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2667,"name":"uint256","nodeType":"ElementaryTypeName","src":"21780:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2675,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2669,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"21806:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2670,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"21818:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2671,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"21836:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21818:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2673,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21817:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21806:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21780:64:6"},{"condition":{"id":2676,"name":"ethToToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"21867:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2702,"nodeType":"Block","src":"22020:135:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"22042:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2691,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"22055:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22042:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2693,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22041:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"22095:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2695,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"22110:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22095:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2697,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"22128:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22095:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2699,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22094:50:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22041:103:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2666,"id":2701,"nodeType":"Return","src":"22034:110:6"}]},"id":2703,"nodeType":"IfStatement","src":"21863:292:6","trueBody":{"id":2689,"nodeType":"Block","src":"21879:135:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2677,"name":"tokenReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"21901:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2678,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"21916:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21901:30:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2680,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21900:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2681,"name":"ethReserve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"21956:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2682,"name":"FEE_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"21969:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21956:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2684,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"21987:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21956:46:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21955:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21900:103:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2666,"id":2688,"nodeType":"Return","src":"21893:110:6"}]}}]},"documentation":{"id":2658,"nodeType":"StructuredDocumentation","src":"21267:409:6","text":" @dev Calculates the expected output amount for a given input\n @param ethToToken Direction of the swap\n @param amountIn Amount of input asset\n @return The expected output amount (before slippage)\n \n This view function allows users to get a price quote without executing a swap.\n It uses the same constant product formula and fee structure as actual swaps."},"functionSelector":"8290d9b8","id":2705,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nameLocation":"21690:12:6","nodeType":"FunctionDefinition","parameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"ethToToken","nameLocation":"21708:10:6","nodeType":"VariableDeclaration","scope":2705,"src":"21703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2659,"name":"bool","nodeType":"ElementaryTypeName","src":"21703:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"amountIn","nameLocation":"21728:8:6","nodeType":"VariableDeclaration","scope":2705,"src":"21720:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"21720:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21702:35:6"},"returnParameters":{"id":2666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2705,"src":"21761:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"21761:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21760:9:6"},"scope":2804,"src":"21681:480:6","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2722,"nodeType":"Block","src":"22397:97:6","statements":[{"eventCall":{"arguments":[{"id":2714,"name":"sequencer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"22429:9:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2715,"name":"newSequencer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"22440:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2713,"name":"SequencerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"22412:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22412:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2717,"nodeType":"EmitStatement","src":"22407:46:6"},{"expression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"sequencer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"22463:9:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2719,"name":"newSequencer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"22475:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22463:24:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2721,"nodeType":"ExpressionStatement","src":"22463:24:6"}]},"documentation":{"id":2706,"nodeType":"StructuredDocumentation","src":"22171:158:6","text":" @dev Sets the sequencer address\n @param newSequencer Address of the new sequencer\n \n Only callable by the contract owner."},"functionSelector":"2547fa3e","id":2723,"implemented":true,"kind":"function","modifiers":[{"id":2711,"kind":"modifierInvocation","modifierName":{"id":2710,"name":"onlyOwner","nameLocations":["22387:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"22387:9:6"},"nodeType":"ModifierInvocation","src":"22387:9:6"}],"name":"setSequencer","nameLocation":"22343:12:6","nodeType":"FunctionDefinition","parameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"newSequencer","nameLocation":"22364:12:6","nodeType":"VariableDeclaration","scope":2723,"src":"22356:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2707,"name":"address","nodeType":"ElementaryTypeName","src":"22356:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22355:22:6"},"returnParameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"22397:0:6"},"scope":2804,"src":"22334:160:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2739,"nodeType":"Block","src":"22915:98:6","statements":[{"expression":{"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2731,"name":"sequencerOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"22925:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2732,"name":"_sequencerOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"22941:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22925:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2734,"nodeType":"ExpressionStatement","src":"22925:30:6"},{"eventCall":{"arguments":[{"id":2736,"name":"_sequencerOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"22991:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2735,"name":"SequencerModeChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"22970:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22970:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"EmitStatement","src":"22965:41:6"}]},"documentation":{"id":2724,"nodeType":"StructuredDocumentation","src":"22504:340:6","text":" @dev Enables or disables sequencer-only mode\n @param _sequencerOnly Whether to allow only the sequencer to execute swaps\n \n When true, only batch swaps through the sequencer are allowed.\n When false, direct swaps through fallbackSwap are also permitted.\n Only callable by the contract owner."},"functionSelector":"c901510b","id":2740,"implemented":true,"kind":"function","modifiers":[{"id":2729,"kind":"modifierInvocation","modifierName":{"id":2728,"name":"onlyOwner","nameLocations":["22905:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"22905:9:6"},"nodeType":"ModifierInvocation","src":"22905:9:6"}],"name":"setSequencerOnly","nameLocation":"22858:16:6","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"_sequencerOnly","nameLocation":"22880:14:6","nodeType":"VariableDeclaration","scope":2740,"src":"22875:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2725,"name":"bool","nodeType":"ElementaryTypeName","src":"22875:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22874:21:6"},"returnParameters":{"id":2730,"nodeType":"ParameterList","parameters":[],"src":"22915:0:6"},"scope":2804,"src":"22849:164:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2759,"nodeType":"Block","src":"23296:94:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"_feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"23314:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3530","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23326:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"23314:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46656520746f6f2068696768","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23330:14:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""},"value":"Fee too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""}],"id":2748,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"23306:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23306:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2754,"nodeType":"ExpressionStatement","src":"23306:39:6"},{"expression":{"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2755,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"23365:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2756,"name":"_feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"23375:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23365:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2758,"nodeType":"ExpressionStatement","src":"23365:18:6"}]},"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"23023:211:6","text":" @dev Sets the fee rate for swaps\n @param _feeRate New fee rate (in parts per 1000)\n \n For example, a value of 3 equals a 0.3% fee.\n Only callable by the contract owner."},"functionSelector":"45596e2e","id":2760,"implemented":true,"kind":"function","modifiers":[{"id":2746,"kind":"modifierInvocation","modifierName":{"id":2745,"name":"onlyOwner","nameLocations":["23286:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"23286:9:6"},"nodeType":"ModifierInvocation","src":"23286:9:6"}],"name":"setFeeRate","nameLocation":"23248:10:6","nodeType":"FunctionDefinition","parameters":{"id":2744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"_feeRate","nameLocation":"23267:8:6","nodeType":"VariableDeclaration","scope":2760,"src":"23259:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"23259:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23258:18:6"},"returnParameters":{"id":2747,"nodeType":"ParameterList","parameters":[],"src":"23296:0:6"},"scope":2804,"src":"23239:151:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2779,"nodeType":"Block","src":"23635:97:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2769,"name":"_delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"23653:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23663:7:6","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"23653:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44656c617920746f6f206c6f6e67","id":2772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23672:16:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_bf58a3f4f4878719bce24746f213876fed76b17067041b1a1eac3575dcd3260d","typeString":"literal_string \"Delay too long\""},"value":"Delay too long"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bf58a3f4f4878719bce24746f213876fed76b17067041b1a1eac3575dcd3260d","typeString":"literal_string \"Delay too long\""}],"id":2768,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"23645:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23645:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2774,"nodeType":"ExpressionStatement","src":"23645:44:6"},{"expression":{"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2775,"name":"commitRevealDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"23699:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2776,"name":"_delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"23719:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23699:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2778,"nodeType":"ExpressionStatement","src":"23699:26:6"}]},"documentation":{"id":2761,"nodeType":"StructuredDocumentation","src":"23400:165:6","text":" @dev Sets the delay between commit and reveal phases\n @param _delay New delay in seconds\n \n Only callable by the contract owner."},"functionSelector":"6b27e2bb","id":2780,"implemented":true,"kind":"function","modifiers":[{"id":2766,"kind":"modifierInvocation","modifierName":{"id":2765,"name":"onlyOwner","nameLocations":["23625:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"23625:9:6"},"nodeType":"ModifierInvocation","src":"23625:9:6"}],"name":"setCommitRevealDelay","nameLocation":"23579:20:6","nodeType":"FunctionDefinition","parameters":{"id":2764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"_delay","nameLocation":"23608:6:6","nodeType":"VariableDeclaration","scope":2780,"src":"23600:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"23600:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23599:16:6"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[],"src":"23635:0:6"},"scope":2804,"src":"23570:162:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2802,"nodeType":"Block","src":"24200:226:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2785,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"24231:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24237:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"24231:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2787,"name":"lastBatchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"24249:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2788,"name":"maxBatchDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"24270:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24249:34:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24231:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53657175656e636572206e6f7420636f6e7369646572656420696e61637469766520796574","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24297:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8ac69055f659c8c914b89d5cbb155764ad2a413db682ebbaa7d579db38c72d6","typeString":"literal_string \"Sequencer not considered inactive yet\""},"value":"Sequencer not considered inactive yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8ac69055f659c8c914b89d5cbb155764ad2a413db682ebbaa7d579db38c72d6","typeString":"literal_string \"Sequencer not considered inactive yet\""}],"id":2784,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"24210:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24210:136:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2793,"nodeType":"ExpressionStatement","src":"24210:136:6"},{"expression":{"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2794,"name":"sequencerOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"24356:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"24372:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"24356:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2797,"nodeType":"ExpressionStatement","src":"24356:21:6"},{"eventCall":{"arguments":[{"hexValue":"66616c7365","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"24413:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2798,"name":"SequencerModeChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"24392:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24392:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2801,"nodeType":"EmitStatement","src":"24387:32:6"}]},"documentation":{"id":2781,"nodeType":"StructuredDocumentation","src":"23742:407:6","text":" @dev Emergency function to disable sequencer-only mode if the sequencer is inactive\n \n This can be called by anyone if the sequencer hasn't submitted a batch\n for longer than maxBatchDelay. It automatically enables fallback mode,\n allowing users to execute swaps directly.\n \n This prevents funds from being trapped if the sequencer becomes unavailable."},"functionSelector":"a03fd9c2","id":2803,"implemented":true,"kind":"function","modifiers":[],"name":"emergencyDisableSequencer","nameLocation":"24163:25:6","nodeType":"FunctionDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[],"src":"24188:2:6"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[],"src":"24200:0:6"},"scope":2804,"src":"24154:272:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2805,"src":"1285:23143:6","usedErrors":[13,18,269],"usedEvents":[24,1489,1497,1503,1513,1519,1523,1531,1539,1547,1555]}],"src":"32:24396:6"},"id":6},"contracts/YourAMM.sol":{"ast":{"absolutePath":"contracts/YourAMM.sol","exportedSymbols":{"YourAMM":[2837]},"id":2838,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2806,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"39:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"YourAMM","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2837,"linearizedBaseContracts":[2837],"name":"YourAMM","nameLocation":"74:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":2809,"nodeType":"Block","src":"147:2:7","statements":[]},"functionSelector":"f6326fb3","id":2810,"implemented":true,"kind":"function","modifiers":[],"name":"depositETH","nameLocation":"117:10:7","nodeType":"FunctionDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[],"src":"127:2:7"},"returnParameters":{"id":2808,"nodeType":"ParameterList","parameters":[],"src":"147:0:7"},"scope":2837,"src":"108:41:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":2835,"nodeType":"Block","src":"222:117:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2818,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"244:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_YourAMM_$2837","typeString":"contract YourAMM"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YourAMM_$2837","typeString":"contract YourAMM"}],"id":2817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"236:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2816,"name":"address","nodeType":"ElementaryTypeName","src":"236:7:7","typeDescriptions":{}}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"236:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"250:7:7","memberName":"balance","nodeType":"MemberAccess","src":"236:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2821,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"261:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"236:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"269:22:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":2815,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"228:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"228:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2825,"nodeType":"ExpressionStatement","src":"228:64:7"},{"expression":{"arguments":[{"id":2832,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"327:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":2828,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"306:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"310:6:7","memberName":"sender","nodeType":"MemberAccess","src":"306:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"298:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"298:8:7","stateMutability":"payable","typeDescriptions":{}}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"318:8:7","memberName":"transfer","nodeType":"MemberAccess","src":"298:28:7","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2834,"nodeType":"ExpressionStatement","src":"298:36:7"}]},"functionSelector":"f14210a6","id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawETH","nameLocation":"185:11:7","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"amount","nameLocation":"205:6:7","nodeType":"VariableDeclaration","scope":2836,"src":"197:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"197:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"196:16:7"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[],"src":"222:0:7"},"scope":2837,"src":"176:163:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2838,"src":"65:276:7","usedErrors":[],"usedEvents":[]}],"src":"39:303:7"},"id":7}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202c889c7fca7c67a257826a0cae715976cc0ef8504317d8914652d625a7928d1764736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C DUP9 SWAP13 PUSH32 0xCA7C67A257826A0CAE715976CC0EF8504317D8914652D625A7928D1764736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"221:811:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212202c889c7fca7c67a257826a0cae715976cc0ef8504317d8914652d625a7928d1764736f6c634300081c0033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C DUP9 SWAP13 PUSH32 0xCA7C67A257826A0CAE715976CC0EF8504317D8914652D625A7928D1764736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"221:811:4:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f78fd981a67a1c4e04c84c582fdab7f7e03d4c87326677e747fdfd083026e3c164736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 DUP16 0xD9 DUP2 0xA6 PUSH27 0x1C4E04C84C582FDAB7F7E03D4C87326677E747FDFD083026E3C164 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:5:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220f78fd981a67a1c4e04c84c582fdab7f7e03d4c87326677e747fdfd083026e3c164736f6c634300081c0033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 DUP16 0xD9 DUP2 0xA6 PUSH27 0x1C4E04C84C582FDAB7F7E03D4C87326677E747FDFD083026E3C164 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:5:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"contracts/SequencedAMM.sol":{"SequencedAMM":{"abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"batchId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"intentRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"batchSize","type":"uint256"}],"name":"BatchCommitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"batchId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapCount","type":"uint256"}],"name":"BatchSwap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"batchId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"successCount","type":"uint256"}],"name":"BatchSwapExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isEth","type":"bool"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"bool","name":"ethToToken","type":"bool"}],"name":"FallbackSwap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":false,"internalType":"uint256","name":"ethAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":false,"internalType":"uint256","name":"ethAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldSequencer","type":"address"},{"indexed":true,"internalType":"address","name":"newSequencer","type":"address"}],"name":"SequencerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"sequencerOnly","type":"bool"}],"name":"SequencerModeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isEth","type":"bool"}],"name":"Withdrawal","type":"event"},{"inputs":[],"name":"FEE_DENOMINATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"ethAmount","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"addLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"batchIntentRoots","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"batchResults","outputs":[{"internalType":"uint256","name":"successCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"batchSubmissionTimes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"},{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"bool[]","name":"ethToTokenFlags","type":"bool[]"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes32[][]","name":"proofs","type":"bytes32[][]"}],"name":"batchSwap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"intentRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"}],"name":"commitBatchIntents","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"commitRevealDelay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"depositETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyDisableSequencer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"ethBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ethReserve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bool","name":"ethToToken","type":"bool"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"executeSwap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"ethToToken","type":"bool"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"fallbackSwap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"ethToToken","type":"bool"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"},{"internalType":"uint256","name":"swapIndex","type":"uint256"}],"name":"getSwapResult","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"string","name":"failureReason","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastBatchTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"liquidityShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxBatchDelay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextBatchId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shareAmount","type":"uint256"}],"name":"removeLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sequencer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sequencerOnly","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_delay","type":"uint256"}],"name":"setCommitRevealDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feeRate","type":"uint256"}],"name":"setFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newSequencer","type":"address"}],"name":"setSequencer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_sequencerOnly","type":"bool"}],"name":"setSequencerOnly","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokenBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenReserve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLiquidityShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"},{"internalType":"address","name":"user","type":"address"},{"internalType":"bool","name":"ethToToken","type":"bool"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"verifySwapInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":308,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60803461011957601f61237838819003918201601f19168301916001600160401b0383118484101761011e57808492604094855283398101031261011957610052602061004b83610134565b9201610134565b6001600160a01b0390911690811561010357600080546001600160a01b031981168417825560405193916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018080556002805460ff60a01b1916600160a01b17905561012c6003908155600a55600d5560b4600e55600780546001600160a01b0319166001600160a01b039290921691909117905561222f90816101498239f35b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101195756fe608080604052600436101561001357600080fd5b60003560e01c90816317d6263f14611ce8575080632547fa3e14611c7f5780633cfba0e314611c4557806345596e2e14611be85780634db484e2146119c657806350baa622146118ef578063523fba7f146118b557806354cc3c74146118895780635c1bba38146118605780636215be77146117795780636868bab5146111005780636b27e2bb146110a0578063715018a61461104757806380a4f6df14610fb15780638290d9b814610f825780638462a7f814610f6457806387cd5b2014610f4657806388da2b2d14610f1a5780638da5cb5b14610ef15780639729cc0514610ed3578063978bbdb914610eb55780639c8f9f2314610d195780639cd441da14610aff5780639db4aa0414610ac5578063a03fd9c214610a11578063b0b9b66a146108db578063b7afe9be146108bd578063c13c0ea514610891578063c901510b14610829578063cb29fdc71461071a578063cbcb3171146106fc578063d5e1070814610464578063d62ccb3f14610446578063d73792a914610429578063e71bfdc01461040b578063f14210a6146102e5578063f2fde38b1461025c578063f6326fb3146101fa5763fc0c546a146101cc57600080fd5b346101f55760003660031901126101f5576007546040516001600160a01b039091168152602090f35b600080fd5b60003660031901126101f557336000526005602052604060002061021f348254611de2565b9055604051348152600160208201524260408201527ffa430e490a18c9d02a4c0bf501c1b5821a600e09249e983f8491c6575dd5e42060603392a2005b346101f55760203660031901126101f557610275611d0b565b61027d61215d565b6001600160a01b031680156102cf57600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b346101f55760203660031901126101f557600435610301612186565b33600052600560205261031b816040600020541015611e4f565b3360005260056020526040600020610334828254611dc2565b9055600080808084335af13d15610406573d6001600160401b0381116103f0576040519061036c601f8201601f191660200183611eb6565b8152600060203d92013e5b156103b557604051908152600160208201527f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a60403392a260018055005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b610377565b346101f55760003660031901126101f5576020600e54604051908152f35b346101f55760003660031901126101f55760206040516103e88152f35b346101f55760003660031901126101f5576020600854604051908152f35b346101f55760603660031901126101f55761047d611d21565b60443560243561048b612186565b600060ff60025460a01c166106b75783156105cb57503360005260056020526104bb816040600020541015611e4f565b600a546103e8036103e881116105b5576104d59082611dcf565b926104e284600954611dcf565b93600854906103e88202918083046103e814901517156105b55760209561050f6105159261051e94611de2565b90611def565b93841015611e0f565b33600052600584526040600020610536838254611dc2565b905533600052600684526040600020610550848254611de2565b905561055e82600854611de2565b60085561056d83600954611dc2565b6009555b6040519182528284830152151560408201527faafe03bb75a5a17474aa34c7aa7923939142dcc00fad86ba2217a698e589053160603392a260018055604051908152f35b634e487b7160e01b600052601160045260246000fd5b9233845260066020526105e48260408620541015611d76565b600a546103e8036103e881116106a3576105fe9083611dcf565b61060a81600854611dcf565b94600954906103e88202918083046103e8149015171561068f575060209561050f6106389361051593611de2565b33600052600684526040600020610650838254611dc2565b90553360005260058452604060002061066a848254611de2565b905561067882600954611de2565b60095561068783600854611dc2565b600855610571565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f446972656374207377617073206e6f7420616c6c6f77656400000000000000006044820152606490fd5b346101f55760003660031901126101f5576020600954604051908152f35b346101f55760c03660031901126101f5576024356001600160a01b038116908190036101f5576044358015158091036101f55760a435906001600160401b0382116101f55760209261081a61077661081f943690600401611d30565b9290936040519161078683611e9b565b82528682015260643560408201526084356060820152600060808201526040516107fe816107f0898201948591909160808060a083019460018060a01b03815116845260208101511515602085015260408101516040850152606081015160608501520151910152565b03601f198101835282611eb6565b51902092600435600052600b8652604060002054923691611fb0565b6121a8565b6040519015158152f35b346101f55760203660031901126101f5577f33d081570f4871cfc13364650930f27efe5e1be344da69c94d4e75c06fa02f046020610865611d21565b61086d61215d565b151560025460ff60a01b8260a01b169060ff60a01b191617600255604051908152a1005b346101f55760203660031901126101f557600435600052600b6020526020604060002054604051908152f35b346101f55760003660031901126101f5576020600454604051908152f35b346101f5576108e936611d60565b90600052600f60205260026040600020826000526001810160205260ff60406000205416926000520160205260406000206040519081600082549261092d84612005565b80845293600181169081156109ef57506001146109a8575b5061095292500382611eb6565b6040519115158252604060208301528181519182604083015260005b8381106109905750508160006060809484010152601f80199101168101030190f35b6020828201810151606087840101528593500161096e565b90506000929192526020600020906000915b8183106109d35750509060206109529282010185610945565b60209193508060019154838588010152019101909183926109ba565b90506020925061095294915060ff191682840152151560051b82010185610945565b346101f55760003660031901126101f557610a3160045460035490611de2565b421115610a725760ff60a01b19600254166002557f33d081570f4871cfc13364650930f27efe5e1be344da69c94d4e75c06fa02f04602060405160008152a1005b60405162461bcd60e51b815260206004820152602560248201527f53657175656e636572206e6f7420636f6e7369646572656420696e616374697660448201526419481e595d60da1b6064820152608490fd5b346101f55760203660031901126101f5576001600160a01b03610ae6611d0b565b1660005260106020526020604060002054604051908152f35b346101f557610b0d36611d60565b610b15612186565b336000526005602052610b2f826040600020541015611e4f565b336000526006602052610b49816040600020541015611d76565b60115480610ca75750815b8015610c6f57610bd5903360005260056020526040600020610b77858254611dc2565b90553360005260066020526040600020610b92848254611dc2565b9055610ba084600854611de2565b600855610baf83600954611de2565b6009553360005260106020526040600020610bcb828254611de2565b9055601154611de2565b60115560405191825260208201527fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4560403392a2600854151580610c64575b15610c1f5760018055005b60405162461bcd60e51b815260206004820152601760248201527f52657365727665732063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b506009541515610c14565b60405162461bcd60e51b815260206004820152601060248201526f139bc81cda185c995cc81b5a5b9d195960821b6044820152606490fd5b610cb360095484611dcf565b60085490610cc18285611dcf565b03610cdd57610cd3610cd89285611dcf565b611def565b610b54565b60405162461bcd60e51b8152602060048201526014602482015273556e62616c616e636564206c697175696469747960601b6044820152606490fd5b346101f55760203660031901126101f557600435610d35612186565b3360005260106020528060406000205410610e7a57610d5660085482611dcf565b90610d74610d676011548094611def565b92610cd360095484611dcf565b9082151580610e71575b15610e3857610daa903360005260106020526040600020610da0828254611dc2565b9055601154611dc2565b601155610db982600854611dc2565b600855610dc881600954611dc2565b6009553360005260056020526040600020610de4838254611de2565b90553360005260066020526040600020610dff828254611de2565b905560405191825260208201527f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05960403392a260018055005b60405162461bcd60e51b8152602060048201526011602482015270105b5bdd5b9d1cc81d1bdbc81cdb585b1b607a1b6044820152606490fd5b50811515610d7e565b60405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606490fd5b346101f55760003660031901126101f5576020600a54604051908152f35b346101f55760003660031901126101f5576020600354604051908152f35b346101f55760003660031901126101f5576000546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f557600435600052600f6020526020604060002054604051908152f35b346101f55760003660031901126101f5576020601154604051908152f35b346101f55760003660031901126101f5576020600d54604051908152f35b346101f55760403660031901126101f5576020610fa9610fa0611d21565b602435906120db565b604051908152f35b346101f55760403660031901126101f557611042600435610fdd60018060a01b03600254163314611f33565b600d54600052600b60205280604060002055600d54600052600c602052426040600020557fd94095e772153bc53343941705b59e466d4e8aca1062afe01193089d27ff3a7f6060600d54926040519084825260208201526024356040820152a1612056565b600d55005b346101f55760003660031901126101f55761106061215d565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101f55760203660031901126101f5576004356110bc61215d565b610e1081116110ca57600e55005b60405162461bcd60e51b815260206004820152600e60248201526d44656c617920746f6f206c6f6e6760901b6044820152606490fd5b346101f55760c03660031901126101f5576024356001600160401b0381116101f557611130903690600401611d30565b906044356001600160401b0381116101f557611150903690600401611d30565b91906064356001600160401b0381116101f557611171903690600401611d30565b6084356001600160401b0381116101f557611190903690600401611d30565b909160a4356001600160401b0381116101f5576111b1903690600401611d30565b9790966111c960018060a01b03600254163314611f33565b6111d1612186565b600435600052600c6020526111ee604060002054600e5490611de2565b421061173b57600435600052600b6020526040600020541561170057818a14806116f7575b806116ee575b806116e5575b156116a857600435600052600f60205260406000209860005b8b8110611283577fd4c22493e0aaec761df8f89beac249a28e68282a4c072c247156d6ce537618c960608d8d426004555460405191600435835260208301526040820152a160018055005b611296611291828e86611f7f565b611f8f565b6112a96112a483878d611f7f565b611fa3565b6112b483888c611f7f565b356112c0848a8c611f7f565b3591604051936112cf85611e9b565b6001600160a01b03168085529015156020808601918252604080870194855260608088019687526000608098890190815282519384019586529351151591830191909152935193810193909352925193820193909352905160a08201526113398160c081016107f0565b51902082821015611692578160051b8b0135601e198c3603018112156101f5578b016001600160401b038135116101f557803560051b360360208201136101f5578d916113a291600435600052600b60205261081a604060002054913690602081359101611fb0565b1561161657611291826113b59286611f7f565b6113c36112a483878d611f7f565b6113ce83888c611f7f565b356113da848a8c611f7f565b6040516326da427160e11b81526001600160a01b039094166004850152911515602484015260448301523560648201526020816084816000305af1906000826115e3575b50506115b6576001600060033d116115a8575b6308c379a014611456575b61144a576001905b01611238565b6040513d6000823e3d90fd5b61145e612065565b8061146a575b5061143c565b905060009082825260018d016020526040822060ff19815416905582825260028d0160205260408220908051906001600160401b0382116115945781906114b18454612005565b601f8111611559575b50602090601f83116001146114f65785926114eb575b50508160011b916000199060031b1c19161790555b8d611464565b0151905038806114d0565b8486528186209250601f198416865b8181106115415750908460019594939210611528575b505050811b0190556114e5565b015160001960f88460031b161c1916905538808061151b565b92936020600181928786015181550195019301611505565b6115849085875260208720601f850160051c8101916020861061158a575b601f0160051c019061203f565b386114ba565b9091508190611577565b634e487b7160e01b84526041600452602484fd5b600481803e5160e01c611431565b80600191600052818c0160205260406000208260ff198254161790556115dc8c54612056565b8c55611444565b6020823d821161160e575b816115fb60209383611eb6565b8101031261160b5750518e61141e565b80fd5b3d91506115ee565b5080600191600052818c01602052604060002060ff1981541690558060005260028c01602052604060002061164b8154612005565b601f8111611670575b50601a6c24b73b30b634b210383937b7b360991b019055611444565b61168c9082600052601f6020600020910160051c81019061203f565b8e611654565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b50888a1461121f565b50838a14611219565b50828a14611213565b60405162461bcd60e51b815260206004820152601360248201527210985d18da081b9bdd0818dbdb5b5a5d1d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275135d5cdd081dd85a5d0818599d195c8818dbdb5b5a5d60521b6044820152606490fd5b346101f55760203660031901126101f5576004356000602060018060a01b03600754166064604051809481936323b872dd60e01b83523360048401523060248401528760448401525af1801561144a576117db91600091611831575b50611eef565b33600052600660205260406000206117f4828254611de2565b9055604051908152600060208201524260408201527ffa430e490a18c9d02a4c0bf501c1b5821a600e09249e983f8491c6575dd5e42060603392a2005b611853915060203d602011611859575b61184b8183611eb6565b810190611ed7565b836117d5565b503d611841565b346101f55760003660031901126101f5576002546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f557600435600052600c6020526020604060002054604051908152f35b346101f55760203660031901126101f5576001600160a01b036118d6611d0b565b1660005260066020526020604060002054604051908152f35b346101f55760203660031901126101f55760043561190b612186565b336000526006602052611925816040600020541015611d76565b336000526006602052604060002061193e828254611dc2565b905560075460405163a9059cbb60e01b81523360048201526024810183905290602090829060449082906000906001600160a01b03165af1801561144a5761198d916000916118315750611eef565b604051908152600060208201527f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a60403392a260018055005b346101f55760803660031901126101f5576119df611d0b565b60243580151581036101f5576044359160643591303303611ba35715611ad7576001600160a01b0316600081815260056020526040902054611a2390841115611e4f565b600a546103e8036103e881116105b557611a3d9084611dcf565b92611a4a84600954611dcf565b916008546103e88102908082046103e814901517156105b557611a79611abd9461050f602098611a8294611de2565b94851015611e0f565b80600052600585526040600020611a9a838254611dc2565b9055600052600684526040600020611ab3848254611de2565b9055600854611de2565b600855611acc81600954611dc2565b600955604051908152f35b6001600160a01b0316600081815260066020526040902054611afb90841115611d76565b600a546103e8036103e881116105b557611b159084611dcf565b92611b2284600854611dcf565b916009546103e88102908082046103e814901517156105b557611a79611b8c9461050f602098611b5194611de2565b80600052600685526040600020611b69838254611dc2565b9055600052600584526040600020611b82848254611de2565b9055600954611de2565b600955611b9b81600854611dc2565b600855610fa9565b60405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c6520696e7465726e616c6c7900000000000000006044820152606490fd5b346101f55760203660031901126101f557600435611c0461215d565b60328111611c1157600a55005b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b346101f55760203660031901126101f5576001600160a01b03611c66611d0b565b1660005260056020526020604060002054604051908152f35b346101f55760203660031901126101f557611c98611d0b565b611ca061215d565b6002546001600160a01b0391821691829082167f6ec88bae255aa7e73521c3beb17e9bc7940169e669440c5531733c0d2e91110d600080a36001600160a01b03191617600255005b346101f55760003660031901126101f55760209060ff60025460a01c1615158152f35b600435906001600160a01b03821682036101f557565b6004359081151582036101f557565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460051b0101116101f557565b60409060031901126101f5576004359060243590565b15611d7d57565b60405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606490fd5b919082039182116105b557565b818102929181159184041417156105b557565b919082018092116105b557565b8115611df9570490565b634e487b7160e01b600052601260045260246000fd5b15611e1657565b60405162461bcd60e51b81526020600482015260116024820152700a6d8d2e0e0c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b15611e5657565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152606490fd5b60a081019081106001600160401b038211176103f057604052565b90601f801991011681019081106001600160401b038211176103f057604052565b908160209103126101f5575180151581036101f55790565b15611ef657565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b15611f3a57565b60405162461bcd60e51b815260206004820152601760248201527f4f6e6c792073657175656e6365722063616e2063616c6c0000000000000000006044820152606490fd5b91908110156116925760051b0190565b356001600160a01b03811681036101f55790565b3580151581036101f55790565b929190926001600160401b0384116103f0578360051b906020604051611fd882850182611eb6565b80968152019181019283116101f557905b828210611ff557505050565b8135815260209182019101611fe9565b90600182811c92168015612035575b602083101461201f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612014565b81811061204a575050565b6000815560010161203f565b60001981146105b55760010190565b600060443d106120ca576040513d600319016004823e8051913d60248401116001600160401b038411176120d557828201928351916001600160401b0383116120cd573d840160031901858401602001116120cd57506120ca92910160200190611eb6565b90565b949350505050565b92915050565b90600a546103e8036103e881116105b5576120f591611dcf565b901561212c5761210781600954611dcf565b6008546103e88102908082046103e814901517156105b5576120ca9261050f91611de2565b61213881600854611dcf565b6009546103e88102908082046103e814901517156105b5576120ca9261050f91611de2565b6000546001600160a01b0316330361217157565b63118cdaa760e01b6000523360045260246000fd5b600260015414612197576002600155565b633ee5aeb560e01b60005260046000fd5b929091906000915b84518310156121f157604060019160009060208660051b89010151908181106000146121e5578252602052205b9201916121b0565b908252602052206121dd565b91509250149056fea2646970667358221220a6cc605f9f1362659e6477770d35cdb7f26172a8773ccf769b9e1f0eb0c0e03864736f6c634300081c0033","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0x119 JUMPI PUSH1 0x1F PUSH2 0x2378 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x11E JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x119 JUMPI PUSH2 0x52 PUSH1 0x20 PUSH2 0x4B DUP4 PUSH2 0x134 JUMP JUMPDEST SWAP3 ADD PUSH2 0x134 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP2 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP5 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 PUSH1 0x1 DUP1 DUP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH2 0x12C PUSH1 0x3 SWAP1 DUP2 SSTORE PUSH1 0xA SSTORE PUSH1 0xD SSTORE PUSH1 0xB4 PUSH1 0xE SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x222F SWAP1 DUP2 PUSH2 0x149 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x119 JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x17D6263F EQ PUSH2 0x1CE8 JUMPI POP DUP1 PUSH4 0x2547FA3E EQ PUSH2 0x1C7F JUMPI DUP1 PUSH4 0x3CFBA0E3 EQ PUSH2 0x1C45 JUMPI DUP1 PUSH4 0x45596E2E EQ PUSH2 0x1BE8 JUMPI DUP1 PUSH4 0x4DB484E2 EQ PUSH2 0x19C6 JUMPI DUP1 PUSH4 0x50BAA622 EQ PUSH2 0x18EF JUMPI DUP1 PUSH4 0x523FBA7F EQ PUSH2 0x18B5 JUMPI DUP1 PUSH4 0x54CC3C74 EQ PUSH2 0x1889 JUMPI DUP1 PUSH4 0x5C1BBA38 EQ PUSH2 0x1860 JUMPI DUP1 PUSH4 0x6215BE77 EQ PUSH2 0x1779 JUMPI DUP1 PUSH4 0x6868BAB5 EQ PUSH2 0x1100 JUMPI DUP1 PUSH4 0x6B27E2BB EQ PUSH2 0x10A0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1047 JUMPI DUP1 PUSH4 0x80A4F6DF EQ PUSH2 0xFB1 JUMPI DUP1 PUSH4 0x8290D9B8 EQ PUSH2 0xF82 JUMPI DUP1 PUSH4 0x8462A7F8 EQ PUSH2 0xF64 JUMPI DUP1 PUSH4 0x87CD5B20 EQ PUSH2 0xF46 JUMPI DUP1 PUSH4 0x88DA2B2D EQ PUSH2 0xF1A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEF1 JUMPI DUP1 PUSH4 0x9729CC05 EQ PUSH2 0xED3 JUMPI DUP1 PUSH4 0x978BBDB9 EQ PUSH2 0xEB5 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xD19 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xAFF JUMPI DUP1 PUSH4 0x9DB4AA04 EQ PUSH2 0xAC5 JUMPI DUP1 PUSH4 0xA03FD9C2 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0xB0B9B66A EQ PUSH2 0x8DB JUMPI DUP1 PUSH4 0xB7AFE9BE EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0xC13C0EA5 EQ PUSH2 0x891 JUMPI DUP1 PUSH4 0xC901510B EQ PUSH2 0x829 JUMPI DUP1 PUSH4 0xCB29FDC7 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xCBCB3171 EQ PUSH2 0x6FC JUMPI DUP1 PUSH4 0xD5E10708 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xD62CCB3F EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x429 JUMPI DUP1 PUSH4 0xE71BFDC0 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xF14210A6 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xF6326FB3 EQ PUSH2 0x1FA JUMPI PUSH4 0xFC0C546A EQ PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x21F CALLVALUE DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xFA430E490A18C9D02A4C0BF501C1B5821A600E09249E983F8491C6575DD5E420 PUSH1 0x60 CALLER SWAP3 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x275 PUSH2 0x1D0B JUMP JUMPDEST PUSH2 0x27D PUSH2 0x215D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x301 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0x31B DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x334 DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 CALLER GAS CALL RETURNDATASIZE ISZERO PUSH2 0x406 JUMPI RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x36C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6E0C61E7E9F4912EE1F3CE060B59207B98F9A232D711462AF3166AEEED1250A PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x115512081D1C985B9CD9995C8819985A5B1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x377 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3E8 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x47D PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x48B PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x6B7 JUMPI DUP4 ISZERO PUSH2 0x5CB JUMPI POP CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0x4BB DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x4D5 SWAP1 DUP3 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x4E2 DUP5 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP4 PUSH1 0x8 SLOAD SWAP1 PUSH2 0x3E8 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x20 SWAP6 PUSH2 0x50F PUSH2 0x515 SWAP3 PUSH2 0x51E SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 PUSH2 0x1DEF JUMP JUMPDEST SWAP4 DUP5 LT ISZERO PUSH2 0x1E0F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x536 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x550 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x55E DUP3 PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x56D DUP4 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE DUP3 DUP5 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xAAFE03BB75A5A17474AA34C7AA7923939142DCC00FAD86BA2217A698E5890531 PUSH1 0x60 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 CALLER DUP5 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x5E4 DUP3 PUSH1 0x40 DUP7 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x6A3 JUMPI PUSH2 0x5FE SWAP1 DUP4 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x60A DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP5 PUSH1 0x9 SLOAD SWAP1 PUSH2 0x3E8 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x68F JUMPI POP PUSH1 0x20 SWAP6 PUSH2 0x50F PUSH2 0x638 SWAP4 PUSH2 0x515 SWAP4 PUSH2 0x1DE2 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x650 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x66A DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x678 DUP3 PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x687 DUP4 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x571 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446972656374207377617073206E6F7420616C6C6F7765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x1F5 JUMPI PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x1F5 JUMPI PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x81A PUSH2 0x776 PUSH2 0x81F SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x786 DUP4 PUSH2 0x1E9B JUMP JUMPDEST DUP3 MSTORE DUP7 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x7FE DUP2 PUSH2 0x7F0 DUP10 DUP3 ADD SWAP5 DUP6 SWAP2 SWAP1 SWAP2 PUSH1 0x80 DUP1 PUSH1 0xA0 DUP4 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1EB6 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP3 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 CALLDATASIZE SWAP2 PUSH2 0x1FB0 JUMP JUMPDEST PUSH2 0x21A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH32 0x33D081570F4871CFC13364650930F27EFE5E1BE344DA69C94D4E75C06FA02F04 PUSH1 0x20 PUSH2 0x865 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x86D PUSH2 0x215D JUMP JUMPDEST ISZERO ISZERO PUSH1 0x2 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL DUP3 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH2 0x8E9 CALLDATASIZE PUSH2 0x1D60 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x1 DUP2 ADD PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND SWAP3 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x92D DUP5 PUSH2 0x2005 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x9EF JUMPI POP PUSH1 0x1 EQ PUSH2 0x9A8 JUMPI JUMPDEST POP PUSH2 0x952 SWAP3 POP SUB DUP3 PUSH2 0x1EB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x990 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x96E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP3 SWAP2 SWAP3 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x9D3 JUMPI POP POP SWAP1 PUSH1 0x20 PUSH2 0x952 SWAP3 DUP3 ADD ADD DUP6 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 POP DUP1 PUSH1 0x1 SWAP2 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP4 SWAP3 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x952 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD DUP6 PUSH2 0x945 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0xA31 PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST TIMESTAMP GT ISZERO PUSH2 0xA72 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE PUSH32 0x33D081570F4871CFC13364650930F27EFE5E1BE344DA69C94D4E75C06FA02F04 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53657175656E636572206E6F7420636F6E7369646572656420696E6163746976 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x19481E595D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAE6 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH2 0xB0D CALLDATASIZE PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0xB15 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0xB2F DUP3 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0xB49 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP1 PUSH2 0xCA7 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0xC6F JUMPI PUSH2 0xBD5 SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xB77 DUP6 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xB92 DUP5 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xBA0 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xBAF DUP4 PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xBCB DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x11 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xAC1D76749E5447B7B16F5AB61447E1BD502F3BB4807AF3B28E620D1700A6EE45 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x8 SLOAD ISZERO ISZERO DUP1 PUSH2 0xC64 JUMPI JUMPDEST ISZERO PUSH2 0xC1F JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52657365727665732063616E6E6F74206265207A65726F000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD ISZERO ISZERO PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x139BC81CDA185C995CC81B5A5B9D1959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xCB3 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH2 0xCC1 DUP3 DUP6 PUSH2 0x1DCF JUMP JUMPDEST SUB PUSH2 0xCDD JUMPI PUSH2 0xCD3 PUSH2 0xCD8 SWAP3 DUP6 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x1DEF JUMP JUMPDEST PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x556E62616C616E636564206C6971756964697479 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD35 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0xE7A JUMPI PUSH2 0xD56 PUSH1 0x8 SLOAD DUP3 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 PUSH2 0xD74 PUSH2 0xD67 PUSH1 0x11 SLOAD DUP1 SWAP5 PUSH2 0x1DEF JUMP JUMPDEST SWAP3 PUSH2 0xCD3 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 DUP3 ISZERO ISZERO DUP1 PUSH2 0xE71 JUMPI JUMPDEST ISZERO PUSH2 0xE38 JUMPI PUSH2 0xDAA SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDA0 DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x11 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH2 0xDB9 DUP3 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xDC8 DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDE4 DUP4 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDFF DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x96CD817C6329656790EF8FBA7675405193677D39619571282F5E21F3A98CD059 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x105B5BDD5B9D1CC81D1BDBC81CDB585B1B PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E73756666696369656E7420736861726573 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH2 0xFA9 PUSH2 0xFA0 PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1042 PUSH1 0x4 CALLDATALOAD PUSH2 0xFDD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 SLOAD AND CALLER EQ PUSH2 0x1F33 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0xD SLOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH32 0xD94095E772153BC53343941705B59E466D4E8ACA1062AFE01193089D27FF3A7F PUSH1 0x60 PUSH1 0xD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE LOG1 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0xD SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1060 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x10BC PUSH2 0x215D JUMP JUMPDEST PUSH2 0xE10 DUP2 GT PUSH2 0x10CA JUMPI PUSH1 0xE SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x44656C617920746F6F206C6F6E67 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1130 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1150 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1171 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1190 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x11B1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP8 SWAP1 SWAP7 PUSH2 0x11C9 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 SLOAD AND CALLER EQ PUSH2 0x1F33 JUMP JUMPDEST PUSH2 0x11D1 PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH2 0x11EE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xE SLOAD SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST TIMESTAMP LT PUSH2 0x173B JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO PUSH2 0x1700 JUMPI DUP2 DUP11 EQ DUP1 PUSH2 0x16F7 JUMPI JUMPDEST DUP1 PUSH2 0x16EE JUMPI JUMPDEST DUP1 PUSH2 0x16E5 JUMPI JUMPDEST ISZERO PUSH2 0x16A8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP9 PUSH1 0x0 JUMPDEST DUP12 DUP2 LT PUSH2 0x1283 JUMPI PUSH32 0xD4C22493E0AAEC761DF8F89BEAC249A28E68282A4C072C247156D6CE537618C9 PUSH1 0x60 DUP14 DUP14 TIMESTAMP PUSH1 0x4 SSTORE SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG1 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH2 0x1296 PUSH2 0x1291 DUP3 DUP15 DUP7 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x1F8F JUMP JUMPDEST PUSH2 0x12A9 PUSH2 0x12A4 DUP4 DUP8 DUP14 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x1FA3 JUMP JUMPDEST PUSH2 0x12B4 DUP4 DUP9 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD PUSH2 0x12C0 DUP5 DUP11 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x12CF DUP6 PUSH2 0x1E9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP1 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP8 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP1 DUP9 ADD SWAP7 DUP8 MSTORE PUSH1 0x0 PUSH1 0x80 SWAP9 DUP10 ADD SWAP1 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP5 ADD SWAP6 DUP7 MSTORE SWAP4 MLOAD ISZERO ISZERO SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 MLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 MLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1339 DUP2 PUSH1 0xC0 DUP2 ADD PUSH2 0x7F0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP3 DUP3 LT ISZERO PUSH2 0x1692 JUMPI DUP2 PUSH1 0x5 SHL DUP12 ADD CALLDATALOAD PUSH1 0x1E NOT DUP13 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1F5 JUMPI DUP12 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD GT PUSH2 0x1F5 JUMPI DUP1 CALLDATALOAD PUSH1 0x5 SHL CALLDATASIZE SUB PUSH1 0x20 DUP3 ADD SGT PUSH2 0x1F5 JUMPI DUP14 SWAP2 PUSH2 0x13A2 SWAP2 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x81A PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 CALLDATASIZE SWAP1 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x1FB0 JUMP JUMPDEST ISZERO PUSH2 0x1616 JUMPI PUSH2 0x1291 DUP3 PUSH2 0x13B5 SWAP3 DUP7 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x13C3 PUSH2 0x12A4 DUP4 DUP8 DUP14 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x13CE DUP4 DUP9 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD PUSH2 0x13DA DUP5 DUP11 DUP13 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x26DA4271 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP2 ISZERO ISZERO PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x84 DUP2 PUSH1 0x0 ADDRESS GAS CALL SWAP1 PUSH1 0x0 DUP3 PUSH2 0x15E3 JUMPI JUMPDEST POP POP PUSH2 0x15B6 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT PUSH2 0x15A8 JUMPI JUMPDEST PUSH4 0x8C379A0 EQ PUSH2 0x1456 JUMPI JUMPDEST PUSH2 0x144A JUMPI PUSH1 0x1 SWAP1 JUMPDEST ADD PUSH2 0x1238 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x145E PUSH2 0x2065 JUMP JUMPDEST DUP1 PUSH2 0x146A JUMPI JUMPDEST POP PUSH2 0x143C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP1 DUP3 DUP3 MSTORE PUSH1 0x1 DUP14 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP3 DUP3 MSTORE PUSH1 0x2 DUP14 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1594 JUMPI DUP2 SWAP1 PUSH2 0x14B1 DUP5 SLOAD PUSH2 0x2005 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1559 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x14F6 JUMPI DUP6 SWAP3 PUSH2 0x14EB JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST DUP14 PUSH2 0x1464 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x14D0 JUMP JUMPDEST DUP5 DUP7 MSTORE DUP2 DUP7 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0x1541 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1528 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x14E5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x151B JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1505 JUMP JUMPDEST PUSH2 0x1584 SWAP1 DUP6 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x158A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x203F JUMP JUMPDEST CODESIZE PUSH2 0x14BA JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1577 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x4 DUP2 DUP1 RETURNDATACOPY MLOAD PUSH1 0xE0 SHR PUSH2 0x1431 JUMP JUMPDEST DUP1 PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE DUP2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x15DC DUP13 SLOAD PUSH2 0x2056 JUMP JUMPDEST DUP13 SSTORE PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x160E JUMPI JUMPDEST DUP2 PUSH2 0x15FB PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x160B JUMPI POP MLOAD DUP15 PUSH2 0x141E JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x15EE JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE DUP2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x164B DUP2 SLOAD PUSH2 0x2005 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1670 JUMPI JUMPDEST POP PUSH1 0x1A PUSH13 0x24B73B30B634B210383937B7B3 PUSH1 0x99 SHL ADD SWAP1 SSTORE PUSH2 0x1444 JUMP JUMPDEST PUSH2 0x168C SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH2 0x203F JUMP JUMPDEST DUP15 PUSH2 0x1654 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x82E4E4C2F240D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP9 DUP11 EQ PUSH2 0x121F JUMP JUMPDEST POP DUP4 DUP11 EQ PUSH2 0x1219 JUMP JUMPDEST POP DUP3 DUP11 EQ PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x10985D18DA081B9BDD0818DBDB5B5A5D1D1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x135D5CDD081DD85A5D0818599D195C8818DBDB5B5A5D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x7 SLOAD AND PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE DUP8 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x144A JUMPI PUSH2 0x17DB SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1831 JUMPI JUMPDEST POP PUSH2 0x1EEF JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x17F4 DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xFA430E490A18C9D02A4C0BF501C1B5821A600E09249E983F8491C6575DD5E420 PUSH1 0x60 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x1853 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1859 JUMPI JUMPDEST PUSH2 0x184B DUP2 DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1ED7 JUMP JUMPDEST DUP4 PUSH2 0x17D5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1841 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x18D6 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x190B PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x1925 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x193E DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x144A JUMPI PUSH2 0x198D SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1831 JUMPI POP PUSH2 0x1EEF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6E0C61E7E9F4912EE1F3CE060B59207B98F9A232D711462AF3166AEEED1250A PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x19DF PUSH2 0x1D0B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP2 ADDRESS CALLER SUB PUSH2 0x1BA3 JUMPI ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1A23 SWAP1 DUP5 GT ISZERO PUSH2 0x1E4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x1A3D SWAP1 DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x1A4A DUP5 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP2 PUSH1 0x8 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x1A79 PUSH2 0x1ABD SWAP5 PUSH2 0x50F PUSH1 0x20 SWAP9 PUSH2 0x1A82 SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST SWAP5 DUP6 LT ISZERO PUSH2 0x1E0F JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1A9A DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AB3 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x1ACC DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1AFB SWAP1 DUP5 GT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x1B15 SWAP1 DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x1B22 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP2 PUSH1 0x9 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x1A79 PUSH2 0x1B8C SWAP5 PUSH2 0x50F PUSH1 0x20 SWAP9 PUSH2 0x1B51 SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1B69 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1B82 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x1B9B DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C6520696E7465726E616C6C790000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1C04 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x32 DUP2 GT PUSH2 0x1C11 JUMPI PUSH1 0xA SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x8CCACA40E8DEDE40D0D2CED PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C66 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1C98 PUSH2 0x1D0B JUMP JUMPDEST PUSH2 0x1CA0 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 DUP3 SWAP1 DUP3 AND PUSH32 0x6EC88BAE255AA7E73521C3BEB17E9BC7940169E669440C5531733C0D2E91110D PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x2 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1F5 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1F5 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1F5 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1F5 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x1F5 JUMPI JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D7D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x5B5 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x5B5 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1DF9 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1E16 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0xA6D8D2E0E0C2CECA40E8DEDE40D0D2CED PUSH1 0x7B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1E56 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E63650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1F5 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1EF6 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1F3A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792073657175656E6365722063616E2063616C6C000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1692 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x3F0 JUMPI DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1FD8 DUP3 DUP6 ADD DUP3 PUSH2 0x1EB6 JUMP JUMPDEST DUP1 SWAP7 DUP2 MSTORE ADD SWAP2 DUP2 ADD SWAP3 DUP4 GT PUSH2 0x1F5 JUMPI SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1FF5 JUMPI POP POP POP JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2035 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x201F JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2014 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x204A JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x203F JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x5B5 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT PUSH2 0x20CA JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD SWAP2 RETURNDATASIZE PUSH1 0x24 DUP5 ADD GT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT OR PUSH2 0x20D5 JUMPI DUP3 DUP3 ADD SWAP3 DUP4 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x20CD JUMPI RETURNDATASIZE DUP5 ADD PUSH1 0x3 NOT ADD DUP6 DUP5 ADD PUSH1 0x20 ADD GT PUSH2 0x20CD JUMPI POP PUSH2 0x20CA SWAP3 SWAP2 ADD PUSH1 0x20 ADD SWAP1 PUSH2 0x1EB6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x20F5 SWAP2 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x212C JUMPI PUSH2 0x2107 DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x20CA SWAP3 PUSH2 0x50F SWAP2 PUSH2 0x1DE2 JUMP JUMPDEST PUSH2 0x2138 DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x20CA SWAP3 PUSH2 0x50F SWAP2 PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2171 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x2197 JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x40 PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD MLOAD SWAP1 DUP2 DUP2 LT PUSH1 0x0 EQ PUSH2 0x21E5 JUMPI DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x21B0 JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x21DD JUMP JUMPDEST SWAP2 POP SWAP3 POP EQ SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 0xCC PUSH1 0x5F SWAP16 SGT PUSH3 0x659E64 PUSH24 0x770D35CDB7F26172A8773CCF769B9E1F0EB0C0E03864736F PUSH13 0x634300081C0033000000000000 ","sourceMap":"1285:23143:6:-:0;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;1285:23143:6;;;;1273:26:0;;1269:95;;-1:-1:-1;1285:23143:6;;-1:-1:-1;;;;;;1285:23143:6;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;3052:40:0;;-1:-1:-1;3052:40:0;1857:1:3;1285:23143:6;;;1399:4;1285:23143;;-1:-1:-1;;;;1285:23143:6;-1:-1:-1;;;1285:23143:6;;;1440:9;;1285:23143;;;1824:1;1285:23143;3694:1;1285:23143;3736:9;;1285:23143;4754:28;1285:23143;;-1:-1:-1;;;;;;1285:23143:6;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;1269:95:0;1322:31;;;-1:-1:-1;1322:31:0;-1:-1:-1;1322:31:0;1285:23143:6;;-1:-1:-1;1322:31:0;1285:23143:6;-1:-1:-1;1285:23143:6;;;;;;-1:-1:-1;1285:23143:6;;;;;-1:-1:-1;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":7435,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":7472,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_array_bytes32_dyn":{"entryPoint":8112,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool":{"entryPoint":7457,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":7895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_uint256":{"entryPoint":7520,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_struct_SwapIntent":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":8063,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":7650,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256":{"entryPoint":7663,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":7631,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":7618,"id":null,"parameterSlots":2,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":8255,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8197,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7862,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_28551":{"entryPoint":7835,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkOwner":{"entryPoint":8541,"id":84,"parameterSlots":0,"returnSlots":0},"fun_getAmountOut":{"entryPoint":8411,"id":2705,"parameterSlots":2,"returnSlots":1},"fun_nonReentrantBefore":{"entryPoint":8582,"id":304,"parameterSlots":0,"returnSlots":0},"fun_verify":{"entryPoint":8616,"id":393,"parameterSlots":3,"returnSlots":1},"increment_uint256":{"entryPoint":8278,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_address":{"entryPoint":8079,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_bool":{"entryPoint":8099,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":7987,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_5a86":{"entryPoint":7695,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_70ee":{"entryPoint":7759,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_74c7":{"entryPoint":7919,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_a7e5":{"entryPoint":7542,"id":null,"parameterSlots":1,"returnSlots":0},"try_decode_error_message":{"entryPoint":8293,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c90816317d6263f14611ce8575080632547fa3e14611c7f5780633cfba0e314611c4557806345596e2e14611be85780634db484e2146119c657806350baa622146118ef578063523fba7f146118b557806354cc3c74146118895780635c1bba38146118605780636215be77146117795780636868bab5146111005780636b27e2bb146110a0578063715018a61461104757806380a4f6df14610fb15780638290d9b814610f825780638462a7f814610f6457806387cd5b2014610f4657806388da2b2d14610f1a5780638da5cb5b14610ef15780639729cc0514610ed3578063978bbdb914610eb55780639c8f9f2314610d195780639cd441da14610aff5780639db4aa0414610ac5578063a03fd9c214610a11578063b0b9b66a146108db578063b7afe9be146108bd578063c13c0ea514610891578063c901510b14610829578063cb29fdc71461071a578063cbcb3171146106fc578063d5e1070814610464578063d62ccb3f14610446578063d73792a914610429578063e71bfdc01461040b578063f14210a6146102e5578063f2fde38b1461025c578063f6326fb3146101fa5763fc0c546a146101cc57600080fd5b346101f55760003660031901126101f5576007546040516001600160a01b039091168152602090f35b600080fd5b60003660031901126101f557336000526005602052604060002061021f348254611de2565b9055604051348152600160208201524260408201527ffa430e490a18c9d02a4c0bf501c1b5821a600e09249e983f8491c6575dd5e42060603392a2005b346101f55760203660031901126101f557610275611d0b565b61027d61215d565b6001600160a01b031680156102cf57600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b346101f55760203660031901126101f557600435610301612186565b33600052600560205261031b816040600020541015611e4f565b3360005260056020526040600020610334828254611dc2565b9055600080808084335af13d15610406573d6001600160401b0381116103f0576040519061036c601f8201601f191660200183611eb6565b8152600060203d92013e5b156103b557604051908152600160208201527f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a60403392a260018055005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b610377565b346101f55760003660031901126101f5576020600e54604051908152f35b346101f55760003660031901126101f55760206040516103e88152f35b346101f55760003660031901126101f5576020600854604051908152f35b346101f55760603660031901126101f55761047d611d21565b60443560243561048b612186565b600060ff60025460a01c166106b75783156105cb57503360005260056020526104bb816040600020541015611e4f565b600a546103e8036103e881116105b5576104d59082611dcf565b926104e284600954611dcf565b93600854906103e88202918083046103e814901517156105b55760209561050f6105159261051e94611de2565b90611def565b93841015611e0f565b33600052600584526040600020610536838254611dc2565b905533600052600684526040600020610550848254611de2565b905561055e82600854611de2565b60085561056d83600954611dc2565b6009555b6040519182528284830152151560408201527faafe03bb75a5a17474aa34c7aa7923939142dcc00fad86ba2217a698e589053160603392a260018055604051908152f35b634e487b7160e01b600052601160045260246000fd5b9233845260066020526105e48260408620541015611d76565b600a546103e8036103e881116106a3576105fe9083611dcf565b61060a81600854611dcf565b94600954906103e88202918083046103e8149015171561068f575060209561050f6106389361051593611de2565b33600052600684526040600020610650838254611dc2565b90553360005260058452604060002061066a848254611de2565b905561067882600954611de2565b60095561068783600854611dc2565b600855610571565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f446972656374207377617073206e6f7420616c6c6f77656400000000000000006044820152606490fd5b346101f55760003660031901126101f5576020600954604051908152f35b346101f55760c03660031901126101f5576024356001600160a01b038116908190036101f5576044358015158091036101f55760a435906001600160401b0382116101f55760209261081a61077661081f943690600401611d30565b9290936040519161078683611e9b565b82528682015260643560408201526084356060820152600060808201526040516107fe816107f0898201948591909160808060a083019460018060a01b03815116845260208101511515602085015260408101516040850152606081015160608501520151910152565b03601f198101835282611eb6565b51902092600435600052600b8652604060002054923691611fb0565b6121a8565b6040519015158152f35b346101f55760203660031901126101f5577f33d081570f4871cfc13364650930f27efe5e1be344da69c94d4e75c06fa02f046020610865611d21565b61086d61215d565b151560025460ff60a01b8260a01b169060ff60a01b191617600255604051908152a1005b346101f55760203660031901126101f557600435600052600b6020526020604060002054604051908152f35b346101f55760003660031901126101f5576020600454604051908152f35b346101f5576108e936611d60565b90600052600f60205260026040600020826000526001810160205260ff60406000205416926000520160205260406000206040519081600082549261092d84612005565b80845293600181169081156109ef57506001146109a8575b5061095292500382611eb6565b6040519115158252604060208301528181519182604083015260005b8381106109905750508160006060809484010152601f80199101168101030190f35b6020828201810151606087840101528593500161096e565b90506000929192526020600020906000915b8183106109d35750509060206109529282010185610945565b60209193508060019154838588010152019101909183926109ba565b90506020925061095294915060ff191682840152151560051b82010185610945565b346101f55760003660031901126101f557610a3160045460035490611de2565b421115610a725760ff60a01b19600254166002557f33d081570f4871cfc13364650930f27efe5e1be344da69c94d4e75c06fa02f04602060405160008152a1005b60405162461bcd60e51b815260206004820152602560248201527f53657175656e636572206e6f7420636f6e7369646572656420696e616374697660448201526419481e595d60da1b6064820152608490fd5b346101f55760203660031901126101f5576001600160a01b03610ae6611d0b565b1660005260106020526020604060002054604051908152f35b346101f557610b0d36611d60565b610b15612186565b336000526005602052610b2f826040600020541015611e4f565b336000526006602052610b49816040600020541015611d76565b60115480610ca75750815b8015610c6f57610bd5903360005260056020526040600020610b77858254611dc2565b90553360005260066020526040600020610b92848254611dc2565b9055610ba084600854611de2565b600855610baf83600954611de2565b6009553360005260106020526040600020610bcb828254611de2565b9055601154611de2565b60115560405191825260208201527fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4560403392a2600854151580610c64575b15610c1f5760018055005b60405162461bcd60e51b815260206004820152601760248201527f52657365727665732063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b506009541515610c14565b60405162461bcd60e51b815260206004820152601060248201526f139bc81cda185c995cc81b5a5b9d195960821b6044820152606490fd5b610cb360095484611dcf565b60085490610cc18285611dcf565b03610cdd57610cd3610cd89285611dcf565b611def565b610b54565b60405162461bcd60e51b8152602060048201526014602482015273556e62616c616e636564206c697175696469747960601b6044820152606490fd5b346101f55760203660031901126101f557600435610d35612186565b3360005260106020528060406000205410610e7a57610d5660085482611dcf565b90610d74610d676011548094611def565b92610cd360095484611dcf565b9082151580610e71575b15610e3857610daa903360005260106020526040600020610da0828254611dc2565b9055601154611dc2565b601155610db982600854611dc2565b600855610dc881600954611dc2565b6009553360005260056020526040600020610de4838254611de2565b90553360005260066020526040600020610dff828254611de2565b905560405191825260208201527f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05960403392a260018055005b60405162461bcd60e51b8152602060048201526011602482015270105b5bdd5b9d1cc81d1bdbc81cdb585b1b607a1b6044820152606490fd5b50811515610d7e565b60405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606490fd5b346101f55760003660031901126101f5576020600a54604051908152f35b346101f55760003660031901126101f5576020600354604051908152f35b346101f55760003660031901126101f5576000546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f557600435600052600f6020526020604060002054604051908152f35b346101f55760003660031901126101f5576020601154604051908152f35b346101f55760003660031901126101f5576020600d54604051908152f35b346101f55760403660031901126101f5576020610fa9610fa0611d21565b602435906120db565b604051908152f35b346101f55760403660031901126101f557611042600435610fdd60018060a01b03600254163314611f33565b600d54600052600b60205280604060002055600d54600052600c602052426040600020557fd94095e772153bc53343941705b59e466d4e8aca1062afe01193089d27ff3a7f6060600d54926040519084825260208201526024356040820152a1612056565b600d55005b346101f55760003660031901126101f55761106061215d565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101f55760203660031901126101f5576004356110bc61215d565b610e1081116110ca57600e55005b60405162461bcd60e51b815260206004820152600e60248201526d44656c617920746f6f206c6f6e6760901b6044820152606490fd5b346101f55760c03660031901126101f5576024356001600160401b0381116101f557611130903690600401611d30565b906044356001600160401b0381116101f557611150903690600401611d30565b91906064356001600160401b0381116101f557611171903690600401611d30565b6084356001600160401b0381116101f557611190903690600401611d30565b909160a4356001600160401b0381116101f5576111b1903690600401611d30565b9790966111c960018060a01b03600254163314611f33565b6111d1612186565b600435600052600c6020526111ee604060002054600e5490611de2565b421061173b57600435600052600b6020526040600020541561170057818a14806116f7575b806116ee575b806116e5575b156116a857600435600052600f60205260406000209860005b8b8110611283577fd4c22493e0aaec761df8f89beac249a28e68282a4c072c247156d6ce537618c960608d8d426004555460405191600435835260208301526040820152a160018055005b611296611291828e86611f7f565b611f8f565b6112a96112a483878d611f7f565b611fa3565b6112b483888c611f7f565b356112c0848a8c611f7f565b3591604051936112cf85611e9b565b6001600160a01b03168085529015156020808601918252604080870194855260608088019687526000608098890190815282519384019586529351151591830191909152935193810193909352925193820193909352905160a08201526113398160c081016107f0565b51902082821015611692578160051b8b0135601e198c3603018112156101f5578b016001600160401b038135116101f557803560051b360360208201136101f5578d916113a291600435600052600b60205261081a604060002054913690602081359101611fb0565b1561161657611291826113b59286611f7f565b6113c36112a483878d611f7f565b6113ce83888c611f7f565b356113da848a8c611f7f565b6040516326da427160e11b81526001600160a01b039094166004850152911515602484015260448301523560648201526020816084816000305af1906000826115e3575b50506115b6576001600060033d116115a8575b6308c379a014611456575b61144a576001905b01611238565b6040513d6000823e3d90fd5b61145e612065565b8061146a575b5061143c565b905060009082825260018d016020526040822060ff19815416905582825260028d0160205260408220908051906001600160401b0382116115945781906114b18454612005565b601f8111611559575b50602090601f83116001146114f65785926114eb575b50508160011b916000199060031b1c19161790555b8d611464565b0151905038806114d0565b8486528186209250601f198416865b8181106115415750908460019594939210611528575b505050811b0190556114e5565b015160001960f88460031b161c1916905538808061151b565b92936020600181928786015181550195019301611505565b6115849085875260208720601f850160051c8101916020861061158a575b601f0160051c019061203f565b386114ba565b9091508190611577565b634e487b7160e01b84526041600452602484fd5b600481803e5160e01c611431565b80600191600052818c0160205260406000208260ff198254161790556115dc8c54612056565b8c55611444565b6020823d821161160e575b816115fb60209383611eb6565b8101031261160b5750518e61141e565b80fd5b3d91506115ee565b5080600191600052818c01602052604060002060ff1981541690558060005260028c01602052604060002061164b8154612005565b601f8111611670575b50601a6c24b73b30b634b210383937b7b360991b019055611444565b61168c9082600052601f6020600020910160051c81019061203f565b8e611654565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b50888a1461121f565b50838a14611219565b50828a14611213565b60405162461bcd60e51b815260206004820152601360248201527210985d18da081b9bdd0818dbdb5b5a5d1d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275135d5cdd081dd85a5d0818599d195c8818dbdb5b5a5d60521b6044820152606490fd5b346101f55760203660031901126101f5576004356000602060018060a01b03600754166064604051809481936323b872dd60e01b83523360048401523060248401528760448401525af1801561144a576117db91600091611831575b50611eef565b33600052600660205260406000206117f4828254611de2565b9055604051908152600060208201524260408201527ffa430e490a18c9d02a4c0bf501c1b5821a600e09249e983f8491c6575dd5e42060603392a2005b611853915060203d602011611859575b61184b8183611eb6565b810190611ed7565b836117d5565b503d611841565b346101f55760003660031901126101f5576002546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f557600435600052600c6020526020604060002054604051908152f35b346101f55760203660031901126101f5576001600160a01b036118d6611d0b565b1660005260066020526020604060002054604051908152f35b346101f55760203660031901126101f55760043561190b612186565b336000526006602052611925816040600020541015611d76565b336000526006602052604060002061193e828254611dc2565b905560075460405163a9059cbb60e01b81523360048201526024810183905290602090829060449082906000906001600160a01b03165af1801561144a5761198d916000916118315750611eef565b604051908152600060208201527f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a60403392a260018055005b346101f55760803660031901126101f5576119df611d0b565b60243580151581036101f5576044359160643591303303611ba35715611ad7576001600160a01b0316600081815260056020526040902054611a2390841115611e4f565b600a546103e8036103e881116105b557611a3d9084611dcf565b92611a4a84600954611dcf565b916008546103e88102908082046103e814901517156105b557611a79611abd9461050f602098611a8294611de2565b94851015611e0f565b80600052600585526040600020611a9a838254611dc2565b9055600052600684526040600020611ab3848254611de2565b9055600854611de2565b600855611acc81600954611dc2565b600955604051908152f35b6001600160a01b0316600081815260066020526040902054611afb90841115611d76565b600a546103e8036103e881116105b557611b159084611dcf565b92611b2284600854611dcf565b916009546103e88102908082046103e814901517156105b557611a79611b8c9461050f602098611b5194611de2565b80600052600685526040600020611b69838254611dc2565b9055600052600584526040600020611b82848254611de2565b9055600954611de2565b600955611b9b81600854611dc2565b600855610fa9565b60405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c6520696e7465726e616c6c7900000000000000006044820152606490fd5b346101f55760203660031901126101f557600435611c0461215d565b60328111611c1157600a55005b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b346101f55760203660031901126101f5576001600160a01b03611c66611d0b565b1660005260056020526020604060002054604051908152f35b346101f55760203660031901126101f557611c98611d0b565b611ca061215d565b6002546001600160a01b0391821691829082167f6ec88bae255aa7e73521c3beb17e9bc7940169e669440c5531733c0d2e91110d600080a36001600160a01b03191617600255005b346101f55760003660031901126101f55760209060ff60025460a01c1615158152f35b600435906001600160a01b03821682036101f557565b6004359081151582036101f557565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460051b0101116101f557565b60409060031901126101f5576004359060243590565b15611d7d57565b60405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606490fd5b919082039182116105b557565b818102929181159184041417156105b557565b919082018092116105b557565b8115611df9570490565b634e487b7160e01b600052601260045260246000fd5b15611e1657565b60405162461bcd60e51b81526020600482015260116024820152700a6d8d2e0e0c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b15611e5657565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152606490fd5b60a081019081106001600160401b038211176103f057604052565b90601f801991011681019081106001600160401b038211176103f057604052565b908160209103126101f5575180151581036101f55790565b15611ef657565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b15611f3a57565b60405162461bcd60e51b815260206004820152601760248201527f4f6e6c792073657175656e6365722063616e2063616c6c0000000000000000006044820152606490fd5b91908110156116925760051b0190565b356001600160a01b03811681036101f55790565b3580151581036101f55790565b929190926001600160401b0384116103f0578360051b906020604051611fd882850182611eb6565b80968152019181019283116101f557905b828210611ff557505050565b8135815260209182019101611fe9565b90600182811c92168015612035575b602083101461201f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612014565b81811061204a575050565b6000815560010161203f565b60001981146105b55760010190565b600060443d106120ca576040513d600319016004823e8051913d60248401116001600160401b038411176120d557828201928351916001600160401b0383116120cd573d840160031901858401602001116120cd57506120ca92910160200190611eb6565b90565b949350505050565b92915050565b90600a546103e8036103e881116105b5576120f591611dcf565b901561212c5761210781600954611dcf565b6008546103e88102908082046103e814901517156105b5576120ca9261050f91611de2565b61213881600854611dcf565b6009546103e88102908082046103e814901517156105b5576120ca9261050f91611de2565b6000546001600160a01b0316330361217157565b63118cdaa760e01b6000523360045260246000fd5b600260015414612197576002600155565b633ee5aeb560e01b60005260046000fd5b929091906000915b84518310156121f157604060019160009060208660051b89010151908181106000146121e5578252602052205b9201916121b0565b908252602052206121dd565b91509250149056fea2646970667358221220a6cc605f9f1362659e6477770d35cdb7f26172a8773ccf769b9e1f0eb0c0e03864736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x17D6263F EQ PUSH2 0x1CE8 JUMPI POP DUP1 PUSH4 0x2547FA3E EQ PUSH2 0x1C7F JUMPI DUP1 PUSH4 0x3CFBA0E3 EQ PUSH2 0x1C45 JUMPI DUP1 PUSH4 0x45596E2E EQ PUSH2 0x1BE8 JUMPI DUP1 PUSH4 0x4DB484E2 EQ PUSH2 0x19C6 JUMPI DUP1 PUSH4 0x50BAA622 EQ PUSH2 0x18EF JUMPI DUP1 PUSH4 0x523FBA7F EQ PUSH2 0x18B5 JUMPI DUP1 PUSH4 0x54CC3C74 EQ PUSH2 0x1889 JUMPI DUP1 PUSH4 0x5C1BBA38 EQ PUSH2 0x1860 JUMPI DUP1 PUSH4 0x6215BE77 EQ PUSH2 0x1779 JUMPI DUP1 PUSH4 0x6868BAB5 EQ PUSH2 0x1100 JUMPI DUP1 PUSH4 0x6B27E2BB EQ PUSH2 0x10A0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1047 JUMPI DUP1 PUSH4 0x80A4F6DF EQ PUSH2 0xFB1 JUMPI DUP1 PUSH4 0x8290D9B8 EQ PUSH2 0xF82 JUMPI DUP1 PUSH4 0x8462A7F8 EQ PUSH2 0xF64 JUMPI DUP1 PUSH4 0x87CD5B20 EQ PUSH2 0xF46 JUMPI DUP1 PUSH4 0x88DA2B2D EQ PUSH2 0xF1A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEF1 JUMPI DUP1 PUSH4 0x9729CC05 EQ PUSH2 0xED3 JUMPI DUP1 PUSH4 0x978BBDB9 EQ PUSH2 0xEB5 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xD19 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xAFF JUMPI DUP1 PUSH4 0x9DB4AA04 EQ PUSH2 0xAC5 JUMPI DUP1 PUSH4 0xA03FD9C2 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0xB0B9B66A EQ PUSH2 0x8DB JUMPI DUP1 PUSH4 0xB7AFE9BE EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0xC13C0EA5 EQ PUSH2 0x891 JUMPI DUP1 PUSH4 0xC901510B EQ PUSH2 0x829 JUMPI DUP1 PUSH4 0xCB29FDC7 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xCBCB3171 EQ PUSH2 0x6FC JUMPI DUP1 PUSH4 0xD5E10708 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xD62CCB3F EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x429 JUMPI DUP1 PUSH4 0xE71BFDC0 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xF14210A6 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xF6326FB3 EQ PUSH2 0x1FA JUMPI PUSH4 0xFC0C546A EQ PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x21F CALLVALUE DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xFA430E490A18C9D02A4C0BF501C1B5821A600E09249E983F8491C6575DD5E420 PUSH1 0x60 CALLER SWAP3 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x275 PUSH2 0x1D0B JUMP JUMPDEST PUSH2 0x27D PUSH2 0x215D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x301 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0x31B DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x334 DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 CALLER GAS CALL RETURNDATASIZE ISZERO PUSH2 0x406 JUMPI RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x36C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6E0C61E7E9F4912EE1F3CE060B59207B98F9A232D711462AF3166AEEED1250A PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x115512081D1C985B9CD9995C8819985A5B1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x377 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3E8 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x47D PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x48B PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x6B7 JUMPI DUP4 ISZERO PUSH2 0x5CB JUMPI POP CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0x4BB DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x4D5 SWAP1 DUP3 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x4E2 DUP5 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP4 PUSH1 0x8 SLOAD SWAP1 PUSH2 0x3E8 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x20 SWAP6 PUSH2 0x50F PUSH2 0x515 SWAP3 PUSH2 0x51E SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 PUSH2 0x1DEF JUMP JUMPDEST SWAP4 DUP5 LT ISZERO PUSH2 0x1E0F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x536 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x550 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x55E DUP3 PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x56D DUP4 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE DUP3 DUP5 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xAAFE03BB75A5A17474AA34C7AA7923939142DCC00FAD86BA2217A698E5890531 PUSH1 0x60 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 CALLER DUP5 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x5E4 DUP3 PUSH1 0x40 DUP7 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x6A3 JUMPI PUSH2 0x5FE SWAP1 DUP4 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x60A DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP5 PUSH1 0x9 SLOAD SWAP1 PUSH2 0x3E8 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x68F JUMPI POP PUSH1 0x20 SWAP6 PUSH2 0x50F PUSH2 0x638 SWAP4 PUSH2 0x515 SWAP4 PUSH2 0x1DE2 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x650 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x66A DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x678 DUP3 PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x687 DUP4 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x571 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446972656374207377617073206E6F7420616C6C6F7765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x1F5 JUMPI PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x1F5 JUMPI PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x81A PUSH2 0x776 PUSH2 0x81F SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x786 DUP4 PUSH2 0x1E9B JUMP JUMPDEST DUP3 MSTORE DUP7 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x7FE DUP2 PUSH2 0x7F0 DUP10 DUP3 ADD SWAP5 DUP6 SWAP2 SWAP1 SWAP2 PUSH1 0x80 DUP1 PUSH1 0xA0 DUP4 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1EB6 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP3 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 CALLDATASIZE SWAP2 PUSH2 0x1FB0 JUMP JUMPDEST PUSH2 0x21A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH32 0x33D081570F4871CFC13364650930F27EFE5E1BE344DA69C94D4E75C06FA02F04 PUSH1 0x20 PUSH2 0x865 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x86D PUSH2 0x215D JUMP JUMPDEST ISZERO ISZERO PUSH1 0x2 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL DUP3 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH2 0x8E9 CALLDATASIZE PUSH2 0x1D60 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x1 DUP2 ADD PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND SWAP3 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x92D DUP5 PUSH2 0x2005 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x9EF JUMPI POP PUSH1 0x1 EQ PUSH2 0x9A8 JUMPI JUMPDEST POP PUSH2 0x952 SWAP3 POP SUB DUP3 PUSH2 0x1EB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x990 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x96E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP3 SWAP2 SWAP3 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x9D3 JUMPI POP POP SWAP1 PUSH1 0x20 PUSH2 0x952 SWAP3 DUP3 ADD ADD DUP6 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 POP DUP1 PUSH1 0x1 SWAP2 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP4 SWAP3 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x952 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD DUP6 PUSH2 0x945 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0xA31 PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST TIMESTAMP GT ISZERO PUSH2 0xA72 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE PUSH32 0x33D081570F4871CFC13364650930F27EFE5E1BE344DA69C94D4E75C06FA02F04 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53657175656E636572206E6F7420636F6E7369646572656420696E6163746976 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x19481E595D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAE6 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH2 0xB0D CALLDATASIZE PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0xB15 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH2 0xB2F DUP3 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1E4F JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0xB49 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP1 PUSH2 0xCA7 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0xC6F JUMPI PUSH2 0xBD5 SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xB77 DUP6 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xB92 DUP5 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xBA0 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xBAF DUP4 PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xBCB DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x11 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xAC1D76749E5447B7B16F5AB61447E1BD502F3BB4807AF3B28E620D1700A6EE45 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x8 SLOAD ISZERO ISZERO DUP1 PUSH2 0xC64 JUMPI JUMPDEST ISZERO PUSH2 0xC1F JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52657365727665732063616E6E6F74206265207A65726F000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD ISZERO ISZERO PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x139BC81CDA185C995CC81B5A5B9D1959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xCB3 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH2 0xCC1 DUP3 DUP6 PUSH2 0x1DCF JUMP JUMPDEST SUB PUSH2 0xCDD JUMPI PUSH2 0xCD3 PUSH2 0xCD8 SWAP3 DUP6 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x1DEF JUMP JUMPDEST PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x556E62616C616E636564206C6971756964697479 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD35 PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0xE7A JUMPI PUSH2 0xD56 PUSH1 0x8 SLOAD DUP3 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 PUSH2 0xD74 PUSH2 0xD67 PUSH1 0x11 SLOAD DUP1 SWAP5 PUSH2 0x1DEF JUMP JUMPDEST SWAP3 PUSH2 0xCD3 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 DUP3 ISZERO ISZERO DUP1 PUSH2 0xE71 JUMPI JUMPDEST ISZERO PUSH2 0xE38 JUMPI PUSH2 0xDAA SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDA0 DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x11 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH2 0xDB9 DUP3 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xDC8 DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDE4 DUP4 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xDFF DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x96CD817C6329656790EF8FBA7675405193677D39619571282F5E21F3A98CD059 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x105B5BDD5B9D1CC81D1BDBC81CDB585B1B PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E73756666696369656E7420736861726573 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH1 0xD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 PUSH2 0xFA9 PUSH2 0xFA0 PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1042 PUSH1 0x4 CALLDATALOAD PUSH2 0xFDD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 SLOAD AND CALLER EQ PUSH2 0x1F33 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0xD SLOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH32 0xD94095E772153BC53343941705B59E466D4E8ACA1062AFE01193089D27FF3A7F PUSH1 0x60 PUSH1 0xD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE LOG1 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0xD SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1060 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x10BC PUSH2 0x215D JUMP JUMPDEST PUSH2 0xE10 DUP2 GT PUSH2 0x10CA JUMPI PUSH1 0xE SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x44656C617920746F6F206C6F6E67 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1130 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1150 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1171 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x1190 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1F5 JUMPI PUSH2 0x11B1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D30 JUMP JUMPDEST SWAP8 SWAP1 SWAP7 PUSH2 0x11C9 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 SLOAD AND CALLER EQ PUSH2 0x1F33 JUMP JUMPDEST PUSH2 0x11D1 PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH2 0x11EE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xE SLOAD SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST TIMESTAMP LT PUSH2 0x173B JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO PUSH2 0x1700 JUMPI DUP2 DUP11 EQ DUP1 PUSH2 0x16F7 JUMPI JUMPDEST DUP1 PUSH2 0x16EE JUMPI JUMPDEST DUP1 PUSH2 0x16E5 JUMPI JUMPDEST ISZERO PUSH2 0x16A8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP9 PUSH1 0x0 JUMPDEST DUP12 DUP2 LT PUSH2 0x1283 JUMPI PUSH32 0xD4C22493E0AAEC761DF8F89BEAC249A28E68282A4C072C247156D6CE537618C9 PUSH1 0x60 DUP14 DUP14 TIMESTAMP PUSH1 0x4 SSTORE SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG1 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH2 0x1296 PUSH2 0x1291 DUP3 DUP15 DUP7 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x1F8F JUMP JUMPDEST PUSH2 0x12A9 PUSH2 0x12A4 DUP4 DUP8 DUP14 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x1FA3 JUMP JUMPDEST PUSH2 0x12B4 DUP4 DUP9 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD PUSH2 0x12C0 DUP5 DUP11 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x12CF DUP6 PUSH2 0x1E9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP1 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP8 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP1 DUP9 ADD SWAP7 DUP8 MSTORE PUSH1 0x0 PUSH1 0x80 SWAP9 DUP10 ADD SWAP1 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP5 ADD SWAP6 DUP7 MSTORE SWAP4 MLOAD ISZERO ISZERO SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 MLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 MLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1339 DUP2 PUSH1 0xC0 DUP2 ADD PUSH2 0x7F0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP3 DUP3 LT ISZERO PUSH2 0x1692 JUMPI DUP2 PUSH1 0x5 SHL DUP12 ADD CALLDATALOAD PUSH1 0x1E NOT DUP13 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1F5 JUMPI DUP12 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD GT PUSH2 0x1F5 JUMPI DUP1 CALLDATALOAD PUSH1 0x5 SHL CALLDATASIZE SUB PUSH1 0x20 DUP3 ADD SGT PUSH2 0x1F5 JUMPI DUP14 SWAP2 PUSH2 0x13A2 SWAP2 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x81A PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 CALLDATASIZE SWAP1 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x1FB0 JUMP JUMPDEST ISZERO PUSH2 0x1616 JUMPI PUSH2 0x1291 DUP3 PUSH2 0x13B5 SWAP3 DUP7 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x13C3 PUSH2 0x12A4 DUP4 DUP8 DUP14 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0x13CE DUP4 DUP9 DUP13 PUSH2 0x1F7F JUMP JUMPDEST CALLDATALOAD PUSH2 0x13DA DUP5 DUP11 DUP13 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x26DA4271 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP2 ISZERO ISZERO PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x84 DUP2 PUSH1 0x0 ADDRESS GAS CALL SWAP1 PUSH1 0x0 DUP3 PUSH2 0x15E3 JUMPI JUMPDEST POP POP PUSH2 0x15B6 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT PUSH2 0x15A8 JUMPI JUMPDEST PUSH4 0x8C379A0 EQ PUSH2 0x1456 JUMPI JUMPDEST PUSH2 0x144A JUMPI PUSH1 0x1 SWAP1 JUMPDEST ADD PUSH2 0x1238 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x145E PUSH2 0x2065 JUMP JUMPDEST DUP1 PUSH2 0x146A JUMPI JUMPDEST POP PUSH2 0x143C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP1 DUP3 DUP3 MSTORE PUSH1 0x1 DUP14 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP3 DUP3 MSTORE PUSH1 0x2 DUP14 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1594 JUMPI DUP2 SWAP1 PUSH2 0x14B1 DUP5 SLOAD PUSH2 0x2005 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1559 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x14F6 JUMPI DUP6 SWAP3 PUSH2 0x14EB JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST DUP14 PUSH2 0x1464 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x14D0 JUMP JUMPDEST DUP5 DUP7 MSTORE DUP2 DUP7 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0x1541 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1528 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x14E5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x151B JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1505 JUMP JUMPDEST PUSH2 0x1584 SWAP1 DUP6 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x158A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x203F JUMP JUMPDEST CODESIZE PUSH2 0x14BA JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1577 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x4 DUP2 DUP1 RETURNDATACOPY MLOAD PUSH1 0xE0 SHR PUSH2 0x1431 JUMP JUMPDEST DUP1 PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE DUP2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x15DC DUP13 SLOAD PUSH2 0x2056 JUMP JUMPDEST DUP13 SSTORE PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x160E JUMPI JUMPDEST DUP2 PUSH2 0x15FB PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x160B JUMPI POP MLOAD DUP15 PUSH2 0x141E JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x15EE JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE DUP2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 DUP13 ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x164B DUP2 SLOAD PUSH2 0x2005 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1670 JUMPI JUMPDEST POP PUSH1 0x1A PUSH13 0x24B73B30B634B210383937B7B3 PUSH1 0x99 SHL ADD SWAP1 SSTORE PUSH2 0x1444 JUMP JUMPDEST PUSH2 0x168C SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH2 0x203F JUMP JUMPDEST DUP15 PUSH2 0x1654 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x82E4E4C2F240D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP9 DUP11 EQ PUSH2 0x121F JUMP JUMPDEST POP DUP4 DUP11 EQ PUSH2 0x1219 JUMP JUMPDEST POP DUP3 DUP11 EQ PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x10985D18DA081B9BDD0818DBDB5B5A5D1D1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x135D5CDD081DD85A5D0818599D195C8818DBDB5B5A5D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x7 SLOAD AND PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE DUP8 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x144A JUMPI PUSH2 0x17DB SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1831 JUMPI JUMPDEST POP PUSH2 0x1EEF JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x17F4 DUP3 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0xFA430E490A18C9D02A4C0BF501C1B5821A600E09249E983F8491C6575DD5E420 PUSH1 0x60 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x1853 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1859 JUMPI JUMPDEST PUSH2 0x184B DUP2 DUP4 PUSH2 0x1EB6 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1ED7 JUMP JUMPDEST DUP4 PUSH2 0x17D5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1841 JUMP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x18D6 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x190B PUSH2 0x2186 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x1925 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D76 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x193E DUP3 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x144A JUMPI PUSH2 0x198D SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1831 JUMPI POP PUSH2 0x1EEF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6E0C61E7E9F4912EE1F3CE060B59207B98F9A232D711462AF3166AEEED1250A PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x19DF PUSH2 0x1D0B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP2 ADDRESS CALLER SUB PUSH2 0x1BA3 JUMPI ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1A23 SWAP1 DUP5 GT ISZERO PUSH2 0x1E4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x1A3D SWAP1 DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x1A4A DUP5 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP2 PUSH1 0x8 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x1A79 PUSH2 0x1ABD SWAP5 PUSH2 0x50F PUSH1 0x20 SWAP9 PUSH2 0x1A82 SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST SWAP5 DUP6 LT ISZERO PUSH2 0x1E0F JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1A9A DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x6 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AB3 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x8 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x1ACC DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1AFB SWAP1 DUP5 GT ISZERO PUSH2 0x1D76 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x1B15 SWAP1 DUP5 PUSH2 0x1DCF JUMP JUMPDEST SWAP3 PUSH2 0x1B22 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST SWAP2 PUSH1 0x9 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x1A79 PUSH2 0x1B8C SWAP5 PUSH2 0x50F PUSH1 0x20 SWAP9 PUSH2 0x1B51 SWAP5 PUSH2 0x1DE2 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1B69 DUP4 DUP3 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1B82 DUP5 DUP3 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x9 SLOAD PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x1B9B DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C6520696E7465726E616C6C790000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1C04 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x32 DUP2 GT PUSH2 0x1C11 JUMPI PUSH1 0xA SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x8CCACA40E8DEDE40D0D2CED PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C66 PUSH2 0x1D0B JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x1C98 PUSH2 0x1D0B JUMP JUMPDEST PUSH2 0x1CA0 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 DUP3 SWAP1 DUP3 AND PUSH32 0x6EC88BAE255AA7E73521C3BEB17E9BC7940169E669440C5531733C0D2E91110D PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x2 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1F5 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1F5 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1F5 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1F5 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x1F5 JUMPI JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D7D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x5B5 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x5B5 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1DF9 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1E16 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0xA6D8D2E0E0C2CECA40E8DEDE40D0D2CED PUSH1 0x7B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1E56 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E63650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1F5 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1EF6 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1F3A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792073657175656E6365722063616E2063616C6C000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1692 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1F5 JUMPI SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x3F0 JUMPI DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1FD8 DUP3 DUP6 ADD DUP3 PUSH2 0x1EB6 JUMP JUMPDEST DUP1 SWAP7 DUP2 MSTORE ADD SWAP2 DUP2 ADD SWAP3 DUP4 GT PUSH2 0x1F5 JUMPI SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1FF5 JUMPI POP POP POP JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2035 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x201F JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2014 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x204A JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x203F JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x5B5 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT PUSH2 0x20CA JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD SWAP2 RETURNDATASIZE PUSH1 0x24 DUP5 ADD GT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT OR PUSH2 0x20D5 JUMPI DUP3 DUP3 ADD SWAP3 DUP4 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x20CD JUMPI RETURNDATASIZE DUP5 ADD PUSH1 0x3 NOT ADD DUP6 DUP5 ADD PUSH1 0x20 ADD GT PUSH2 0x20CD JUMPI POP PUSH2 0x20CA SWAP3 SWAP2 ADD PUSH1 0x20 ADD SWAP1 PUSH2 0x1EB6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 PUSH1 0xA SLOAD PUSH2 0x3E8 SUB PUSH2 0x3E8 DUP2 GT PUSH2 0x5B5 JUMPI PUSH2 0x20F5 SWAP2 PUSH2 0x1DCF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x212C JUMPI PUSH2 0x2107 DUP2 PUSH1 0x9 SLOAD PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x20CA SWAP3 PUSH2 0x50F SWAP2 PUSH2 0x1DE2 JUMP JUMPDEST PUSH2 0x2138 DUP2 PUSH1 0x8 SLOAD PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x3E8 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH2 0x3E8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x5B5 JUMPI PUSH2 0x20CA SWAP3 PUSH2 0x50F SWAP2 PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2171 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x2197 JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x40 PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD MLOAD SWAP1 DUP2 DUP2 LT PUSH1 0x0 EQ PUSH2 0x21E5 JUMPI DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x21B0 JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x21DD JUMP JUMPDEST SWAP2 POP SWAP3 POP EQ SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 0xCC PUSH1 0x5F SWAP16 SGT PUSH3 0x659E64 PUSH24 0x770D35CDB7F26172A8773CCF769B9E1F0EB0C0E03864736F PUSH13 0x634300081C0033000000000000 ","sourceMap":"1285:23143:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;1658:19;1285:23143;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;5602:10;1285:23143;;5590:11;1285:23143;;;;;5590:36;5617:9;1285:23143;;5590:36;:::i;:::-;1285:23143;;;;5617:9;1285:23143;;5672:4;1285:23143;;;;5678:15;1285:23143;;;;5641:53;1285:23143;5602:10;5641:53;;1285:23143;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;-1:-1:-1;;;;;1285:23143:6;2627:22:0;;2623:91;;1285:23143:6;;;-1:-1:-1;;;;;;1285:23143:6;;;;;;-1:-1:-1;;;;;1285:23143:6;;3052:40:0;;1285:23143:6;3052:40:0;1285:23143:6;2623:91:0;2672:31;;;1285:23143:6;2672:31:0;1285:23143:6;;;;;2672:31:0;1285:23143:6;;;;;;-1:-1:-1;;1285:23143:6;;;;;;2466:103:3;;:::i;:::-;6459:10:6;1285:23143;;6447:11;1285:23143;;6439:70;1285:23143;;;;;6447:33;;6439:70;:::i;:::-;6459:10;1285:23143;;6447:11;1285:23143;;;;;6519:33;1285:23143;;;6519:33;:::i;:::-;1285:23143;;;6459:10;;;;;6581:43;;1285:23143;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;13126:18;1285:23143;;-1:-1:-1;;1285:23143:6;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6688:36;1285:23143;6459:10;6688:36;;1285:23143;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;3701:44;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;1789:4;1285:23143;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;1683:25;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;:::i;:::-;;;;;2466:103:3;;:::i;:::-;1285:23143:6;;19577:13;1285:23143;;;;;;19638:1506;;;;19688:10;;1285:23143;;19676:11;1285:23143;;19668:72;1285:23143;;;;;19676:35;;19668:72;:::i;:::-;19890:7;1285:23143;1789:4;1285:23143;1789:4;1285:23143;;;;19860:38;;;;:::i;:::-;1285:23143;19925:30;1285:23143;19925:12;1285:23143;19925:30;:::i;:::-;1285:23143;19985:10;1285:23143;;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;;19985:46;;19924:108;19985:46;20059:55;19985:46;;:::i;:::-;19924:108;;:::i;:::-;20067:25;;;;20059:55;:::i;:::-;19688:10;1285:23143;;19676:11;1285:23143;;;;;20177:35;1285:23143;;;20177:35;:::i;:::-;1285:23143;;19688:10;1285:23143;;20226:13;1285:23143;;;;;20226:38;1285:23143;;;20226:38;:::i;:::-;1285:23143;;20322:22;1285:23143;19985:10;1285:23143;20322:22;:::i;:::-;19985:10;1285:23143;20358:25;1285:23143;19925:12;1285:23143;20358:25;:::i;:::-;19925:12;1285:23143;19638:1506;1285:23143;;;;;;;;;;;;;;;;21167:57;1285:23143;21180:10;21167:57;;1285:23143;;;;;;;;;;;;;;;;;;;;;19638:1506;20436:10;;1285:23143;;20422:13;1285:23143;;20414:76;1285:23143;;;;;20422:37;;20414:76;:::i;:::-;20640:7;1285:23143;1789:4;1285:23143;1789:4;1285:23143;;;;20610:38;;;;:::i;:::-;20675:28;1285:23143;20675:10;1285:23143;20675:28;:::i;:::-;1285:23143;20733:12;1285:23143;;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;20733:48;1285:23143;20733:48;;20809:55;20733:48;20674:108;20733:48;;:::i;20809:55::-;20436:10;1285:23143;;20422:13;1285:23143;;;;;20927:37;1285:23143;;;20927:37;:::i;:::-;1285:23143;;20436:10;1285:23143;;20978:11;1285:23143;;;;;20978:36;1285:23143;;;20978:36;:::i;:::-;1285:23143;;21072:24;1285:23143;20733:12;1285:23143;21072:24;:::i;:::-;20733:12;1285:23143;21110:23;1285:23143;20675:10;1285:23143;21110:23;:::i;:::-;20675:10;1285:23143;19638:1506;;1285:23143;-1:-1:-1;;;1285:23143:6;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;1714:27;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;17906:104;1285:23143;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;17601:216;;;1285:23143;;;;17601:216;;1285:23143;;;;17601:216;;1285:23143;;;17601:216;;1285:23143;;;17861:18;;;;;;;;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17861:18;;13126;;17861;;;;;;:::i;:::-;1285:23143;17851:29;;1285:23143;;;;;17957:16;1285:23143;;;;;;;;;;:::i;:::-;17906:104;:::i;:::-;1285:23143;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;22970:36;1285:23143;;;:::i;:::-;1500:62:0;;:::i;:::-;1285:23143:6;;22925:30;1285:23143;;;;;;;;;;;;;;;22925:30;1285:23143;;;;;;22970:36;1285:23143;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;3514:51;1285:23143;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;18634:12;1285:23143;;18708:21;1285:23143;;;;;;18673:22;;;1285:23143;;;;;;;;;;;18708:21;1285:23143;;;;;;;;;;;;;;;;:::i;:::-;;;;;18673:22;1285:23143;;;18673:22;;;;1285:23143;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13126:18;;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18673:22;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;24249:34;1285:23143;;24270:13;1285:23143;24249:34;;:::i;:::-;24231:15;:52;1285:23143;;;;;;;24356:21;1285:23143;;24356:21;1285:23143;24392:27;1285:23143;;;;;;24392:27;1285:23143;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;;:::i;:::-;;;;4331:50;1285:23143;;;;;;;;;;;;;;;;;;;;:::i;:::-;2466:103:3;;:::i;:::-;7806:10:6;1285:23143;;7794:11;1285:23143;;7786:73;1285:23143;;;;;7794:36;;7786:73;:::i;:::-;7806:10;1285:23143;;7877:13;1285:23143;;7869:79;1285:23143;;;;;7877:40;;7869:79;:::i;:::-;7995:20;1285:23143;7995:25;;;8036:18;;7991:369;8386:10;;1285:23143;;8667:30;7806:10;;1285:23143;;7794:11;1285:23143;;;;;8436:36;1285:23143;;;8436:36;:::i;:::-;1285:23143;;7806:10;1285:23143;;7877:13;1285:23143;;;;;8482:40;1285:23143;;;8482:40;:::i;:::-;1285:23143;;8541:23;1285:23143;8541:23;1285:23143;8541:23;:::i;:::-;;1285:23143;8574:27;1285:23143;8574:27;1285:23143;8574:27;:::i;:::-;;1285:23143;7806:10;1285:23143;;8620:15;1285:23143;;;;;8620:37;1285:23143;;;8620:37;:::i;:::-;1285:23143;;7995:20;1285:23143;8667:30;:::i;:::-;7995:20;1285:23143;;;;;;;;;;8721:50;1285:23143;7806:10;8721:50;;8541:23;1285:23143;5303:14;;:34;;;7991:369;1285:23143;;;1857:1:3;1285:23143:6;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;5303:34;1285:23143;8574:27;1285:23143;5321:16;;5303:34;;1285:23143;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;7991:369;8202:24;8214:12;1285:23143;8202:24;;:::i;:::-;8244:10;1285:23143;8230:24;;;;;:::i;:::-;8202:52;1285:23143;;8303:32;8302:47;8303:32;;;:::i;:::-;8302:47;:::i;:::-;7991:369;;1285:23143;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;2466:103:3;;:::i;:::-;9175:10:6;1285:23143;;9159:15;1285:23143;;;;;;;9159:42;1285:23143;;9265:24;9279:10;1285:23143;9265:24;;:::i;:::-;1285:23143;9345:51;9264:49;9293:20;1285:23143;9264:49;;;:::i;:::-;1285:23143;9346:26;9360:12;1285:23143;9346:26;;:::i;9345:51::-;9423:13;;;;:32;;;1285:23143;;;;9548:35;9175:10;;1285:23143;;9159:15;1285:23143;;;;;9496:42;1285:23143;;;9496:42;:::i;:::-;1285:23143;;9293:20;1285:23143;9548:35;:::i;:::-;9293:20;1285:23143;9602:23;1285:23143;9279:10;1285:23143;9602:23;:::i;:::-;9279:10;1285:23143;9635:27;1285:23143;9360:12;1285:23143;9635:27;:::i;:::-;9360:12;1285:23143;9175:10;1285:23143;;9681:11;1285:23143;;;;;9681:36;1285:23143;;;9681:36;:::i;:::-;1285:23143;;9175:10;1285:23143;;9727:13;1285:23143;;;;;9727:40;1285:23143;;;9727:40;:::i;:::-;1285:23143;;;;;;;;;;;9791:52;1285:23143;9175:10;9791:52;;1285:23143;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;9293:20;1285:23143;;;;-1:-1:-1;;;1285:23143:6;;;;;;;9423:32;9440:15;;;;9423:32;;1285:23143;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;1799:26;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;1409:40;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;4116:51;1285:23143;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;4387:35;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;3665:30;1285:23143;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;10796:13;1285:23143;;4996:59;1285:23143;;;;;5018:9;1285:23143;;5004:10;:23;4996:59;:::i;:::-;10635:11;1285:23143;;;10618:16;1285:23143;;;;;;;10635:11;1285:23143;;;10670:20;1285:23143;;10706:15;1285:23143;;;;10736:50;1285:23143;10635:11;1285:23143;;;;;;;;;;;;;;;;;;10736:50;10796:13;:::i;:::-;10635:11;1285:23143;;;;;;;;-1:-1:-1;;1285:23143:6;;;;1500:62:0;;:::i;:::-;1285:23143:6;;;-1:-1:-1;;;;;;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;3052:40:0;1285:23143:6;;3052:40:0;1285:23143:6;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;1500:62:0;;:::i;:::-;23663:7:6;23653:17;;1285:23143;;23699:26;1285:23143;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;:::i;:::-;;;;4996:59;1285:23143;;;;;5018:9;1285:23143;;5004:10;:23;4996:59;:::i;:::-;2466:103:3;;:::i;:::-;1285:23143:6;;;;12127:20;1285:23143;;12127:49;1285:23143;;;;12159:17;1285:23143;12127:49;;:::i;:::-;12108:15;:68;1285:23143;;;;;;12238:16;1285:23143;;;;;;12238:39;1285:23143;;12319:38;;;:90;;;1285:23143;12319:146;;;1285:23143;12319:195;;;1285:23143;;;;;;;;12654:12;1285:23143;;;;;12699:10;1285:23143;12711:16;;;;;;14059:61;1285:23143;12108:15;;;1285:23143;;;;;;;;;;;;;;;;;;14059:61;1285:23143;;;;12729:3;12849:8;;;;;;:::i;:::-;;:::i;:::-;12887:18;;;;;;:::i;:::-;;:::i;:::-;12933:12;;;;;:::i;:::-;1285:23143;12977:16;;;;;:::i;:::-;1285:23143;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1285:23143:6;;;;;;;;12814:260;;;1285:23143;;;;12814:260;;;1285:23143;;;;12814:260;;;1285:23143;;;-1:-1:-1;1285:23143:6;12814:260;;;1285:23143;;;;;13126:18;;;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13126:18;1285:23143;;;;13126:18;1285:23143;13126:18;1285:23143;13116:29;;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;;;13227:124;1285:23143;;;;;12238:16;1285:23143;;;;;;;;;;;;;;;;:::i;13227:124::-;13382:13;13378:171;;13596:8;;;;;;:::i;:::-;13606:18;;;;;;:::i;:::-;13626:12;;;;;:::i;:::-;1285:23143;13640:16;;;;;:::i;:::-;1285:23143;;-1:-1:-1;;;13579:78:6;;-1:-1:-1;;;;;1285:23143:6;;;;13579:78;;1285:23143;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13579:4:6;:78;;;1285:23143;13579:78;;;12729:3;-1:-1:-1;;13575:357:6;;1285:23143;;;;;;;13575:357;;;;;;;;1285:23143;13575:357;;1285:23143;12699:10;;13575:357;1285:23143;;;;;;;;;13575:357;13781:151;;:::i;:::-;;;;13575:357;;;;13781:151;;;1285:23143;;;;;;13833:22;;1285:23143;;;;;;;;;;;;;;;5018:9;13884:21;;1285:23143;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;:::i;:::-;;;;;;13781:151;1285:23143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13781:151;;;1285:23143;;;;-1:-1:-1;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;1285:23143:6;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;13575:357;1285:23143;;;;;13694:22;;;1285:23143;;;;;;;;;;;;;;13744:21;1285:23143;;13744:21;:::i;:::-;1285:23143;;13575:357;;13579:78;1285:23143;13579:78;;;;;;;;;1285:23143;13579:78;;;:::i;:::-;;;1285:23143;;;;;;13579:78;;;1285:23143;;;13579:78;;;-1:-1:-1;13579:78:6;;13378:171;1285:23143;;;;;;13415:22;;;1285:23143;;;;;;;;;;;;;;;5018:9;13466:21;;1285:23143;;;;;;;;;:::i;:::-;;;;;;13378:171;-1:-1:-1;;;;;;1285:23143:6;;13526:8;;1285:23143;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;12319:195;12485:29;;;;12319:195;;:146;12429:36;;;;12319:146;;:90;12377:32;;;;12319:90;;1285:23143;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;;;;;;5976:5;1285:23143;;5976:53;1285:23143;;;;;;;;;5976:53;;5995:10;1285:23143;5976:53;;1285:23143;6015:4;1285:23143;;;;;;;;;5976:53;;;;;;5968:87;5976:53;1285:23143;5976:53;;;1285:23143;5968:87;;:::i;:::-;5995:10;1285:23143;;6065:13;1285:23143;;;;;6065:35;1285:23143;;;6065:35;:::i;:::-;1285:23143;;;;;;;;;;;;6150:15;1285:23143;;;;6115:51;1285:23143;5995:10;6115:51;;1285:23143;5976:53;;;;1285:23143;5976:53;1285:23143;5976:53;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1285:23143;;;;;;-1:-1:-1;;1285:23143:6;;;;1341:24;1285:23143;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;3604:55;1285:23143;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;;:::i;:::-;;;;1572:48;1285:23143;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;2466:103:3;;:::i;:::-;7027:10:6;1285:23143;;7013:13;1285:23143;;7005:74;1285:23143;;;;;7013:35;;7005:74;:::i;:::-;7027:10;1285:23143;;7013:13;1285:23143;;;;;7089:35;1285:23143;;;7089:35;:::i;:::-;1285:23143;;7142:5;1285:23143;;;-1:-1:-1;;;7142:34:6;;7027:10;1285:23143;7142:34;;1285:23143;;;;;;;;;;;;7142:34;;1285:23143;;;;-1:-1:-1;;;;;1285:23143:6;7142:34;;;;;;7134:68;7142:34;1285:23143;7142:34;;;7134:68;;:::i;:::-;1285:23143;;;;;;;;;;7217:37;1285:23143;7027:10;7217:37;;1285:23143;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;:::i;:::-;;;;;;;;;;;;;;;;15183:4;15161:10;:27;1285:23143;;15236:1470;;;-1:-1:-1;;;;;1285:23143:6;;;;;15274:11;1285:23143;;;;;;15266:66;;15274:29;-1:-1:-1;15274:29:6;15266:66;:::i;:::-;15482:7;1285:23143;1789:4;1285:23143;1789:4;1285:23143;;;;15452:38;;;;:::i;:::-;1285:23143;15517:30;1285:23143;15517:12;1285:23143;15517:30;:::i;:::-;1285:23143;15577:10;1285:23143;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;15516:108;15902:22;15577:46;;1285:23143;15577:46;15651:55;15577:46;;:::i;15516:108::-;15659:25;;;;15651:55;:::i;:::-;1285:23143;;;15274:11;1285:23143;;;;;15769:29;1285:23143;;;15769:29;:::i;:::-;1285:23143;;;;15812:13;1285:23143;;;;;15812:32;1285:23143;;;15812:32;:::i;:::-;1285:23143;;15577:10;1285:23143;15902:22;:::i;:::-;15577:10;1285:23143;15938:25;1285:23143;15517:12;1285:23143;15938:25;:::i;:::-;15517:12;1285:23143;;;;;;;15236:1470;-1:-1:-1;;;;;1285:23143:6;;;;;16002:13;1285:23143;;;;;;15994:70;;16002:31;-1:-1:-1;16002:31:6;15994:70;:::i;:::-;16214:7;1285:23143;1789:4;1285:23143;1789:4;1285:23143;;;;16184:38;;;;:::i;:::-;1285:23143;16249:28;1285:23143;16249:10;1285:23143;16249:28;:::i;:::-;1285:23143;16307:12;1285:23143;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;16248:108;16634:24;16307:48;;1285:23143;16307:48;16383:55;16307:48;;:::i;16383:55::-;1285:23143;;;16002:13;1285:23143;;;;;16501:31;1285:23143;;;16501:31;:::i;:::-;1285:23143;;;;16546:11;1285:23143;;;;;16546:30;1285:23143;;;16546:30;:::i;:::-;1285:23143;;16307:12;1285:23143;16634:24;:::i;:::-;16307:12;1285:23143;16672:23;1285:23143;16249:10;1285:23143;16672:23;:::i;:::-;16249:10;1285:23143;15236:1470;;1285:23143;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;1500:62:0;;:::i;:::-;23326:2:6;23314:14;;1285:23143;;23365:18;1285:23143;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;-1:-1:-1;;;;;1285:23143:6;;:::i;:::-;;;;1520:46;1285:23143;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;22429:9:6;1285:23143;-1:-1:-1;;;;;1285:23143:6;;;;;;;;22412:41;1285:23143;;22412:41;-1:-1:-1;;;;;;1285:23143:6;;22429:9;1285:23143;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;1371:32;1285:23143;;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;:::o;:::-;;;13126:18;;1285:23143;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1285:23143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;1285:23143:6;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;;;;;;-1:-1:-1;;;;;1285:23143:6;;;;;;;-1:-1:-1;;1285:23143:6;;;;;;;;;-1:-1:-1;1285:23143:6;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;:::o;21681:480::-;;21836:7;1285:23143;1789:4;1285:23143;1789:4;1285:23143;;;;21806:38;;;:::i;:::-;21863:292;;;;21901:30;1285:23143;21901:12;1285:23143;21901:30;:::i;:::-;21956:10;1285:23143;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;21900:103;21956:46;;;;:::i;21863:292::-;22042:28;1285:23143;22042:10;1285:23143;22042:28;:::i;:::-;22095:12;1285:23143;1789:4;1285:23143;;;;;;1789:4;1285:23143;;;;;;;22041:103;22095:48;;;;:::i;1796:162:0:-;1710:6;1285:23143:6;-1:-1:-1;;;;;1285:23143:6;735:10:2;1855:23:0;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:2;1901:40:0;1285:23143:6;;1710:6:0;1901:40;2575:307:3;1899:1;2702:7;1285:23143:6;2702:18:3;2698:86;;1899:1;2702:7;1285:23143:6;2575:307:3:o;2698:86::-;2743:30;;;-1:-1:-1;2743:30:3;;-1:-1:-1;2743:30:3;1902:154:5;;;;2601:13;-1:-1:-1;2596:134:5;2634:3;1285:23143:6;;2616:16:5;;;;;889:135:4;1285:23143:6;;-1:-1:-1;1285:23143:6;;;;;;;;;605:59:4;:5;;;:59;:5;;;889:135;;1285:23143:6;889:135:4;;605:59;2634:3:5;1285:23143:6;2601:13:5;;;605:59:4;889:135;;;1285:23143:6;889:135:4;;605:59;;2616:16:5;;;;;2016:33;1902:154;:::o"},"methodIdentifiers":{"FEE_DENOMINATOR()":"d73792a9","addLiquidity(uint256,uint256)":"9cd441da","batchIntentRoots(uint256)":"c13c0ea5","batchResults(uint256)":"88da2b2d","batchSubmissionTimes(uint256)":"54cc3c74","batchSwap(uint256,address[],bool[],uint256[],uint256[],bytes32[][])":"6868bab5","commitBatchIntents(bytes32,uint256)":"80a4f6df","commitRevealDelay()":"e71bfdc0","depositETH()":"f6326fb3","depositToken(uint256)":"6215be77","emergencyDisableSequencer()":"a03fd9c2","ethBalances(address)":"3cfba0e3","ethReserve()":"d62ccb3f","executeSwap(address,bool,uint256,uint256)":"4db484e2","fallbackSwap(bool,uint256,uint256)":"d5e10708","feeRate()":"978bbdb9","getAmountOut(bool,uint256)":"8290d9b8","getSwapResult(uint256,uint256)":"b0b9b66a","lastBatchTimestamp()":"b7afe9be","liquidityShares(address)":"9db4aa04","maxBatchDelay()":"9729cc05","nextBatchId()":"8462a7f8","owner()":"8da5cb5b","removeLiquidity(uint256)":"9c8f9f23","renounceOwnership()":"715018a6","sequencer()":"5c1bba38","sequencerOnly()":"17d6263f","setCommitRevealDelay(uint256)":"6b27e2bb","setFeeRate(uint256)":"45596e2e","setSequencer(address)":"2547fa3e","setSequencerOnly(bool)":"c901510b","token()":"fc0c546a","tokenBalances(address)":"523fba7f","tokenReserve()":"cbcb3171","totalLiquidityShares()":"87cd5b20","transferOwnership(address)":"f2fde38b","verifySwapInclusion(uint256,address,bool,uint256,uint256,bytes32[])":"cb29fdc7","withdrawETH(uint256)":"f14210a6","withdrawToken(uint256)":"50baa622"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"intentRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"BatchCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"}],\"name\":\"BatchSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"successCount\",\"type\":\"uint256\"}],\"name\":\"BatchSwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ethToToken\",\"type\":\"bool\"}],\"name\":\"FallbackSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSequencer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSequencer\",\"type\":\"address\"}],\"name\":\"SequencerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sequencerOnly\",\"type\":\"bool\"}],\"name\":\"SequencerModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchIntentRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"successCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchSubmissionTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"ethToTokenFlags\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"intentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"commitBatchIntents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitRevealDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyDisableSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ethToToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ethToToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"fallbackSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ethToToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapIndex\",\"type\":\"uint256\"}],\"name\":\"getSwapResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"failureReason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBatchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setCommitRevealDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSequencer\",\"type\":\"address\"}],\"name\":\"setSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_sequencerOnly\",\"type\":\"bool\"}],\"name\":\"setSequencerOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ethToToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifySwapInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An Automated Market Maker (AMM) with front-running protection via a trusted sequencer System Overview: This AMM prevents front-running and MEV attacks by removing user transactions from the public mempool. Instead of submitting swaps directly to the blockchain, users send swap intents to a trusted sequencer. The sequencer batches these intents off-chain and uses a commit-reveal pattern to execute them: 1. COMMIT PHASE: Sequencer submits a Merkle root of all swap intents (commitBatchIntents) 2. WAITING PERIOD: A mandatory delay prevents last-minute reordering (commitRevealDelay) 3. REVEAL & EXECUTE: Sequencer reveals and executes all swaps in the batch (batchSwap) 4. FALLBACK: If the sequencer becomes unavailable, users can swap directly (fallbackSwap) The contract also manages liquidity pools using the constant product formula (x*y=k) and handles user deposits, withdrawals, and balance tracking.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"Allows users to provide liquidity to the AMM pool\",\"params\":{\"ethAmount\":\"Amount of ETH to contribute\",\"tokenAmount\":\"Amount of tokens to contribute  Users receive liquidity shares proportional to their contribution. After the first deposit, contributions must maintain the current price ratio. Protected against reentrancy attacks.\"}},\"batchSwap(uint256,address[],bool[],uint256[],uint256[],bytes32[][])\":{\"details\":\"Second step of the commit-reveal pattern - sequencer reveals and executes the batch\",\"params\":{\"amountsIn\":\"Array of input amounts for each swap\",\"batchId\":\"The ID of the batch to execute\",\"ethToTokenFlags\":\"Array of swap directions (true = ETH to token)\",\"minAmountsOut\":\"Array of minimum output amounts (slippage protection)\",\"proofs\":\"Array of Merkle proofs verifying each swap was in the committed batch  This function: 1. Verifies the mandatory waiting period has passed 2. For each swap, verifies its inclusion in the original commitment using Merkle proofs 3. Executes valid swaps and tracks success/failure 4. Updates the last batch timestamp for the emergency timeout mechanism  The commit-reveal delay prevents the sequencer from inserting advantageous trades after seeing market movements.\",\"users\":\"Array of user addresses for each swap\"}},\"commitBatchIntents(bytes32,uint256)\":{\"details\":\"First step of the commit-reveal pattern - sequencer commits to a batch of swap intents\",\"params\":{\"batchSize\":\"The number of swaps included in this batch  The sequencer constructs a Merkle tree of all user swap intents off-chain, then commits only the root hash on-chain. This creates a binding commitment to a specific set of transactions without revealing their details yet. This commitment prevents the sequencer from changing the transaction set after seeing new market conditions.\",\"intentRoot\":\"The Merkle root hash of all swap intents in this batch\"}},\"constructor\":{\"details\":\"Sets up the AMM with an owner and token address\",\"params\":{\"initialOwner\":\"Address that will have admin control of the contract\",\"tokenAddress\":\"The ERC20 token to be paired with ETH in this AMM\"}},\"depositETH()\":{\"details\":\"Allows users to deposit ETH into their balance in the contract Users must deposit before they can swap or provide liquidity\"},\"depositToken(uint256)\":{\"details\":\"Allows users to deposit tokens into their balance in the contract\",\"params\":{\"amount\":\"The amount of tokens to deposit Requires prior approval of the token contract\"}},\"emergencyDisableSequencer()\":{\"details\":\"Emergency function to disable sequencer-only mode if the sequencer is inactive  This can be called by anyone if the sequencer hasn't submitted a batch for longer than maxBatchDelay. It automatically enables fallback mode, allowing users to execute swaps directly.  This prevents funds from being trapped if the sequencer becomes unavailable.\"},\"executeSwap(address,bool,uint256,uint256)\":{\"details\":\"Internal function to execute a single swap (called by batchSwap)\",\"params\":{\"amountIn\":\"Amount of input asset to swap\",\"ethToToken\":\"Direction of the swap (true = ETH to token, false = token to ETH)\",\"minAmountOut\":\"Minimum acceptable output amount (slippage protection)\",\"user\":\"Address of the user performing the swap\"},\"returns\":{\"amountOut\":\"The amount of output asset received  This function: 1. Checks the user has sufficient balance 2. Calculates the output amount using the constant product formula (x*y=k) 3. Applies the swap fee 4. Checks against the minimum output amount (slippage protection) 5. Updates user balances and pool reserves  It can only be called by the contract itself as part of batch execution.\"}},\"fallbackSwap(bool,uint256,uint256)\":{\"details\":\"Fallback swap mechanism for when sequencer mode is disabled\",\"params\":{\"amountIn\":\"Amount of input asset to swap\",\"ethToToken\":\"Direction of the swap\",\"minAmountOut\":\"Minimum acceptable output amount\"},\"returns\":{\"amountOut\":\"The amount of output asset received  This function allows direct swaps when: 1. The sequencer is intentionally disabled by the owner 2. The emergency timeout has triggered due to sequencer inactivity  It uses the same swap logic as batch swaps but can be called directly by users. Protected against reentrancy attacks.\"}},\"getAmountOut(bool,uint256)\":{\"details\":\"Calculates the expected output amount for a given input\",\"params\":{\"amountIn\":\"Amount of input asset\",\"ethToToken\":\"Direction of the swap\"},\"returns\":{\"_0\":\"The expected output amount (before slippage)  This view function allows users to get a price quote without executing a swap. It uses the same constant product formula and fee structure as actual swaps.\"}},\"getSwapResult(uint256,uint256)\":{\"details\":\"Retrieves the result of a specific swap in a batch\",\"params\":{\"batchId\":\"The batch ID to query\",\"swapIndex\":\"The index of the swap in the batch\"},\"returns\":{\"failureReason\":\"If unsuccessful, the reason for failure  This function allows users to check if their swap was executed successfully and why it might have failed.\",\"success\":\"Whether the swap was successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256)\":{\"details\":\"Allows liquidity providers to withdraw their liquidity from the pool\",\"params\":{\"shareAmount\":\"The number of liquidity shares to burn  Returns a proportional amount of ETH and tokens from the pool. Protected against reentrancy attacks.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setCommitRevealDelay(uint256)\":{\"details\":\"Sets the delay between commit and reveal phases\",\"params\":{\"_delay\":\"New delay in seconds  Only callable by the contract owner.\"}},\"setFeeRate(uint256)\":{\"details\":\"Sets the fee rate for swaps\",\"params\":{\"_feeRate\":\"New fee rate (in parts per 1000)  For example, a value of 3 equals a 0.3% fee. Only callable by the contract owner.\"}},\"setSequencer(address)\":{\"details\":\"Sets the sequencer address\",\"params\":{\"newSequencer\":\"Address of the new sequencer  Only callable by the contract owner.\"}},\"setSequencerOnly(bool)\":{\"details\":\"Enables or disables sequencer-only mode\",\"params\":{\"_sequencerOnly\":\"Whether to allow only the sequencer to execute swaps  When true, only batch swaps through the sequencer are allowed. When false, direct swaps through fallbackSwap are also permitted. Only callable by the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifySwapInclusion(uint256,address,bool,uint256,uint256,bytes32[])\":{\"details\":\"Allows users to verify their swap was included in a particular batch\",\"params\":{\"amountIn\":\"The input amount\",\"batchId\":\"The batch ID to check\",\"ethToToken\":\"The direction of the swap\",\"minAmountOut\":\"The minimum output amount\",\"proof\":\"The Merkle proof to verify\",\"user\":\"The user address of the swap\"},\"returns\":{\"_0\":\"bool Whether the swap was included in the batch  This function enables users to independently verify that their swap was correctly included in a batch by the sequencer.\"}},\"withdrawETH(uint256)\":{\"details\":\"Allows users to withdraw ETH from their balance in the contract\",\"params\":{\"amount\":\"The amount of ETH to withdraw Protected against reentrancy attacks\"}},\"withdrawToken(uint256)\":{\"details\":\"Allows users to withdraw tokens from their balance in the contract\",\"params\":{\"amount\":\"The amount of tokens to withdraw Protected against reentrancy attacks\"}}},\"stateVariables\":{\"batchIntentRoots\":{\"details\":\"Stores the cryptographic commitment for each batch and its submission time These mappings support the commit-reveal pattern that prevents front-running\"},\"liquidityShares\":{\"details\":\"Tracks liquidity provider contributions to the pool Liquidity providers earn fees proportional to their share of the pool\"}},\"title\":\"SequencedAMM\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SequencedAMM.sol\":\"SequencedAMM\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"contracts/SequencedAMM.sol\":{\"keccak256\":\"0xc8cffcb51519f749c03fa8846a150e3703c81cffb7967b5e2872fc1862aa0224\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea589f580c5a60df3a7c29e3b5e46f7376bb677c467415b7cb0b25154332c4ed\",\"dweb:/ipfs/QmUEXsbru2sg5WNn9H3u48NNp6ULWK7mmQrKWwM7GL8AwB\"]}},\"version\":1}"}},"contracts/YourAMM.sol":{"YourAMM":{"abi":[{"inputs":[],"name":"depositETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460145760f6908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c908163f14210a6146044575063f6326fb314603257600080fd5b6000366003190112603f57005b600080fd5b34603f576020366003190112603f5760043590814710608757600080808085818115607f575b3390f115607357005b6040513d6000823e3d90fd5b506108fc606a565b62461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fdfea264697066735822122044e61454c8b2d7e0e12286843f0055ee0eb4a8f5df157e173183907934ce93df64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x14 JUMPI PUSH1 0xF6 SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xF14210A6 EQ PUSH1 0x44 JUMPI POP PUSH4 0xF6326FB3 EQ PUSH1 0x32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3F JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x3F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3F JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 SELFBALANCE LT PUSH1 0x87 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP6 DUP2 DUP2 ISZERO PUSH1 0x7F JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH1 0x73 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH1 0x6A JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xE6 EQ SLOAD 0xC8 0xB2 0xD7 0xE0 0xE1 0x22 DUP7 DUP5 EXTCODEHASH STOP SSTORE 0xEE 0xE 0xB4 0xA8 CREATE2 0xDF ISZERO PUSH31 0x173183907934CE93DF64736F6C634300081C00330000000000000000000000 ","sourceMap":"65:276:7:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015601257600080fd5b60003560e01c908163f14210a6146044575063f6326fb314603257600080fd5b6000366003190112603f57005b600080fd5b34603f576020366003190112603f5760043590814710608757600080808085818115607f575b3390f115607357005b6040513d6000823e3d90fd5b506108fc606a565b62461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fdfea264697066735822122044e61454c8b2d7e0e12286843f0055ee0eb4a8f5df157e173183907934ce93df64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xF14210A6 EQ PUSH1 0x44 JUMPI POP PUSH4 0xF6326FB3 EQ PUSH1 0x32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3F JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x3F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3F JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 SELFBALANCE LT PUSH1 0x87 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP6 DUP2 DUP2 ISZERO PUSH1 0x7F JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH1 0x73 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH1 0x6A JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xE6 EQ SLOAD 0xC8 0xB2 0xD7 0xE0 0xE1 0x22 DUP7 DUP5 EXTCODEHASH STOP SSTORE 0xEE 0xE 0xB4 0xA8 CREATE2 0xDF ISZERO PUSH31 0x173183907934CE93DF64736F6C634300081C00330000000000000000000000 ","sourceMap":"65:276:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;65:276:7;;;;;;;;;;;;;;;-1:-1:-1;;65:276:7;;;;;;236:21;;;:31;65:276;;;298:36;;;;;;;;;65:276;306:10;298:36;;;;;65:276;298:36;65:276;;;;;;;;;298:36;;;;;65:276;-1:-1:-1;;;65:276:7;;;;;;;;;;;;-1:-1:-1;;;65:276:7;;;;;;"},"methodIdentifiers":{"depositETH()":"f6326fb3","withdrawETH(uint256)":"f14210a6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourAMM.sol\":\"YourAMM\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/YourAMM.sol\":{\"keccak256\":\"0x8ffbe2c9fff1fdaf8c9804157521d6e4f2aa653f1597c7f3fe17d2735ac84823\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d39ee19c364bf0e149ba713dcd54e617402cb9a7ac5edfe87e9269b2ec36bdbe\",\"dweb:/ipfs/QmXATmuoKvMvxEVN8eAzFN9cY4ZweVu7GFYpTtLPy9WYvK\"]}},\"version\":1}"}}}}}